import FWCore.ParameterSet.Config as cms

process = cms.Process("RECO")

process.source = cms.Source("PoolSource",
    fileNames = cms.untracked.vstring('/store/data/Commissioning2017/Cosmics/RAW/v1/000/288/236/00000/3A83D9D0-DFFC-E611-8E76-02163E019CB5.root')
)
process.ALCARECOEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep edmTriggerResults_*_*_*', 
        'drop *_MEtoEDMConverter_*_*', 
        'keep HOCalibVariabless_hoCalibCosmicsProducer_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmics_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsGeneralTracks_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsCombinatorialTF_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsRegionalTF_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep *_ALCARECOTkAlCosmicsCTF0T_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF0T_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep SiPixelCluster*_siPixelClusters_*_*', 
        'keep SiStripCluster*_siStripClusters_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muidAllArbitrated_*_*', 
        'keep booledmValueMap_muidGMStaChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkKinkTight_*_*', 
        'keep booledmValueMap_muidGlobalMuonPromptTight_*_*', 
        'keep booledmValueMap_muidRPCMuLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityTight_*_*', 
        'keep booledmValueMap_muidTMLastStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationAngTight_*_*', 
        'keep booledmValueMap_muidTMLastStationLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtTight_*_*', 
        'keep booledmValueMap_muidTMLastStationTight_*_*', 
        'keep booledmValueMap_muidTMOneStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationAngTight_*_*', 
        'keep booledmValueMap_muidTMOneStationLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationTight_*_*', 
        'keep booledmValueMap_muidTrackerMuonArbitrated_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.AODEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(15728640),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_islandBasicClusters_*_*', 
        'keep *_fixedMatrixBasicClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_cosmicBasicClusters_*_*', 
        'keep *_cosmicSuperClusters_*_*', 
        'drop recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_islandSuperClusters_islandBarrelSuperClusters_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedEndcapSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_fixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedFixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_preshowerClusterShape_*_*', 
        'keep recoPreshowerClusterShapes_fixedMatrixPreshowerClusterShape_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'drop *_gedPhotons_valMapPFEgammaCandToPhoton_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5_*_*', 
        'keep recoTracks_cosmictrackfinderP5_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_splittedTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_cosmictrackfinderP5Top_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxHitInfoCTF_*_*', 
        'keep *_dedxHarmonic2CTF_*_*', 
        'keep *_dedxHitInfoCosmicTF_*_*', 
        'keep *_dedxHarmonic2CosmicTF_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'drop doubles_*Jets_rhos_*', 
        'drop doubles_*Jets_sigmas_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'drop recoHcalNoiseRBXs_*_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_globalCosmicSplitMuons_*_*', 
        'keep recoTrackExtras_globalCosmicSplitMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicSplitMuons_*_*', 
        'keep recoMuons_splitMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_splitMuons_*_*', 
        'keep recoTracks_cosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_cosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsNoRPC_*_*', 
        'keep recoTracks_globalCosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsNoRPC_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons1Leg_*_*', 
        'keep recoTracks_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_cosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTracks_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoMuons_muonsWitht0Correction_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsWitht0Correction_*_*', 
        'keep recoTracks_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTrackExtras_cosmicMuonsEndCapsOnly_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTracks_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoTrackExtras_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep TrackingRecHitsOwned_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoMuons_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoMuons_lhcSTAMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_lhcSTAMuons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksBeamHaloMuon_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.AODSIMEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_logErrorHarvester_*_*', 
        'drop *', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_islandBasicClusters_*_*', 
        'keep *_fixedMatrixBasicClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_cosmicBasicClusters_*_*', 
        'keep *_cosmicSuperClusters_*_*', 
        'drop recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_islandSuperClusters_islandBarrelSuperClusters_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedEndcapSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_fixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedFixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_preshowerClusterShape_*_*', 
        'keep recoPreshowerClusterShapes_fixedMatrixPreshowerClusterShape_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'drop *_gedPhotons_valMapPFEgammaCandToPhoton_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5_*_*', 
        'keep recoTracks_cosmictrackfinderP5_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_splittedTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_cosmictrackfinderP5Top_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxHitInfoCTF_*_*', 
        'keep *_dedxHarmonic2CTF_*_*', 
        'keep *_dedxHitInfoCosmicTF_*_*', 
        'keep *_dedxHarmonic2CosmicTF_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'drop doubles_*Jets_rhos_*', 
        'drop doubles_*Jets_sigmas_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'drop recoHcalNoiseRBXs_*_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_globalCosmicSplitMuons_*_*', 
        'keep recoTrackExtras_globalCosmicSplitMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicSplitMuons_*_*', 
        'keep recoMuons_splitMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_splitMuons_*_*', 
        'keep recoTracks_cosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_cosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsNoRPC_*_*', 
        'keep recoTracks_globalCosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsNoRPC_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons1Leg_*_*', 
        'keep recoTracks_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_cosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTracks_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoMuons_muonsWitht0Correction_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsWitht0Correction_*_*', 
        'keep recoTracks_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTrackExtras_cosmicMuonsEndCapsOnly_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTracks_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoTrackExtras_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep TrackingRecHitsOwned_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoMuons_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoMuons_lhcSTAMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_lhcSTAMuons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksBeamHaloMuon_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*')
)

process.BeamSpotAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BrokenLinesBzeroTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('BrokenLinesCoarse'),
    MomentumEstimate = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(True),
    UseProjectedHits = cms.bool(True)
)

process.BrokenLinesTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('BrokenLinesCoarse'),
    MomentumEstimateFieldOff = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseBzeroIfFieldOff = cms.bool(True),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(True),
    UseProjectedHits = cms.bool(True)
)

process.BtiParametersBlock = cms.PSet(
    BtiParameters = cms.PSet(
        AC1 = cms.int32(0),
        AC2 = cms.int32(3),
        ACH = cms.int32(1),
        ACL = cms.int32(2),
        CH = cms.int32(41),
        CL = cms.int32(22),
        DEAD = cms.int32(31),
        Debug = cms.untracked.int32(0),
        KACCTHETA = cms.int32(1),
        KMAX = cms.int32(64),
        LH = cms.int32(21),
        LL = cms.int32(2),
        LTS = cms.int32(3),
        PTMS0 = cms.int32(0),
        PTMS1 = cms.int32(0),
        PTMS10 = cms.int32(1),
        PTMS11 = cms.int32(1),
        PTMS12 = cms.int32(1),
        PTMS13 = cms.int32(1),
        PTMS14 = cms.int32(1),
        PTMS15 = cms.int32(1),
        PTMS16 = cms.int32(1),
        PTMS17 = cms.int32(1),
        PTMS18 = cms.int32(1),
        PTMS19 = cms.int32(1),
        PTMS2 = cms.int32(0),
        PTMS20 = cms.int32(1),
        PTMS21 = cms.int32(1),
        PTMS22 = cms.int32(1),
        PTMS23 = cms.int32(1),
        PTMS24 = cms.int32(1),
        PTMS25 = cms.int32(1),
        PTMS26 = cms.int32(1),
        PTMS27 = cms.int32(1),
        PTMS28 = cms.int32(1),
        PTMS29 = cms.int32(1),
        PTMS3 = cms.int32(0),
        PTMS30 = cms.int32(0),
        PTMS31 = cms.int32(0),
        PTMS4 = cms.int32(1),
        PTMS5 = cms.int32(1),
        PTMS6 = cms.int32(1),
        PTMS7 = cms.int32(1),
        PTMS8 = cms.int32(1),
        PTMS9 = cms.int32(1),
        RE43 = cms.int32(2),
        RH = cms.int32(61),
        RL = cms.int32(42),
        RON = cms.bool(True),
        SET = cms.int32(7),
        ST43 = cms.int32(42),
        WEN0 = cms.int32(1),
        WEN1 = cms.int32(1),
        WEN2 = cms.int32(1),
        WEN3 = cms.int32(1),
        WEN4 = cms.int32(1),
        WEN5 = cms.int32(1),
        WEN6 = cms.int32(1),
        WEN7 = cms.int32(1),
        WEN8 = cms.int32(1),
        XON = cms.bool(False)
    )
)

process.BwdBzeroReferenceTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('Combined'),
    MomentumEstimate = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.BwdReferenceTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('Combined'),
    MomentumEstimateFieldOff = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseBzeroIfFieldOff = cms.bool(True),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.BzeroReferenceTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('Combined'),
    MomentumEstimate = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.CSCCommonTrigger = cms.PSet(
    MaxBX = cms.int32(9),
    MinBX = cms.int32(3)
)

process.CSCSegAlgoDF = cms.PSet(
    algo_name = cms.string('CSCSegAlgoDF'),
    algo_psets = cms.VPSet(cms.PSet(
        CSCSegmentDebug = cms.untracked.bool(False),
        Pruning = cms.untracked.bool(False),
        chi2Max = cms.double(5000.0),
        dPhiFineMax = cms.double(0.025),
        dRPhiFineMax = cms.double(8.0),
        dXclusBoxMax = cms.double(8.0),
        dYclusBoxMax = cms.double(8.0),
        maxDPhi = cms.double(999.0),
        maxDTheta = cms.double(999.0),
        maxRatioResidualPrune = cms.double(3.0),
        minHitsForPreClustering = cms.int32(10),
        minHitsPerSegment = cms.int32(3),
        minLayersApart = cms.int32(2),
        nHitsPerClusterIsShower = cms.int32(20),
        preClustering = cms.untracked.bool(False),
        tanPhiMax = cms.double(0.5),
        tanThetaMax = cms.double(1.2)
    ), 
        cms.PSet(
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(12.0),
            dXclusBoxMax = cms.double(8.0),
            dYclusBoxMax = cms.double(12.0),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3.0),
            minHitsForPreClustering = cms.int32(10),
            minHitsPerSegment = cms.int32(3),
            minLayersApart = cms.int32(2),
            nHitsPerClusterIsShower = cms.int32(20),
            preClustering = cms.untracked.bool(False),
            tanPhiMax = cms.double(0.8),
            tanThetaMax = cms.double(2.0)
        ), 
        cms.PSet(
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(8.0),
            dYclusBoxMax = cms.double(8.0),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3.0),
            minHitsForPreClustering = cms.int32(30),
            minHitsPerSegment = cms.int32(3),
            minLayersApart = cms.int32(2),
            nHitsPerClusterIsShower = cms.int32(20),
            preClustering = cms.untracked.bool(False),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2)
        )),
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'),
    parameters_per_chamber_type = cms.vint32(3, 1, 2, 2, 1, 
        2, 1, 2, 1, 2)
)

process.CSCSegAlgoRU = cms.PSet(
    algo_name = cms.string('CSCSegAlgoRU'),
    algo_psets = cms.VPSet(cms.PSet(
        chi2Max = cms.double(100.0),
        chi2Norm_2D_ = cms.double(35),
        chi2_str = cms.double(50.0),
        dPhiIntMax = cms.double(0.005),
        dPhiMax = cms.double(0.006),
        dRIntMax = cms.double(2.0),
        dRMax = cms.double(1.5),
        doCollisions = cms.bool(True),
        minLayersApart = cms.int32(1),
        wideSeg = cms.double(3.0)
    ), 
        cms.PSet(
            chi2Max = cms.double(100.0),
            chi2Norm_2D_ = cms.double(35),
            chi2_str = cms.double(50.0),
            dPhiIntMax = cms.double(0.004),
            dPhiMax = cms.double(0.005),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ), 
        cms.PSet(
            chi2Max = cms.double(100.0),
            chi2Norm_2D_ = cms.double(35),
            chi2_str = cms.double(50.0),
            dPhiIntMax = cms.double(0.003),
            dPhiMax = cms.double(0.004),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ), 
        cms.PSet(
            chi2Max = cms.double(60.0),
            chi2Norm_2D_ = cms.double(20),
            chi2_str = cms.double(30.0),
            dPhiIntMax = cms.double(0.002),
            dPhiMax = cms.double(0.003),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ), 
        cms.PSet(
            chi2Max = cms.double(180.0),
            chi2Norm_2D_ = cms.double(60),
            chi2_str = cms.double(80.0),
            dPhiIntMax = cms.double(0.005),
            dPhiMax = cms.double(0.007),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        ), 
        cms.PSet(
            chi2Max = cms.double(100.0),
            chi2Norm_2D_ = cms.double(35),
            chi2_str = cms.double(50.0),
            dPhiIntMax = cms.double(0.004),
            dPhiMax = cms.double(0.006),
            dRIntMax = cms.double(2.0),
            dRMax = cms.double(1.5),
            doCollisions = cms.bool(True),
            minLayersApart = cms.int32(1),
            wideSeg = cms.double(3.0)
        )),
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'),
    parameters_per_chamber_type = cms.vint32(1, 2, 3, 4, 5, 
        6, 5, 6, 5, 6)
)

process.CSCSegAlgoSK = cms.PSet(
    algo_name = cms.string('CSCSegAlgoSK'),
    algo_psets = cms.VPSet(cms.PSet(
        chi2Max = cms.double(99999.0),
        dPhiFineMax = cms.double(0.025),
        dPhiMax = cms.double(0.003),
        dRPhiFineMax = cms.double(8.0),
        dRPhiMax = cms.double(8.0),
        minLayersApart = cms.int32(2),
        verboseInfo = cms.untracked.bool(True),
        wideSeg = cms.double(3.0)
    ), 
        cms.PSet(
            chi2Max = cms.double(99999.0),
            dPhiFineMax = cms.double(0.025),
            dPhiMax = cms.double(0.025),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(8.0),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True),
            wideSeg = cms.double(3.0)
        )),
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1, 1)
)

process.CSCSegAlgoST = cms.PSet(
    algo_name = cms.string('CSCSegAlgoST'),
    algo_psets = cms.VPSet(cms.PSet(
        BPMinImprovement = cms.double(10000.0),
        BrutePruning = cms.bool(True),
        CSCDebug = cms.untracked.bool(False),
        CorrectTheErrors = cms.bool(True),
        Covariance = cms.double(0.0),
        ForceCovariance = cms.bool(False),
        ForceCovarianceAll = cms.bool(False),
        NormChi2Cut2D = cms.double(20.0),
        NormChi2Cut3D = cms.double(10.0),
        Pruning = cms.bool(True),
        SeedBig = cms.double(0.0015),
        SeedSmall = cms.double(0.0002),
        curvePenalty = cms.double(2.0),
        curvePenaltyThreshold = cms.double(0.85),
        dPhiFineMax = cms.double(0.025),
        dRPhiFineMax = cms.double(8.0),
        dXclusBoxMax = cms.double(4.0),
        dYclusBoxMax = cms.double(8.0),
        hitDropLimit4Hits = cms.double(0.6),
        hitDropLimit5Hits = cms.double(0.8),
        hitDropLimit6Hits = cms.double(0.3333),
        maxDPhi = cms.double(999.0),
        maxDTheta = cms.double(999.0),
        maxRatioResidualPrune = cms.double(3),
        maxRecHitsInCluster = cms.int32(20),
        minHitsPerSegment = cms.int32(3),
        onlyBestSegment = cms.bool(False),
        preClustering = cms.bool(True),
        preClusteringUseChaining = cms.bool(True),
        prePrun = cms.bool(True),
        prePrunLimit = cms.double(3.17),
        tanPhiMax = cms.double(0.5),
        tanThetaMax = cms.double(1.2),
        useShowering = cms.bool(False),
        yweightPenalty = cms.double(1.5),
        yweightPenaltyThreshold = cms.double(1.0)
    ), 
        cms.PSet(
            BPMinImprovement = cms.double(10000.0),
            BrutePruning = cms.bool(True),
            CSCDebug = cms.untracked.bool(False),
            CorrectTheErrors = cms.bool(True),
            Covariance = cms.double(0.0),
            ForceCovariance = cms.bool(False),
            ForceCovarianceAll = cms.bool(False),
            NormChi2Cut2D = cms.double(20.0),
            NormChi2Cut3D = cms.double(10.0),
            Pruning = cms.bool(True),
            SeedBig = cms.double(0.0015),
            SeedSmall = cms.double(0.0002),
            curvePenalty = cms.double(2.0),
            curvePenaltyThreshold = cms.double(0.85),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(4.0),
            dYclusBoxMax = cms.double(8.0),
            hitDropLimit4Hits = cms.double(0.6),
            hitDropLimit5Hits = cms.double(0.8),
            hitDropLimit6Hits = cms.double(0.3333),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3),
            maxRecHitsInCluster = cms.int32(24),
            minHitsPerSegment = cms.int32(3),
            onlyBestSegment = cms.bool(False),
            preClustering = cms.bool(True),
            preClusteringUseChaining = cms.bool(True),
            prePrun = cms.bool(True),
            prePrunLimit = cms.double(3.17),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2),
            useShowering = cms.bool(False),
            yweightPenalty = cms.double(1.5),
            yweightPenaltyThreshold = cms.double(1.0)
        )),
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1, 1)
)

process.CSCSegAlgoTC = cms.PSet(
    algo_name = cms.string('CSCSegAlgoTC'),
    algo_psets = cms.VPSet(cms.PSet(
        SegmentSorting = cms.int32(1),
        chi2Max = cms.double(6000.0),
        chi2ndfProbMin = cms.double(0.0001),
        dPhiFineMax = cms.double(0.02),
        dPhiMax = cms.double(0.003),
        dRPhiFineMax = cms.double(6.0),
        dRPhiMax = cms.double(1.2),
        minLayersApart = cms.int32(2),
        verboseInfo = cms.untracked.bool(True)
    ), 
        cms.PSet(
            SegmentSorting = cms.int32(1),
            chi2Max = cms.double(6000.0),
            chi2ndfProbMin = cms.double(0.0001),
            dPhiFineMax = cms.double(0.013),
            dPhiMax = cms.double(0.00198),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(0.6),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True)
        )),
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1, 1)
)

process.CSCTimingExtractorBlock = cms.PSet(
    CSCTimingParameters = cms.PSet(
        CSCStripError = cms.double(7.0),
        CSCStripTimeOffset = cms.double(0.0),
        CSCWireError = cms.double(8.6),
        CSCWireTimeOffset = cms.double(0.0),
        PruneCut = cms.double(9.0),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'),
            RPCLayers = cms.bool(True)
        ),
        UseStripTime = cms.bool(True),
        UseWireTime = cms.bool(True),
        debug = cms.bool(False)
    )
)

process.ChargeSignificanceTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ChargeSignificanceTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0)
)

process.CkfBaseTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.CkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    updator = cms.string('KFUpdator')
)

process.CkfTrajectoryBuilderBeamHalo = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('BeamHaloPropagatorAlong'),
    propagatorOpposite = cms.string('BeamHaloPropagatorOpposite'),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('ckfTrajectoryFilterBeamHaloMuon')
    ),
    updator = cms.string('KFUpdator')
)

process.CombIsoCuts = cms.PSet(
    IsCombinedIso = cms.untracked.bool(True),
    IsRelativeIso = cms.untracked.bool(True),
    IsoCut03 = cms.untracked.double(0.15),
    ptThreshold = cms.untracked.double(0.0)
)

process.CombinedFwdBwdBzeroTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    BwdBzero = cms.PSet(
        AllowZeroMaterial = cms.bool(False),
        IncludeAPEs = cms.bool(False),
        MaterialEffects = cms.string('Combined'),
        MomentumEstimate = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('oppositeToMomentum'),
        TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    FwdBzero = cms.PSet(
        AllowZeroMaterial = cms.bool(False),
        IncludeAPEs = cms.bool(False),
        MaterialEffects = cms.string('Combined'),
        MomentumEstimate = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('Combined'),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('CombinedTrajectoryFactory'),
    TrajectoryFactoryNames = cms.vstring('BzeroReferenceTrajectoryFactory,FwdBzero', 
        'BzeroReferenceTrajectoryFactory,BwdBzero'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True),
    useAllFactories = cms.bool(True)
)

process.CombinedFwdBwdDualBzeroTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    BwdBzero = cms.PSet(
        AllowZeroMaterial = cms.bool(False),
        IncludeAPEs = cms.bool(False),
        MaterialEffects = cms.string('Combined'),
        MomentumEstimate = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('oppositeToMomentum'),
        TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    DualBzero = cms.PSet(
        AllowZeroMaterial = cms.bool(False),
        IncludeAPEs = cms.bool(False),
        MaterialEffects = cms.string('Combined'),
        MomentumEstimate = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('DualBzeroTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    FwdBzero = cms.PSet(
        AllowZeroMaterial = cms.bool(False),
        IncludeAPEs = cms.bool(False),
        MaterialEffects = cms.string('Combined'),
        MomentumEstimate = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('Combined'),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('CombinedTrajectoryFactory'),
    TrajectoryFactoryNames = cms.vstring('BzeroReferenceTrajectoryFactory,FwdBzero', 
        'BzeroReferenceTrajectoryFactory,BwdBzero', 
        'DualBzeroTrajectoryFactory,DualBzero'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True),
    useAllFactories = cms.bool(True)
)

process.CombinedFwdBwdDualTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    Bwd = cms.PSet(
        AllowZeroMaterial = cms.bool(False),
        IncludeAPEs = cms.bool(False),
        MaterialEffects = cms.string('Combined'),
        MomentumEstimateFieldOff = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('oppositeToMomentum'),
        TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseBzeroIfFieldOff = cms.bool(True),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    Dual = cms.PSet(
        AllowZeroMaterial = cms.bool(False),
        IncludeAPEs = cms.bool(False),
        MaterialEffects = cms.string('Combined'),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('DualTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    Fwd = cms.PSet(
        AllowZeroMaterial = cms.bool(False),
        IncludeAPEs = cms.bool(False),
        MaterialEffects = cms.string('Combined'),
        MomentumEstimateFieldOff = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseBzeroIfFieldOff = cms.bool(True),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('Combined'),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('CombinedTrajectoryFactory'),
    TrajectoryFactoryNames = cms.vstring('ReferenceTrajectoryFactory,Fwd', 
        'ReferenceTrajectoryFactory,Bwd', 
        'DualTrajectoryFactory,Dual'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True),
    useAllFactories = cms.bool(True)
)

process.CombinedFwdBwdTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    Bwd = cms.PSet(
        AllowZeroMaterial = cms.bool(False),
        IncludeAPEs = cms.bool(False),
        MaterialEffects = cms.string('Combined'),
        MomentumEstimateFieldOff = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('oppositeToMomentum'),
        TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseBzeroIfFieldOff = cms.bool(True),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    Fwd = cms.PSet(
        AllowZeroMaterial = cms.bool(False),
        IncludeAPEs = cms.bool(False),
        MaterialEffects = cms.string('Combined'),
        MomentumEstimateFieldOff = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseBzeroIfFieldOff = cms.bool(True),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('Combined'),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('CombinedTrajectoryFactory'),
    TrajectoryFactoryNames = cms.vstring('ReferenceTrajectoryFactory,Fwd', 
        'ReferenceTrajectoryFactory,Bwd'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True),
    useAllFactories = cms.bool(True)
)

process.CombinedTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('Combined'),
    PropagationDirection = cms.string('alongMomentum'),
    Reference = cms.PSet(
        AllowZeroMaterial = cms.bool(False),
        IncludeAPEs = cms.bool(False),
        MaterialEffects = cms.string('Combined'),
        MomentumEstimateFieldOff = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseBzeroIfFieldOff = cms.bool(True),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    TrajectoryFactoryName = cms.string('CombinedTrajectoryFactory'),
    TrajectoryFactoryNames = cms.vstring('TwoBodyDecayTrajectoryFactory,TwoBody', 
        'ReferenceTrajectoryFactory,Reference'),
    TwoBody = cms.PSet(
        AllowZeroMaterial = cms.bool(False),
        Chi2Cut = cms.double(10000.0),
        ConstructTsosWithErrors = cms.bool(False),
        EstimatorParameters = cms.PSet(
            MaxIterationDifference = cms.untracked.double(0.01),
            MaxIterations = cms.untracked.int32(100),
            RobustificationConstant = cms.untracked.double(1.0),
            UseInvariantMass = cms.untracked.bool(True)
        ),
        IncludeAPEs = cms.bool(False),
        MaterialEffects = cms.string('Combined'),
        NSigmaCut = cms.double(100.0),
        ParticleProperties = cms.PSet(
            PrimaryMass = cms.double(91.1876),
            PrimaryWidth = cms.double(2.4952),
            SecondaryMass = cms.double(0.105658)
        ),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('TwoBodyDecayTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True),
        UseRefittedState = cms.bool(True)
    ),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True),
    useAllFactories = cms.bool(False)
)

process.CompositeTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet()
)

process.CosmicSeedCreator = cms.PSet(
    ComponentName = cms.string('CosmicSeedCreator'),
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string('ParabolicMf'),
    maxseeds = cms.int32(10000),
    propagator = cms.string('PropagatorWithMaterialParabolicMf')
)

process.DF_ME1234_1 = cms.PSet(
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    chi2Max = cms.double(5000.0),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(8.0),
    dYclusBoxMax = cms.double(8.0),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3.0),
    minHitsForPreClustering = cms.int32(10),
    minHitsPerSegment = cms.int32(3),
    minLayersApart = cms.int32(2),
    nHitsPerClusterIsShower = cms.int32(20),
    preClustering = cms.untracked.bool(False),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2)
)

process.DF_ME1234_2 = cms.PSet(
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    chi2Max = cms.double(5000.0),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(12.0),
    dXclusBoxMax = cms.double(8.0),
    dYclusBoxMax = cms.double(12.0),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3.0),
    minHitsForPreClustering = cms.int32(10),
    minHitsPerSegment = cms.int32(3),
    minLayersApart = cms.int32(2),
    nHitsPerClusterIsShower = cms.int32(20),
    preClustering = cms.untracked.bool(False),
    tanPhiMax = cms.double(0.8),
    tanThetaMax = cms.double(2.0)
)

process.DF_ME1A = cms.PSet(
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    chi2Max = cms.double(5000.0),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(8.0),
    dYclusBoxMax = cms.double(8.0),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3.0),
    minHitsForPreClustering = cms.int32(30),
    minHitsPerSegment = cms.int32(3),
    minLayersApart = cms.int32(2),
    nHitsPerClusterIsShower = cms.int32(20),
    preClustering = cms.untracked.bool(False),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2)
)

process.DQMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_MEtoEDMConverter_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.DTLinearDriftAlgo_CosmicData = cms.PSet(
    recAlgo = cms.string('DTLinearDriftAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        driftVelocity = cms.double(0.00543),
        hitResolution = cms.double(0.02),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        )
    )
)

process.DTLinearDriftFromDBAlgo = cms.PSet(
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(True),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(True),
            doWirePropCorrection = cms.bool(True),
            tTrigLabel = cms.string(''),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(True)
    )
)

process.DTLinearDriftFromDBAlgo_CosmicData = cms.PSet(
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(False),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(False)
    )
)

process.DTMeantimerPatternReco2DAlgo_LinearDriftFromDB = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        AlphaMaxPhi = cms.double(1.0),
        AlphaMaxTheta = cms.double(0.9),
        MaxAllowedHits = cms.uint32(50),
        MaxChi2 = cms.double(4.0),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nSharedHitsMax = cms.int32(2),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        ),
        segmCleanerMode = cms.int32(2)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco')
)

process.DTMeantimerPatternReco2DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        AlphaMaxPhi = cms.double(100.0),
        AlphaMaxTheta = cms.double(100.0),
        MaxAllowedHits = cms.uint32(50),
        MaxChi2 = cms.double(4.0),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nSharedHitsMax = cms.int32(2),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        ),
        segmCleanerMode = cms.int32(2)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco')
)

process.DTMeantimerPatternReco4DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(100.0),
            AlphaMaxTheta = cms.double(100.0),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            intime_cut = cms.double(-1.0),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(False),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(False),
                    doWirePropCorrection = cms.bool(False),
                    tTrigLabel = cms.string('cosmics'),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(False)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D')
)

process.DTTPGMapBlock = cms.PSet(
    DTTPGMap = cms.untracked.PSet(
    **dict(
        [
            ("wh0st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh0st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se4" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("wh1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se4" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("wh1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se4" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("wh1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se3" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("whm1st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se3" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("whm1st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se3" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("whm1st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
        ] +
        [
            ("whm2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ]
        )
    )
)

process.DTTPGParametersBlock = cms.PSet(
    DTTPGParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SectCollParameters = cms.PSet(
            Debug = cms.untracked.bool(False),
            SCCSP1 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCCSP4 = cms.int32(0),
            SCCSP5 = cms.int32(0),
            SCECF1 = cms.bool(False),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCECF4 = cms.bool(False)
        ),
        TUParameters = cms.PSet(
            BtiParameters = cms.PSet(
                AC1 = cms.int32(0),
                AC2 = cms.int32(3),
                ACH = cms.int32(1),
                ACL = cms.int32(2),
                CH = cms.int32(41),
                CL = cms.int32(22),
                DEAD = cms.int32(31),
                Debug = cms.untracked.int32(0),
                KACCTHETA = cms.int32(1),
                KMAX = cms.int32(64),
                LH = cms.int32(21),
                LL = cms.int32(2),
                LTS = cms.int32(3),
                PTMS0 = cms.int32(0),
                PTMS1 = cms.int32(0),
                PTMS10 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS12 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS15 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS20 = cms.int32(1),
                PTMS21 = cms.int32(1),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                PTMS3 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS31 = cms.int32(0),
                PTMS4 = cms.int32(1),
                PTMS5 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS8 = cms.int32(1),
                PTMS9 = cms.int32(1),
                RE43 = cms.int32(2),
                RH = cms.int32(61),
                RL = cms.int32(42),
                RON = cms.bool(True),
                SET = cms.int32(7),
                ST43 = cms.int32(42),
                WEN0 = cms.int32(1),
                WEN1 = cms.int32(1),
                WEN2 = cms.int32(1),
                WEN3 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                WEN6 = cms.int32(1),
                WEN7 = cms.int32(1),
                WEN8 = cms.int32(1),
                XON = cms.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            LutParameters = cms.PSet(
                BTIC = cms.untracked.int32(0),
                D = cms.untracked.double(0),
                Debug = cms.untracked.bool(False),
                WHEEL = cms.untracked.int32(-1),
                XCN = cms.untracked.double(0)
            ),
            TSPhiParameters = cms.PSet(
                Debug = cms.untracked.bool(False),
                TSMCCE1 = cms.bool(True),
                TSMCCE2 = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSMHSP = cms.int32(1),
                TSMHTE1 = cms.bool(True),
                TSMHTE2 = cms.bool(False),
                TSMHTEC = cms.bool(False),
                TSMMSK1 = cms.int32(312),
                TSMMSK2 = cms.int32(312),
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSMNOEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSSCCEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSGS1 = cms.int32(1),
                TSSGS2 = cms.int32(1),
                TSSHTE1 = cms.bool(True),
                TSSHTE2 = cms.bool(False),
                TSSHTEC = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSSMSK2 = cms.int32(312),
                TSSNOE1 = cms.bool(True),
                TSSNOE2 = cms.bool(False),
                TSSNOEC = cms.bool(False),
                TSTREN0 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN10 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN18 = cms.bool(True),
                TSTREN19 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN9 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            TracoParameters = cms.PSet(
                BTIC = cms.int32(32),
                DD = cms.int32(18),
                Debug = cms.untracked.int32(0),
                FHISM = cms.int32(0),
                FHTMSK = cms.int32(0),
                FHTPRF = cms.int32(1),
                FLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                FSLMSK = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                LTF = cms.int32(0),
                LTS = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                REUSEI = cms.int32(1),
                REUSEO = cms.int32(1),
                SHISM = cms.int32(0),
                SHTMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SLTMSK = cms.int32(1),
                SPRGCOMP = cms.int32(2),
                SSLMSK = cms.int32(0),
                TRGENB0 = cms.int32(1),
                TRGENB1 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB2 = cms.int32(1),
                TRGENB3 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                TRGENB9 = cms.int32(1)
            )
        )
    )
)

process.DTTimingExtractorBlock = cms.PSet(
    DTTimingParameters = cms.PSet(
        DTTimeOffset = cms.double(0.0),
        DoWireCorr = cms.bool(True),
        DropTheta = cms.bool(True),
        HitError = cms.double(2.8),
        HitsMin = cms.int32(3),
        PruneCut = cms.double(5.0),
        RequireBothProjections = cms.bool(False),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'),
            RPCLayers = cms.bool(True)
        ),
        UseSegmentT0 = cms.bool(False),
        debug = cms.bool(False)
    )
)

process.DefaultAlgorithms = cms.PSet(
    APVInspectMode = cms.string('BaselineFollower'),
    APVRestoreMode = cms.string('BaselineFollower'),
    ApplyBaselineCleaner = cms.bool(True),
    ApplyBaselineRejection = cms.bool(True),
    CleaningSequence = cms.uint32(1),
    CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
    CutToAvoidSignal = cms.double(2.0),
    DeltaCMThreshold = cms.uint32(20),
    Deviation = cms.uint32(25),
    ForceNoRestore = cms.bool(False),
    Fraction = cms.double(0.2),
    Iterations = cms.int32(3),
    MeanCM = cms.int32(0),
    PedestalSubtractionFedMode = cms.bool(False),
    SelfSelectRestoreAlgo = cms.bool(False),
    SiStripFedZeroSuppressionMode = cms.uint32(4),
    TruncateInSuppressor = cms.bool(True),
    consecThreshold = cms.uint32(5),
    distortionThreshold = cms.uint32(20),
    doAPVRestore = cms.bool(True),
    filteredBaselineDerivativeSumSquare = cms.double(30),
    filteredBaselineMax = cms.double(6),
    hitStripThreshold = cms.uint32(40),
    minStripsToFit = cms.uint32(4),
    nSaturatedStrip = cms.uint32(2),
    nSigmaNoiseDerTh = cms.uint32(4),
    nSmooth = cms.uint32(9),
    restoreThreshold = cms.double(0.5),
    slopeX = cms.int32(3),
    slopeY = cms.int32(4),
    useCMMeanMap = cms.bool(False),
    useRealMeanCM = cms.bool(False)
)

process.DefaultClusterizer = cms.PSet(
    Algorithm = cms.string('ThreeThresholdAlgorithm'),
    ChannelThreshold = cms.double(2.0),
    ClusterThreshold = cms.double(5.0),
    MaxAdjacentBad = cms.uint32(0),
    MaxSequentialBad = cms.uint32(1),
    MaxSequentialHoles = cms.uint32(0),
    QualityLabel = cms.string(''),
    RemoveApvShots = cms.bool(True),
    SeedThreshold = cms.double(3.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    )
)

process.DefaultHisto = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('unnamed'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(100),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(),
    title = cms.string('Histogram of Something'),
    topFolderName = cms.string('PixelPhase1'),
    xlabel = cms.string('something'),
    ylabel = cms.string('count')
)

process.DefaultHistoDigiCluster = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('unnamed'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(100),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(),
    title = cms.string('Histogram of Something'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('something'),
    ylabel = cms.string('count')
)

process.DefaultHistoReadout = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('unnamed'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(100),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(),
    title = cms.string('Histogram of Something'),
    topFolderName = cms.string('PixelPhase1/FED/Readout'),
    xlabel = cms.string('something'),
    ylabel = cms.string('count')
)

process.DefaultHistoSummary = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('unnamed'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(100),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(),
    title = cms.string('Histogram of Something'),
    topFolderName = cms.string('PixelPhase1/Summary'),
    xlabel = cms.string('something'),
    ylabel = cms.string('count')
)

process.DefaultHistoTrack = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('unnamed'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(100),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(),
    title = cms.string('Histogram of Something'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('something'),
    ylabel = cms.string('count')
)

process.DigiToRawFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*')
)

process.DualBzeroTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('Combined'),
    MomentumEstimate = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('DualBzeroTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.DualTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('Combined'),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('DualTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.EvtScalersAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.EvtScalersRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*')
)

process.FEVTDEBUGEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'keep *_logErrorHarvester_*_*', 
        'drop *', 
        'keep *_logErrorHarvester_*_*', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep PixelDigiedmDetSetVector_siPixelDigis_*_*', 
        'keep *_siStripDigis_*_*', 
        'keep *_siStripZeroSuppression_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelRecHits_*_*', 
        'keep *_siStripRecHits_*_*', 
        'keep *_siStripMatchedRecHits_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsT0Seg_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep ESDataFramesSorted_ecalPreshowerDigis_*_*', 
        'keep *_islandBasicClusters_*_*', 
        'keep *_fixedMatrixBasicClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_uncleanedHybridSuperClusters_*_*', 
        'keep *_cosmicBasicClusters_*_*', 
        'keep *_cosmicSuperClusters_*_*', 
        'drop recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_islandSuperClusters_islandBarrelSuperClusters_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_correctedFixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_fixedMatrixSuperClustersWithPreshower_*_*', 
        'keep *_correctedEndcapSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_preshowerClusterShape_*_*', 
        'keep recoPreshowerClusterShapes_fixedMatrixPreshowerClusterShape_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5_*_*', 
        'keep recoTracks_cosmictrackfinderP5_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_splittedTracksP5_*_*', 
        'keep recoTrackExtras_splittedTracksP5_*_*', 
        'keep TrackingRecHitsOwned_splittedTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_cosmictrackfinderP5Top_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Top_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Top_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTrackExtras_regionalCosmicTracks_*_*', 
        'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxTruncated40CTF_*_*', 
        'keep *_dedxHitInfoCTF_*_*', 
        'keep *_dedxHarmonic2CTF_*_*', 
        'keep *_dedxTruncated40CosmicTF_*_*', 
        'keep *_dedxHitInfoCosmicTF_*_*', 
        'keep *_dedxHarmonic2CosmicTF_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep *_CosmicMuonSeedEndCapsOnly_*_*', 
        'keep *_CosmicMuonSeedWitht0Correction_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_globalCosmicSplitMuons_*_*', 
        'keep recoTrackExtras_globalCosmicSplitMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicSplitMuons_*_*', 
        'keep recoMuons_splitMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_splitMuons_*_*', 
        'keep recoTracks_cosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_cosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsNoRPC_*_*', 
        'keep recoTracks_globalCosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsNoRPC_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons1Leg_*_*', 
        'keep recoTracks_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_cosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTracks_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoMuons_muonsWitht0Correction_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsWitht0Correction_*_*', 
        'keep recoTracks_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTrackExtras_cosmicMuonsEndCapsOnly_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTracks_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoTrackExtras_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep TrackingRecHitsOwned_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoMuons_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoMuons_lhcSTAMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_lhcSTAMuons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksBeamHaloMuon_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep recoRecoEcalCandidates_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep *_simCscTriggerPrimitiveDigis_*_*', 
        'keep *_simDtTriggerPrimitiveDigis_*_*', 
        'keep *_simRpcTriggerDigis_*_*', 
        'keep *_simRctDigis_*_*', 
        'keep *_simCsctfDigis_*_*', 
        'keep *_simCsctfTrackDigis_*_*', 
        'keep *_simDttfDigis_*_*', 
        'keep *_simGctDigis_*_*', 
        'keep *_simGmtDigis_*_*', 
        'keep *_simGtDigis_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep *_simSiPixelDigis_*_*', 
        'keep *_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_trackingParticleRecoTrackAsssociation_*_*', 
        'keep *_assoc2secStepTk_*_*', 
        'keep *_assoc2thStepTk_*_*', 
        'keep *_assoc2GsfTracks_*_*', 
        'keep *_assocOutInConversionTracks_*_*', 
        'keep *_assocInOutConversionTracks_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonDTDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep *_simEcalDigis_*_*', 
        'keep *_simEcalPreshowerDigis_*_*', 
        'keep *_simEcalTriggerPrimitiveDigis_*_*', 
        'keep *_simEcalEBTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*', 
        'keep *_simHcalTriggerPrimitiveDigis_*_*', 
        'keep *_mix_HcalSamples_*', 
        'keep *_mix_HcalHits_*', 
        'keep *_simHcalUnsuppressedDigis_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'keep *_logErrorHarvester_*_*', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep PixelDigiedmDetSetVector_siPixelDigis_*_*', 
        'keep *_siStripDigis_*_*', 
        'keep *_siStripZeroSuppression_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelRecHits_*_*', 
        'keep *_siStripRecHits_*_*', 
        'keep *_siStripMatchedRecHits_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsT0Seg_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep ESDataFramesSorted_ecalPreshowerDigis_*_*', 
        'keep *_islandBasicClusters_*_*', 
        'keep *_fixedMatrixBasicClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_uncleanedHybridSuperClusters_*_*', 
        'keep *_cosmicBasicClusters_*_*', 
        'keep *_cosmicSuperClusters_*_*', 
        'drop recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_islandSuperClusters_islandBarrelSuperClusters_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_correctedFixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_fixedMatrixSuperClustersWithPreshower_*_*', 
        'keep *_correctedEndcapSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_preshowerClusterShape_*_*', 
        'keep recoPreshowerClusterShapes_fixedMatrixPreshowerClusterShape_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep recoRecoEcalCandidates_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5_*_*', 
        'keep recoTracks_cosmictrackfinderP5_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_splittedTracksP5_*_*', 
        'keep recoTrackExtras_splittedTracksP5_*_*', 
        'keep TrackingRecHitsOwned_splittedTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_cosmictrackfinderP5Top_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Top_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Top_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTrackExtras_regionalCosmicTracks_*_*', 
        'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxTruncated40CTF_*_*', 
        'keep *_dedxHitInfoCTF_*_*', 
        'keep *_dedxHarmonic2CTF_*_*', 
        'keep *_dedxTruncated40CosmicTF_*_*', 
        'keep *_dedxHitInfoCosmicTF_*_*', 
        'keep *_dedxHarmonic2CosmicTF_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep *_CosmicMuonSeedEndCapsOnly_*_*', 
        'keep *_CosmicMuonSeedWitht0Correction_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_globalCosmicSplitMuons_*_*', 
        'keep recoTrackExtras_globalCosmicSplitMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicSplitMuons_*_*', 
        'keep recoMuons_splitMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_splitMuons_*_*', 
        'keep recoTracks_cosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_cosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsNoRPC_*_*', 
        'keep recoTracks_globalCosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsNoRPC_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons1Leg_*_*', 
        'keep recoTracks_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_cosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTracks_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoMuons_muonsWitht0Correction_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsWitht0Correction_*_*', 
        'keep recoTracks_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTrackExtras_cosmicMuonsEndCapsOnly_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTracks_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoTrackExtras_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep TrackingRecHitsOwned_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoMuons_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoMuons_lhcSTAMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_lhcSTAMuons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksBeamHaloMuon_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTHLTALLEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'keep *_logErrorHarvester_*_*', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep PixelDigiedmDetSetVector_siPixelDigis_*_*', 
        'keep *_siStripDigis_*_*', 
        'keep *_siStripZeroSuppression_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelRecHits_*_*', 
        'keep *_siStripRecHits_*_*', 
        'keep *_siStripMatchedRecHits_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsT0Seg_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep ESDataFramesSorted_ecalPreshowerDigis_*_*', 
        'keep *_islandBasicClusters_*_*', 
        'keep *_fixedMatrixBasicClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_uncleanedHybridSuperClusters_*_*', 
        'keep *_cosmicBasicClusters_*_*', 
        'keep *_cosmicSuperClusters_*_*', 
        'drop recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_islandSuperClusters_islandBarrelSuperClusters_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_correctedFixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_fixedMatrixSuperClustersWithPreshower_*_*', 
        'keep *_correctedEndcapSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_preshowerClusterShape_*_*', 
        'keep recoPreshowerClusterShapes_fixedMatrixPreshowerClusterShape_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep recoRecoEcalCandidates_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5_*_*', 
        'keep recoTracks_cosmictrackfinderP5_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_splittedTracksP5_*_*', 
        'keep recoTrackExtras_splittedTracksP5_*_*', 
        'keep TrackingRecHitsOwned_splittedTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_cosmictrackfinderP5Top_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Top_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Top_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTrackExtras_regionalCosmicTracks_*_*', 
        'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxTruncated40CTF_*_*', 
        'keep *_dedxHitInfoCTF_*_*', 
        'keep *_dedxHarmonic2CTF_*_*', 
        'keep *_dedxTruncated40CosmicTF_*_*', 
        'keep *_dedxHitInfoCosmicTF_*_*', 
        'keep *_dedxHarmonic2CosmicTF_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep *_CosmicMuonSeedEndCapsOnly_*_*', 
        'keep *_CosmicMuonSeedWitht0Correction_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_globalCosmicSplitMuons_*_*', 
        'keep recoTrackExtras_globalCosmicSplitMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicSplitMuons_*_*', 
        'keep recoMuons_splitMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_splitMuons_*_*', 
        'keep recoTracks_cosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_cosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsNoRPC_*_*', 
        'keep recoTracks_globalCosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsNoRPC_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons1Leg_*_*', 
        'keep recoTracks_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_cosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTracks_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoMuons_muonsWitht0Correction_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsWitht0Correction_*_*', 
        'keep recoTracks_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTrackExtras_cosmicMuonsEndCapsOnly_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTracks_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoTrackExtras_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep TrackingRecHitsOwned_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoMuons_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoMuons_lhcSTAMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_lhcSTAMuons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksBeamHaloMuon_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep *_*_*_HLT' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTSIMEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'keep *_logErrorHarvester_*_*', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep PixelDigiedmDetSetVector_siPixelDigis_*_*', 
        'keep *_siStripDigis_*_*', 
        'keep *_siStripZeroSuppression_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelRecHits_*_*', 
        'keep *_siStripRecHits_*_*', 
        'keep *_siStripMatchedRecHits_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsT0Seg_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep ESDataFramesSorted_ecalPreshowerDigis_*_*', 
        'keep *_islandBasicClusters_*_*', 
        'keep *_fixedMatrixBasicClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_uncleanedHybridSuperClusters_*_*', 
        'keep *_cosmicBasicClusters_*_*', 
        'keep *_cosmicSuperClusters_*_*', 
        'drop recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_islandSuperClusters_islandBarrelSuperClusters_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_correctedFixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_fixedMatrixSuperClustersWithPreshower_*_*', 
        'keep *_correctedEndcapSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_preshowerClusterShape_*_*', 
        'keep recoPreshowerClusterShapes_fixedMatrixPreshowerClusterShape_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5_*_*', 
        'keep recoTracks_cosmictrackfinderP5_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_splittedTracksP5_*_*', 
        'keep recoTrackExtras_splittedTracksP5_*_*', 
        'keep TrackingRecHitsOwned_splittedTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_cosmictrackfinderP5Top_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Top_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Top_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTrackExtras_regionalCosmicTracks_*_*', 
        'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxTruncated40CTF_*_*', 
        'keep *_dedxHitInfoCTF_*_*', 
        'keep *_dedxHarmonic2CTF_*_*', 
        'keep *_dedxTruncated40CosmicTF_*_*', 
        'keep *_dedxHitInfoCosmicTF_*_*', 
        'keep *_dedxHarmonic2CosmicTF_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep *_CosmicMuonSeedEndCapsOnly_*_*', 
        'keep *_CosmicMuonSeedWitht0Correction_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_globalCosmicSplitMuons_*_*', 
        'keep recoTrackExtras_globalCosmicSplitMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicSplitMuons_*_*', 
        'keep recoMuons_splitMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_splitMuons_*_*', 
        'keep recoTracks_cosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_cosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsNoRPC_*_*', 
        'keep recoTracks_globalCosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsNoRPC_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons1Leg_*_*', 
        'keep recoTracks_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_cosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTracks_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoMuons_muonsWitht0Correction_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsWitht0Correction_*_*', 
        'keep recoTracks_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTrackExtras_cosmicMuonsEndCapsOnly_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTracks_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoTrackExtras_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep TrackingRecHitsOwned_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoMuons_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoMuons_lhcSTAMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_lhcSTAMuons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksBeamHaloMuon_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep recoRecoEcalCandidates_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.GeneratorInterfaceAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*')
)

process.GeneratorInterfaceLHE = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep *_externalLHEProducer_LHEScriptOutput_*')
)

process.GeneratorInterfaceRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*')
)

process.GeneratorInterfaceRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*')
)

process.GlobalMuonRefitter = cms.PSet(
    CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
    Chi2CutCSC = cms.double(1.0),
    Chi2CutDT = cms.double(30.0),
    Chi2CutGEM = cms.double(1.0),
    Chi2CutME0 = cms.double(1.0),
    Chi2CutRPC = cms.double(1.0),
    Chi2ProbabilityCut = cms.double(30.0),
    DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
    DYTselector = cms.int32(1),
    DYTthrs = cms.vint32(10, 10),
    DYTupdator = cms.bool(True),
    DYTuseAPE = cms.bool(False),
    DoPredictionsOnly = cms.bool(False),
    Fitter = cms.string('KFFitterForRefitInsideOut'),
    GEMRecHitLabel = cms.InputTag("gemRecHits"),
    HitThreshold = cms.int32(1),
    ME0RecHitLabel = cms.InputTag("me0Segments"),
    MuonHitsOption = cms.int32(1),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    PropDirForCosmics = cms.bool(False),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    PtCut = cms.double(1.0),
    RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
    RefitDirection = cms.string('insideOut'),
    RefitFlag = cms.bool(True),
    RefitRPCHits = cms.bool(True),
    SkipStation = cms.int32(-1),
    Smoother = cms.string('KFSmootherForRefitInsideOut'),
    TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
    TrackerSkipSection = cms.int32(-1),
    TrackerSkipSystem = cms.int32(-1)
)

process.GlobalMuonTrackMatcher = cms.PSet(
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    )
)

process.GlobalTrajectoryBuilderCommon = cms.PSet(
    GlbRefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        Chi2CutCSC = cms.double(150.0),
        Chi2CutDT = cms.double(10.0),
        Chi2CutGEM = cms.double(1.0),
        Chi2CutME0 = cms.double(1.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(20, 30),
        DYTupdator = cms.bool(False),
        DYTuseAPE = cms.bool(False),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('GlbMuKFFitter'),
        GEMRecHitLabel = cms.InputTag("gemRecHits"),
        HitThreshold = cms.int32(1),
        ME0RecHitLabel = cms.InputTag("me0Segments"),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(False),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RefitDirection = cms.string('insideOut'),
        RefitFlag = cms.bool(True),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    ),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    MuonTrackingRegionBuilder = cms.PSet(
        DeltaEta = cms.double(0.2),
        DeltaPhi = cms.double(0.2),
        DeltaR = cms.double(0.2),
        DeltaZ = cms.double(15.9),
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        Eta_fixed = cms.bool(False),
        Eta_min = cms.double(0.1),
        MeasurementTrackerName = cms.InputTag(""),
        OnDemand = cms.int32(-1),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        Phi_fixed = cms.bool(False),
        Phi_min = cms.double(0.1),
        Pt_fixed = cms.bool(False),
        Pt_min = cms.double(1.5),
        Rescale_Dz = cms.double(3.0),
        Rescale_eta = cms.double(3.0),
        Rescale_phi = cms.double(3.0),
        UseVertex = cms.bool(False),
        Z_fixed = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        input = cms.InputTag(""),
        maxRegions = cms.int32(1),
        precise = cms.bool(True),
        vertexCollection = cms.InputTag("")
    ),
    PCut = cms.double(2.5),
    PtCut = cms.double(1.0),
    RefitRPCHits = cms.bool(True),
    ScaleTECxFactor = cms.double(-1.0),
    ScaleTECyFactor = cms.double(-1.0),
    TrackTransformer = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
    TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
)

process.GroupedCkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.GroupedCkfTrajectoryBuilderP5 = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2MeasurementEstimatorForP5'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(1),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('ckfBaseTrajectoryFilterP5')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.GroupedCkfTrajectoryBuilderP5Bottom = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string('MeasurementTrackerBottom'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2MeasurementEstimatorForP5'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(1),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('ckfBaseTrajectoryFilterP5')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.GroupedCkfTrajectoryBuilderP5Top = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string('MeasurementTrackerTop'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2MeasurementEstimatorForP5'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(1),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('ckfBaseTrajectoryFilterP5')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.HFRecalParameterBlock = cms.PSet(
    HFdepthOneParameterA = cms.vdouble(0.004123, 0.00602, 0.008201, 0.010489, 0.013379, 
        0.016997, 0.021464, 0.027371, 0.034195, 0.044807, 
        0.058939, 0.125497),
    HFdepthOneParameterB = cms.vdouble(-4e-06, -2e-06, 0.0, 4e-06, 1.5e-05, 
        2.6e-05, 6.3e-05, 8.4e-05, 0.00016, 0.000107, 
        0.000425, 0.000209),
    HFdepthTwoParameterA = cms.vdouble(0.002861, 0.004168, 0.0064, 0.008388, 0.011601, 
        0.014425, 0.018633, 0.023232, 0.028274, 0.035447, 
        0.051579, 0.086593),
    HFdepthTwoParameterB = cms.vdouble(-2e-06, -0.0, -7e-06, -6e-06, -2e-06, 
        1e-06, 1.9e-05, 3.1e-05, 6.7e-05, 1.2e-05, 
        0.000157, -3e-06)
)

process.HLTDebugFEVT = cms.PSet(
    outputCommands = cms.vstring( ('drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCaloStage2Digis_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEgammaGsfTracks_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltElectronsVertex_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGmtStage2Digis_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltGtStage2Digis_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0ElectronsTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2HighPtTkMuMerged_*_*', 
        'keep *_hltIter2MergedForElectrons_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracksElectrons_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*' ) )
)

process.HLTDebugRAW = cms.PSet(
    outputCommands = cms.vstring( ('drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCaloStage2Digis_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEgammaGsfTracks_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltElectronsVertex_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGmtStage2Digis_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltGtStage2Digis_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0ElectronsTrackSelectionHighPurity_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2HighPtTkMuMerged_*_*', 
        'keep *_hltIter2MergedForElectrons_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracksElectrons_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*' ) )
)

process.HLTriggerAOD = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HLTriggerRAW = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HLTriggerRECO = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HcalNoiseParameterSet = cms.PSet(
    TS4TS5EnergyThreshold = cms.double(50),
    TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.4, -0.2, -0.08, 
        0, 0.1),
    TS4TS5LowerThreshold = cms.vdouble(100, 120, 150, 200, 300, 
        400, 500),
    TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72, 0.72),
    TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400, 4000),
    calibdigiHBHEthreshold = cms.double(15),
    calibdigiHBHEtimeslices = cms.vint32(3, 4, 5, 6),
    calibdigiHFthreshold = cms.double(-999),
    calibdigiHFtimeslices = cms.vint32(0, 1, 2, 3, 4, 
        5, 6, 7, 8, 9),
    hlMaxHPDEMF = cms.double(-9999.0),
    hlMaxRBXEMF = cms.double(0.01),
    lMaxHighEHitTime = cms.double(9999.0),
    lMaxLowEHitTime = cms.double(9999.0),
    lMaxRatio = cms.double(999.0),
    lMinHPDHits = cms.int32(17),
    lMinHPDNoOtherHits = cms.int32(10),
    lMinHighEHitTime = cms.double(-9999.0),
    lMinLowEHitTime = cms.double(-9999.0),
    lMinRBXHits = cms.int32(999),
    lMinRatio = cms.double(-999.0),
    lMinZeros = cms.int32(10),
    lRBXRecHitR45Cuts = cms.vdouble(0.0, 1.0, 0.0, -0.5, 0.0, 
        0.0, 1.0, -0.5),
    minEEMF = cms.double(50.0),
    minERatio = cms.double(50.0),
    minEZeros = cms.double(10.0),
    minHighHitE = cms.double(25.0),
    minLowHitE = cms.double(10.0),
    minR45HitE = cms.double(5.0),
    minRecHitE = cms.double(1.5),
    pMaxHPDEMF = cms.double(0.02),
    pMaxHighEHitTime = cms.double(5.0),
    pMaxLowEHitTime = cms.double(6.0),
    pMaxRBXEMF = cms.double(0.02),
    pMaxRatio = cms.double(0.85),
    pMinE = cms.double(40.0),
    pMinEEMF = cms.double(10.0),
    pMinERatio = cms.double(25.0),
    pMinEZeros = cms.double(5.0),
    pMinHPDHits = cms.int32(10),
    pMinHPDNoOtherHits = cms.int32(7),
    pMinHighEHitTime = cms.double(-4.0),
    pMinLowEHitTime = cms.double(-6.0),
    pMinRBXHits = cms.int32(20),
    pMinRBXRechitR45Count = cms.int32(1),
    pMinRBXRechitR45EnergyFraction = cms.double(0.1),
    pMinRBXRechitR45Fraction = cms.double(0.1),
    pMinRatio = cms.double(0.75),
    pMinZeros = cms.int32(4),
    tMaxHighEHitTime = cms.double(6.0),
    tMaxLowEHitTime = cms.double(9999.0),
    tMaxRatio = cms.double(999.0),
    tMinHPDHits = cms.int32(16),
    tMinHPDNoOtherHits = cms.int32(9),
    tMinHighEHitTime = cms.double(-7.0),
    tMinLowEHitTime = cms.double(-9999.0),
    tMinRBXHits = cms.int32(50),
    tMinRatio = cms.double(-999.0),
    tMinZeros = cms.int32(8),
    tRBXRecHitR45Cuts = cms.vdouble(0.0, 1.0, 0.0, -0.2, 0.0, 
        0.0, 1.0, -0.2)
)

process.IOMCRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_randomEngineStateProducer_*_*')
)

process.L1ExtraInputTagSet = cms.PSet(
    L1ExtraInputTags = cms.PSet(
        TagL1ExtraCenJet = cms.InputTag("dqmL1ExtraParticles","Central"),
        TagL1ExtraEtMissHTM = cms.InputTag("dqmL1ExtraParticles","MHT"),
        TagL1ExtraEtMissMET = cms.InputTag("dqmL1ExtraParticles","MET"),
        TagL1ExtraForJet = cms.InputTag("dqmL1ExtraParticles","Forward"),
        TagL1ExtraHFRings = cms.InputTag("dqmL1ExtraParticles"),
        TagL1ExtraIsoEG = cms.InputTag("dqmL1ExtraParticles","Isolated"),
        TagL1ExtraMuon = cms.InputTag("dqmL1ExtraParticles"),
        TagL1ExtraNoIsoEG = cms.InputTag("dqmL1ExtraParticles","NonIsolated"),
        TagL1ExtraTauJet = cms.InputTag("dqmL1ExtraParticles","Tau")
    )
)

process.L1ExtraInputTagSetStage1 = cms.PSet(
    L1ExtraInputTags = cms.PSet(
        TagL1ExtraCenJet = cms.InputTag("dqmL1ExtraParticlesStage1","Central"),
        TagL1ExtraEtMissHTM = cms.InputTag("dqmL1ExtraParticlesStage1","MHT"),
        TagL1ExtraEtMissMET = cms.InputTag("dqmL1ExtraParticlesStage1","MET"),
        TagL1ExtraForJet = cms.InputTag("dqmL1ExtraParticlesStage1","Forward"),
        TagL1ExtraHFRings = cms.InputTag("dqmL1ExtraParticlesStage1"),
        TagL1ExtraIsoEG = cms.InputTag("dqmL1ExtraParticlesStage1","Isolated"),
        TagL1ExtraMuon = cms.InputTag("dqmL1ExtraParticlesStage1"),
        TagL1ExtraNoIsoEG = cms.InputTag("dqmL1ExtraParticlesStage1","NonIsolated"),
        TagL1ExtraTauJet = cms.InputTag("dqmL1ExtraParticlesStage1","Tau")
    )
)

process.L1TriggerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiSummary_lumiProducer_*_*')
)

process.L1TriggerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simCscTriggerPrimitiveDigis_*_*', 
        'keep *_simDtTriggerPrimitiveDigis_*_*', 
        'keep *_simRpcTriggerDigis_*_*', 
        'keep *_simRctDigis_*_*', 
        'keep *_simCsctfDigis_*_*', 
        'keep *_simCsctfTrackDigis_*_*', 
        'keep *_simDttfDigis_*_*', 
        'keep *_simGctDigis_*_*', 
        'keep *_simGmtDigis_*_*', 
        'keep *_simGtDigis_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*')
)

process.L1TriggerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*')
)

process.L1TriggerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*')
)

process.LSParameter = cms.untracked.PSet(
    HcalFeatureHFEMBit = cms.bool(False),
    Long_Short_Offset = cms.double(10.1),
    Long_vrs_Short_Slope = cms.double(100.2),
    Min_Long_Energy = cms.double(10),
    Min_Short_Energy = cms.double(10)
)

process.LutParametersBlock = cms.PSet(
    LutParameters = cms.PSet(
        BTIC = cms.untracked.int32(0),
        D = cms.untracked.double(0),
        Debug = cms.untracked.bool(False),
        WHEEL = cms.untracked.int32(-1),
        XCN = cms.untracked.double(0)
    )
)

process.MEtoEDMConverterAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.MEtoEDMConverterFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConverter_*_*')
)

process.MEtoEDMConverterRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.MIdIsoExtractorPSetBlock = cms.PSet(
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(0.5),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    ecalDepositName = cms.string('ecal'),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    jetDepositName = cms.string('jets'),
    trackDepositName = cms.string('tracker')
)

process.MIsoCaloExtractorByAssociatorHitsBlock = cms.PSet(
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    DR_Max = cms.double(0.5),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DR_Veto_HO = cms.double(0.1),
    DepositInstanceLabels = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    DepositLabel = cms.untracked.string('Cal'),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Noise_EB = cms.double(0.025),
    Noise_EE = cms.double(0.1),
    Noise_HB = cms.double(0.2),
    Noise_HE = cms.double(0.2),
    Noise_HO = cms.double(0.2),
    PrintTimeReport = cms.untracked.bool(False),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Threshold_E = cms.double(0.025),
    Threshold_H = cms.double(0.1),
    Threshold_HO = cms.double(0.1),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    ),
    UseRecHitsFlag = cms.bool(True)
)

process.MIsoCaloExtractorByAssociatorTowersBlock = cms.PSet(
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    DR_Max = cms.double(0.5),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DR_Veto_HO = cms.double(0.1),
    DepositInstanceLabels = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    DepositLabel = cms.untracked.string('Cal'),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Noise_EB = cms.double(0.025),
    Noise_EE = cms.double(0.1),
    Noise_HB = cms.double(0.2),
    Noise_HE = cms.double(0.2),
    Noise_HO = cms.double(0.2),
    PrintTimeReport = cms.untracked.bool(False),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Threshold_HO = cms.double(0.5),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useGEM = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    ),
    UseRecHitsFlag = cms.bool(False)
)

process.MIsoCaloExtractorEcalBlock = cms.PSet(
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    ComponentName = cms.string('CaloExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Vertex_Constraint_XY = cms.bool(False),
    Vertex_Constraint_Z = cms.bool(False),
    Weight_E = cms.double(1.0),
    Weight_H = cms.double(0.0)
)

process.MIsoCaloExtractorHLTBlock = cms.PSet(
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    ComponentName = cms.string('CaloExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Vertex_Constraint_XY = cms.bool(False),
    Vertex_Constraint_Z = cms.bool(False),
    Weight_E = cms.double(1.5),
    Weight_H = cms.double(1.0)
)

process.MIsoCaloExtractorHcalBlock = cms.PSet(
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    ComponentName = cms.string('CaloExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Vertex_Constraint_XY = cms.bool(False),
    Vertex_Constraint_Z = cms.bool(False),
    Weight_E = cms.double(0.0),
    Weight_H = cms.double(1.0)
)

process.MIsoDepositGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('TrackCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("globalMuons")
)

process.MIsoDepositGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('TrackCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("globalMuons")
)

process.MIsoDepositParamGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositParamGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositParamGlobalViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositParamGlobalViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("muons1stStep")
)

process.MIsoDepositViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("muons1stStep")
)

process.MIsoJetExtractorBlock = cms.PSet(
    ComponentName = cms.string('JetExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto = cms.double(0.1),
    ExcludeMuonVeto = cms.bool(True),
    JetCollectionLabel = cms.InputTag("ak4CaloJets"),
    PrintTimeReport = cms.untracked.bool(False),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Threshold = cms.double(5.0),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        dRHcal = cms.double(0.5),
        dRHcalPreselection = cms.double(0.5),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useGEM = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorDefault = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useGEM = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorHits = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorJets = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        dRHcal = cms.double(0.5),
        dRHcalPreselection = cms.double(0.5),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useGEM = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorTowers = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useGEM = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackExtractorBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(0.5),
    DR_Veto = cms.double(0.01),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(0.1),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    inputTrackCollection = cms.InputTag("generalTracks")
)

process.MIsoTrackExtractorCtfBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(0.5),
    DR_Veto = cms.double(0.01),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(0.1),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    inputTrackCollection = cms.InputTag("generalTracks")
)

process.MIsoTrackExtractorGsBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(0.5),
    DR_Veto = cms.double(0.01),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(0.1),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks")
)

process.MaxCCCLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxCCCLostHitsTrajectoryFilter'),
    maxCCCLostHits = cms.int32(3),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    )
)

process.MaxConsecLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxConsecLostHitsTrajectoryFilter'),
    maxConsecLostHits = cms.int32(1)
)

process.MaxHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxHitsTrajectoryFilter'),
    maxNumberOfHits = cms.int32(100)
)

process.MaxLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxLostHitsTrajectoryFilter'),
    maxLostHits = cms.int32(2)
)

process.MillePedeAlignmentAlgorithm = cms.PSet(
    MillePedeFileReader = cms.PSet(
        Xcut = cms.double(5.0),
        Ycut = cms.double(10.0),
        Zcut = cms.double(15.0),
        maxErrorCut = cms.double(10.0),
        maxMoveCut = cms.double(200.0),
        millePedeLogFile = cms.string('millepede.log'),
        millePedeResFile = cms.string('millepede.res'),
        sigCut = cms.double(2.5),
        tXcut = cms.double(30.0),
        tYcut = cms.double(30.0),
        tZcut = cms.double(30.0)
    ),
    TrajectoryFactory = cms.PSet(
        AllowZeroMaterial = cms.bool(False),
        IncludeAPEs = cms.bool(False),
        MaterialEffects = cms.string('BrokenLinesCoarse'),
        MomentumEstimateFieldOff = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseBzeroIfFieldOff = cms.bool(True),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(True),
        UseProjectedHits = cms.bool(True)
    ),
    algoName = cms.string('MillePedeAlignmentAlgorithm'),
    binaryFile = cms.string('milleBinary_0.dat'),
    doubleBinary = cms.bool(False),
    fileDir = cms.untracked.string(''),
    ignoreHitsWithoutGlobalDerivatives = cms.bool(False),
    max2Dcorrelation = cms.double(0.05),
    mergeBinaryFiles = cms.vstring(),
    mergeTreeFiles = cms.vstring(),
    minNumHits = cms.uint32(7),
    mode = cms.untracked.string('mille'),
    monitorFile = cms.untracked.string('millePedeMonitor.root'),
    pedeLabeler = cms.PSet(

    ),
    pedeReader = cms.PSet(
        fileDir = cms.untracked.string(''),
        readFile = cms.string('millepede.res')
    ),
    pedeReaderInputs = cms.VPSet(),
    pedeSteerer = cms.PSet(
        Presigmas = cms.VPSet(),
        additionalSteerFiles = cms.vstring(),
        constrPrecision = cms.uint32(0),
        constraints = cms.VPSet(),
        fileDir = cms.untracked.string(''),
        method = cms.string('sparseMINRES 6  0.8'),
        minHieraConstrCoeff = cms.double(1e-07),
        minHieraParPerConstr = cms.uint32(2),
        options = cms.vstring('entries 50', 
            'outlierdownweighting 5', 
            'dwfractioncut 0.2'),
        parameterSign = cms.untracked.int32(1),
        pedeCommand = cms.untracked.string('pede'),
        pedeDump = cms.untracked.string('pede.dump'),
        steerFile = cms.string('pedeSteer'),
        steerFileDebug = cms.untracked.bool(False)
    ),
    runAtPCL = cms.bool(True),
    surveyPixelBarrel = cms.PSet(
        doOutputOnStdout = cms.bool(False),
        doSurvey = cms.bool(False),
        doToySurvey = cms.bool(False),
        infile = cms.FileInPath('Alignment/SurveyAnalysis/data/BPix_Survey_info_raw.txt'),
        toySurveyFile = cms.untracked.string('toySurveyInfo.txt'),
        toySurveyParameters = cms.VPSet(cms.PSet(
            mean = cms.double(1800.0),
            name = cms.string('a0'),
            sigma = cms.double(150.0)
        ), 
            cms.PSet(
                mean = cms.double(2600.0),
                name = cms.string('a1'),
                sigma = cms.double(200.0)
            ), 
            cms.PSet(
                mean = cms.double(1150.0),
                name = cms.string('scale'),
                sigma = cms.double(50.0)
            ), 
            cms.PSet(
                mean = cms.double(0.0),
                name = cms.string('phi'),
                sigma = cms.double(0.0025)
            ), 
            cms.PSet(
                mean = cms.double(0.0),
                name = cms.string('u'),
                sigma = cms.double(0.175)
            ), 
            cms.PSet(
                mean = cms.double(0.0),
                name = cms.string('v'),
                sigma = cms.double(0.175)
            )),
        toySurveySeed = cms.uint32(12)
    ),
    treeFile = cms.string('treeFile.root')
)

process.MillePedeFileReader = cms.PSet(
    Xcut = cms.double(5.0),
    Ycut = cms.double(10.0),
    Zcut = cms.double(15.0),
    maxErrorCut = cms.double(10.0),
    maxMoveCut = cms.double(200.0),
    millePedeLogFile = cms.string('millepede.log'),
    millePedeResFile = cms.string('millepede.res'),
    sigCut = cms.double(2.5),
    tXcut = cms.double(30.0),
    tYcut = cms.double(30.0),
    tZcut = cms.double(30.0)
)

process.MinHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinHitsTrajectoryFilter'),
    minimumNumberOfHits = cms.int32(5)
)

process.MinPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinPtTrajectoryFilter'),
    minHitsMinPt = cms.int32(3),
    minPt = cms.double(1.0),
    nSigmaMinPt = cms.double(5.0)
)

process.MuonCaloCompatibilityBlock = cms.PSet(
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    )
)

process.MuonCosmicCompatibilityParameters = cms.PSet(
    CosmicCompFillerParameters = cms.PSet(
        InputCosmicMuonCollection = cms.InputTag("muonsFromCosmics1Leg"),
        InputMuonCollections = cms.VInputTag(cms.InputTag("globalMuons"), cms.InputTag("muons1stStep")),
        InputTrackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks")),
        InputVertexCollection = cms.InputTag("offlinePrimaryVertices"),
        ServiceParameters = cms.PSet(
            CSCLayers = cms.untracked.bool(True),
            GEMLayers = cms.untracked.bool(False),
            ME0Layers = cms.bool(False),
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        angleCut = cms.double(0.1),
        corrTimeNeg = cms.double(-10),
        corrTimePos = cms.double(5),
        deltaPt = cms.double(0.1),
        hIpTrdxy = cms.double(0.02),
        hIpTrvProb = cms.double(0.5),
        ipCut = cms.double(0.02),
        largedxy = cms.double(2.0),
        largedxyMult = cms.double(3.0),
        maxdxyLoose = cms.double(0.01),
        maxdxyLooseMult = cms.double(0.01),
        maxdxyTight = cms.double(1.0),
        maxdxyTightMult = cms.double(1.0),
        maxdzLoose = cms.double(0.1),
        maxdzLooseMult = cms.double(0.1),
        maxdzTight = cms.double(10.0),
        maxdzTightMult = cms.double(10.0),
        maxvertRho = cms.double(5),
        maxvertZ = cms.double(20),
        minvProb = cms.double(0.001),
        nChamberMatches = cms.int32(1),
        nTrackThreshold = cms.int32(3),
        offTimeNegLoose = cms.double(-15.0),
        offTimeNegLooseMult = cms.double(-15.0),
        offTimeNegTight = cms.double(-20.0),
        offTimeNegTightMult = cms.double(-20.0),
        offTimePosLoose = cms.double(15.0),
        offTimePosLooseMult = cms.double(15.0),
        offTimePosTight = cms.double(25.0),
        offTimePosTightMult = cms.double(25.0),
        segmentComp = cms.double(0.4),
        sharedFrac = cms.double(0.75),
        sharedHits = cms.int32(5)
    )
)

process.MuonSegmentMatcher = cms.PSet(
    MatchParameters = cms.PSet(
        CSCsegments = cms.InputTag("cscSegments"),
        DTradius = cms.double(0.01),
        DTsegments = cms.InputTag("dt4DSegments"),
        RPChits = cms.InputTag("rpcRecHits"),
        TightMatchCSC = cms.bool(True),
        TightMatchDT = cms.bool(False)
    )
)

process.MuonServiceProxy = cms.PSet(
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    )
)

process.MuonShowerParameters = cms.PSet(
    MuonShowerInformationFillerParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        CSCSegmentLabel = cms.InputTag("cscSegments"),
        DT4DRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        ServiceParameters = cms.PSet(
            CSCLayers = cms.untracked.bool(True),
            GEMLayers = cms.untracked.bool(False),
            ME0Layers = cms.bool(False),
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    )
)

process.MuonTrackLoaderForCosmic = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonTrackLoaderForGLB = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonTrackLoaderForL2 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("hltOfflineBeamSpot")
    )
)

process.MuonTrackLoaderForL3 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonSeededTracksInstance = cms.untracked.string('L2Seeded'),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        PutTkTrackIntoEvent = cms.untracked.bool(True),
        SmoothTkTrack = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoaderL3'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("hltOfflineBeamSpot")
    )
)

process.MuonTrackLoaderForSTA = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonTrackingRegionCommon = cms.PSet(
    MuonTrackingRegionBuilder = cms.PSet(
        DeltaEta = cms.double(0.2),
        DeltaPhi = cms.double(0.2),
        DeltaR = cms.double(0.2),
        DeltaZ = cms.double(15.9),
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        Eta_fixed = cms.bool(False),
        Eta_min = cms.double(0.1),
        MeasurementTrackerName = cms.InputTag(""),
        OnDemand = cms.int32(-1),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        Phi_fixed = cms.bool(False),
        Phi_min = cms.double(0.1),
        Pt_fixed = cms.bool(False),
        Pt_min = cms.double(1.5),
        Rescale_Dz = cms.double(3.0),
        Rescale_eta = cms.double(3.0),
        Rescale_phi = cms.double(3.0),
        UseVertex = cms.bool(False),
        Z_fixed = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        input = cms.InputTag(""),
        maxRegions = cms.int32(1),
        precise = cms.bool(True),
        vertexCollection = cms.InputTag("")
    )
)

process.MuonUpdatorAtVertex = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorOpposite')
    )
)

process.MuonUpdatorAtVertexAnyDirection = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorAny')
    )
)

process.OutALCARECODtCalib = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalib')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muidAllArbitrated_*_*', 
        'keep booledmValueMap_muidGMStaChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkKinkTight_*_*', 
        'keep booledmValueMap_muidGlobalMuonPromptTight_*_*', 
        'keep booledmValueMap_muidRPCMuLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityTight_*_*', 
        'keep booledmValueMap_muidTMLastStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationAngTight_*_*', 
        'keep booledmValueMap_muidTMLastStationLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtTight_*_*', 
        'keep booledmValueMap_muidTMLastStationTight_*_*', 
        'keep booledmValueMap_muidTMOneStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationAngTight_*_*', 
        'keep booledmValueMap_muidTMOneStationLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationTight_*_*', 
        'keep booledmValueMap_muidTrackerMuonArbitrated_*_*')
)

process.OutALCARECODtCalibCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalibCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muidAllArbitrated_*_*', 
        'keep booledmValueMap_muidGMStaChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkKinkTight_*_*', 
        'keep booledmValueMap_muidGlobalMuonPromptTight_*_*', 
        'keep booledmValueMap_muidRPCMuLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityTight_*_*', 
        'keep booledmValueMap_muidTMLastStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationAngTight_*_*', 
        'keep booledmValueMap_muidTMLastStationLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtTight_*_*', 
        'keep booledmValueMap_muidTMLastStationTight_*_*', 
        'keep booledmValueMap_muidTMOneStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationAngTight_*_*', 
        'keep booledmValueMap_muidTMOneStationLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationTight_*_*', 
        'keep booledmValueMap_muidTrackerMuonArbitrated_*_*')
)

process.OutALCARECODtCalibCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalibCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muidAllArbitrated_*_*', 
        'keep booledmValueMap_muidGMStaChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkKinkTight_*_*', 
        'keep booledmValueMap_muidGlobalMuonPromptTight_*_*', 
        'keep booledmValueMap_muidRPCMuLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityTight_*_*', 
        'keep booledmValueMap_muidTMLastStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationAngTight_*_*', 
        'keep booledmValueMap_muidTMLastStationLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtTight_*_*', 
        'keep booledmValueMap_muidTMLastStationTight_*_*', 
        'keep booledmValueMap_muidTMOneStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationAngTight_*_*', 
        'keep booledmValueMap_muidTMOneStationLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationTight_*_*', 
        'keep booledmValueMap_muidTrackerMuonArbitrated_*_*')
)

process.OutALCARECODtCalibHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalibHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muidAllArbitrated_*_*', 
        'keep booledmValueMap_muidGMStaChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkKinkTight_*_*', 
        'keep booledmValueMap_muidGlobalMuonPromptTight_*_*', 
        'keep booledmValueMap_muidRPCMuLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityTight_*_*', 
        'keep booledmValueMap_muidTMLastStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationAngTight_*_*', 
        'keep booledmValueMap_muidTMLastStationLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtTight_*_*', 
        'keep booledmValueMap_muidTMLastStationTight_*_*', 
        'keep booledmValueMap_muidTMOneStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationAngTight_*_*', 
        'keep booledmValueMap_muidTMOneStationLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationTight_*_*', 
        'keep booledmValueMap_muidTrackerMuonArbitrated_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECODtCalibHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalibHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muidAllArbitrated_*_*', 
        'keep booledmValueMap_muidGMStaChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkKinkTight_*_*', 
        'keep booledmValueMap_muidGlobalMuonPromptTight_*_*', 
        'keep booledmValueMap_muidRPCMuLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityTight_*_*', 
        'keep booledmValueMap_muidTMLastStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationAngTight_*_*', 
        'keep booledmValueMap_muidTMLastStationLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtTight_*_*', 
        'keep booledmValueMap_muidTMLastStationTight_*_*', 
        'keep booledmValueMap_muidTMOneStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationAngTight_*_*', 
        'keep booledmValueMap_muidTMOneStationLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationTight_*_*', 
        'keep booledmValueMap_muidTrackerMuonArbitrated_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECODtCalib_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalib')
    ),
    outputCommands = cms.untracked.vstring('keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muidAllArbitrated_*_*', 
        'keep booledmValueMap_muidGMStaChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkChiCompatibility_*_*', 
        'keep booledmValueMap_muidGMTkKinkTight_*_*', 
        'keep booledmValueMap_muidGlobalMuonPromptTight_*_*', 
        'keep booledmValueMap_muidRPCMuLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityLoose_*_*', 
        'keep booledmValueMap_muidTM2DCompatibilityTight_*_*', 
        'keep booledmValueMap_muidTMLastStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationAngTight_*_*', 
        'keep booledmValueMap_muidTMLastStationLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtLoose_*_*', 
        'keep booledmValueMap_muidTMLastStationOptimizedLowPtTight_*_*', 
        'keep booledmValueMap_muidTMLastStationTight_*_*', 
        'keep booledmValueMap_muidTMOneStationAngLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationAngTight_*_*', 
        'keep booledmValueMap_muidTMOneStationLoose_*_*', 
        'keep booledmValueMap_muidTMOneStationTight_*_*', 
        'keep booledmValueMap_muidTrackerMuonArbitrated_*_*')
)

process.OutALCARECOEcalCalElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalWElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'drop reco*Clusters_hfEMClusters_*_*', 
        'drop reco*Clusters_pfPhotonTranslator_*_*', 
        'drop *EcalRecHit*_ecalRecHit_*_*', 
        'drop *EcalrecHit*_*ecalPreshowerRecHit*_*EcalRecHitsES*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsE*_*_*', 
        'drop *_*Unclean*_*_*', 
        'drop *_*unclean*_*_*', 
        'drop *_*_*Unclean*_*', 
        'drop *_*_*unclean*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*EBEEClusters*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*ESClusters*_*', 
        'keep *CaloCluster*_alCaIsolatedElectrons_*alcaCaloCluster*_*')
)

process.OutALCARECOEcalCalElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalWElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*')
)

process.OutALCARECOEcalCalEtaCalib = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalEtaCalib')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ecalEtaCorrected_etaEcalRecHitsEB_*', 
        'keep *_ecalEtaCorrected_etaEcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_etaEcalRecHitsES_*')
)

process.OutALCARECOEcalCalEtaCalib_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalEtaCalib')
    ),
    outputCommands = cms.untracked.vstring('keep *_ecalEtaCorrected_etaEcalRecHitsEB_*', 
        'keep *_ecalEtaCorrected_etaEcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_etaEcalRecHitsES_*')
)

process.OutALCARECOEcalCalPi0Calib = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalPi0Calib')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ecalPi0Corrected_pi0EcalRecHitsEB_*', 
        'keep *_ecalPi0Corrected_pi0EcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_pi0EcalRecHitsES_*')
)

process.OutALCARECOEcalCalPi0Calib_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalPi0Calib')
    ),
    outputCommands = cms.untracked.vstring('keep *_ecalPi0Corrected_pi0EcalRecHitsEB_*', 
        'keep *_ecalPi0Corrected_pi0EcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_pi0EcalRecHitsES_*')
)

process.OutALCARECOEcalCalWElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalWElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'drop reco*Clusters_hfEMClusters_*_*', 
        'drop reco*Clusters_pfPhotonTranslator_*_*', 
        'drop *EcalRecHit*_ecalRecHit_*_*', 
        'drop *EcalrecHit*_*ecalPreshowerRecHit*_*EcalRecHitsES*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsE*_*_*', 
        'drop *_*Unclean*_*_*', 
        'drop *_*unclean*_*_*', 
        'drop *_*_*Unclean*_*', 
        'drop *_*_*unclean*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*EBEEClusters*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*ESClusters*_*', 
        'keep *CaloCluster*_alCaIsolatedElectrons_*alcaCaloCluster*_*')
)

process.OutALCARECOEcalCalWElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalWElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*')
)

process.OutALCARECOEcalCalZElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'drop reco*Clusters_hfEMClusters_*_*', 
        'drop reco*Clusters_pfPhotonTranslator_*_*', 
        'drop *EcalRecHit*_ecalRecHit_*_*', 
        'drop *EcalrecHit*_*ecalPreshowerRecHit*_*EcalRecHitsES*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsE*_*_*', 
        'drop *_*Unclean*_*_*', 
        'drop *_*unclean*_*_*', 
        'drop *_*_*Unclean*_*', 
        'drop *_*_*unclean*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*EBEEClusters*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*ESClusters*_*', 
        'keep *CaloCluster*_alCaIsolatedElectrons_*alcaCaloCluster*_*')
)

process.OutALCARECOEcalCalZElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*')
)

process.OutALCARECOEcalESAlign = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalESAlign')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep ESDCCHeaderBlocksSorted_ecalPreshowerDigis_*_*', 
        'keep ESDigiCollection_ecalPreshowerDigis_*_*', 
        'keep ESKCHIPBlocksSorted_ecalPreshowerDigis_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_ecalAlCaESAlignTrackReducer_*_*', 
        'keep SiStripClusteredmNewDetSetVector_ecalAlCaESAlignTrackReducer_*_*', 
        'keep TrackingRecHitsOwned_ecalAlCaESAlignTrackReducer_*_*', 
        'keep recoTrackExtras_ecalAlCaESAlignTrackReducer_*_*', 
        'keep recoTracks_ecalAlCaESAlignTrackReducer_*_*', 
        'keep recoBeamSpot_offlineBeamSpot_*_*')
)

process.OutALCARECOEcalESAlign_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalESAlign')
    ),
    outputCommands = cms.untracked.vstring('keep ESDCCHeaderBlocksSorted_ecalPreshowerDigis_*_*', 
        'keep ESDigiCollection_ecalPreshowerDigis_*_*', 
        'keep ESKCHIPBlocksSorted_ecalPreshowerDigis_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_ecalAlCaESAlignTrackReducer_*_*', 
        'keep SiStripClusteredmNewDetSetVector_ecalAlCaESAlignTrackReducer_*_*', 
        'keep TrackingRecHitsOwned_ecalAlCaESAlignTrackReducer_*_*', 
        'keep recoTrackExtras_ecalAlCaESAlignTrackReducer_*_*', 
        'keep recoTracks_ecalAlCaESAlignTrackReducer_*_*', 
        'keep recoBeamSpot_offlineBeamSpot_*_*')
)

process.OutALCARECOEcalRecalElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalRecalZElectron', 
            'pathALCARECOEcalRecalZSCElectron', 
            'pathALCARECOEcalRecalWElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_electronRecalibSCAssociator_*_*', 
        'drop *_gedGsfElectron*_*_*', 
        'drop *_*Unclean*_*_*', 
        'drop *_*unclean*_*_*', 
        'drop *_*_*Unclean*_*', 
        'drop *_*_*unclean*_*')
)

process.OutALCARECOEcalRecalElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalWElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_electronRecalibSCAssociator_*_*')
)

process.OutALCARECOEcalTrg = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalTrg')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep CaloTowersSorted_towerMaker_*_*', 
        'keep EBDigiCollection_ecalDigis_ebDigis_*', 
        'keep EEDigiCollection_ecalDigis_eeDigis_*', 
        'keep ESDCCHeaderBlocksSorted_ecalPreshowerDigis_*_*', 
        'keep ESDigiCollection_ecalPreshowerDigis_*_*', 
        'keep ESKCHIPBlocksSorted_ecalPreshowerDigis_*_*', 
        'keep EcalRecHitsSorted_ecalPreshowerRecHit_EcalRecHitsES_*', 
        'keep EcalRecHitsSorted_ecalRecHit_EcalRecHitsEB_*', 
        'keep EcalRecHitsSorted_ecalRecHit_EcalRecHitsEE_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep EcalTriggerPrimitiveDigisSorted_ecalDigis_EcalTriggerPrimitives_*', 
        'keep EcalUncalibratedRecHitsSorted_ecalMultiFitUncalibRecHit_EcalUncalibRecHitsEB_*', 
        'keep EcalUncalibratedRecHitsSorted_ecalMultiFitUncalibRecHit_EcalUncalibRecHitsEE_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep L1MuGMTCands_gtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1MuRegionalCands_gtDigis_CSC_*', 
        'keep L1MuRegionalCands_gtDigis_DT_*', 
        'keep L1MuRegionalCands_gtDigis_RPCb_*', 
        'keep L1MuRegionalCands_gtDigis_RPCf_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrajectorysToOnerecoGsfTracksAssociation_electronGsfTracks_*_*', 
        'keep edmTriggerResults_TriggerResults_*_*', 
        'keep floatedmValueMap_offlinePrimaryVerticesWithBS_*_*', 
        'keep floats_generalTracks_MVAValues_*', 
        'keep intedmValueMap_offlinePrimaryVerticesWithBS_*_*', 
        'keep recoBeamSpot_offlineBeamSpot_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_hybridBarrelBasicClusters_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_hybridBarrelBasicClusters_*', 
        'keep recoCaloClusters_hybridSuperClusters_uncleanOnlyHybridBarrelBasicClusters_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_multi5x5BarrelBasicClusters_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_multi5x5EndcapBasicClusters_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_multi5x5BarrelBasicClusters_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_multi5x5EndcapBasicClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_uncleanOnlyMulti5x5EndcapBasicClusters_*', 
        'keep recoCaloClusters_particleFlowEGamma_EBEEClusters_*', 
        'keep recoCaloClusters_particleFlowEGamma_ESClusters_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_particleFlowBasicClusterECALBarrel_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_particleFlowBasicClusterECALEndcap_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_particleFlowBasicClusterECALPreshower_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_hybridBarrelBasicClusters_*', 
        'keep recoElectronSeeds_electronMergedSeeds_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_multi5x5BarrelSuperClusters_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_multi5x5EndcapSuperClusters_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_multi5x5BarrelSuperClusters_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_multi5x5EndcapSuperClusters_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_multi5x5EndcapSuperClusters_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_uncleanOnlyMulti5x5EndcapSuperClusters_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_particleFlowSuperClusterECALBarrel_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_particleFlowSuperClusterECALEndcapWithPreshower_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep recoVertexsedmAssociation_offlinePrimaryVerticesWithBS_*_*', 
        'keep uchars_generalTracks_QualityMasks_*')
)

process.OutALCARECOEcalTrg_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalTrg')
    ),
    outputCommands = cms.untracked.vstring('keep CaloTowersSorted_towerMaker_*_*', 
        'keep EBDigiCollection_ecalDigis_ebDigis_*', 
        'keep EEDigiCollection_ecalDigis_eeDigis_*', 
        'keep ESDCCHeaderBlocksSorted_ecalPreshowerDigis_*_*', 
        'keep ESDigiCollection_ecalPreshowerDigis_*_*', 
        'keep ESKCHIPBlocksSorted_ecalPreshowerDigis_*_*', 
        'keep EcalRecHitsSorted_ecalPreshowerRecHit_EcalRecHitsES_*', 
        'keep EcalRecHitsSorted_ecalRecHit_EcalRecHitsEB_*', 
        'keep EcalRecHitsSorted_ecalRecHit_EcalRecHitsEE_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep EcalTriggerPrimitiveDigisSorted_ecalDigis_EcalTriggerPrimitives_*', 
        'keep EcalUncalibratedRecHitsSorted_ecalMultiFitUncalibRecHit_EcalUncalibRecHitsEB_*', 
        'keep EcalUncalibratedRecHitsSorted_ecalMultiFitUncalibRecHit_EcalUncalibRecHitsEE_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep L1MuGMTCands_gtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1MuRegionalCands_gtDigis_CSC_*', 
        'keep L1MuRegionalCands_gtDigis_DT_*', 
        'keep L1MuRegionalCands_gtDigis_RPCb_*', 
        'keep L1MuRegionalCands_gtDigis_RPCf_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep TrajectorysToOnerecoGsfTracksAssociation_electronGsfTracks_*_*', 
        'keep edmTriggerResults_TriggerResults_*_*', 
        'keep floatedmValueMap_offlinePrimaryVerticesWithBS_*_*', 
        'keep floats_generalTracks_MVAValues_*', 
        'keep intedmValueMap_offlinePrimaryVerticesWithBS_*_*', 
        'keep recoBeamSpot_offlineBeamSpot_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_hybridBarrelBasicClusters_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_hybridBarrelBasicClusters_*', 
        'keep recoCaloClusters_hybridSuperClusters_uncleanOnlyHybridBarrelBasicClusters_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_multi5x5BarrelBasicClusters_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_multi5x5EndcapBasicClusters_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_multi5x5BarrelBasicClusters_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_multi5x5EndcapBasicClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_uncleanOnlyMulti5x5EndcapBasicClusters_*', 
        'keep recoCaloClusters_particleFlowEGamma_EBEEClusters_*', 
        'keep recoCaloClusters_particleFlowEGamma_ESClusters_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_particleFlowBasicClusterECALBarrel_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_particleFlowBasicClusterECALEndcap_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_particleFlowBasicClusterECALPreshower_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_hybridBarrelBasicClusters_*', 
        'keep recoElectronSeeds_electronMergedSeeds_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_multi5x5BarrelSuperClusters_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_multi5x5EndcapSuperClusters_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_multi5x5BarrelSuperClusters_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_multi5x5EndcapSuperClusters_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_multi5x5EndcapSuperClusters_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_uncleanOnlyMulti5x5EndcapSuperClusters_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_particleFlowSuperClusterECALBarrel_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_particleFlowSuperClusterECALEndcapWithPreshower_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep recoVertexsedmAssociation_offlinePrimaryVerticesWithBS_*_*', 
        'keep uchars_generalTracks_QualityMasks_*')
)

process.OutALCARECOEcalUncalElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalZElectron', 
            'pathALCARECOEcalUncalZSCElectron', 
            'pathALCARECOEcalUncalWElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*', 
        'drop recoCaloClusters_*_*_*', 
        'drop recoSuperClusters_*_*_*', 
        'drop recoPreshowerCluster*_*_*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsES*_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalWElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalWElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalWElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*', 
        'drop recoCaloClusters_*_*_*', 
        'drop recoSuperClusters_*_*_*', 
        'drop recoPreshowerCluster*_*_*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsES*_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalWElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalWElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalZElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalZElectron', 
            'pathALCARECOEcalUncalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*', 
        'drop recoCaloClusters_*_*_*', 
        'drop recoSuperClusters_*_*_*', 
        'drop recoPreshowerCluster*_*_*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsES*_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalZElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalZElectron', 
            'pathALCARECOEcalUncalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices_*_*', 
        'keep recoVertexs_offlinePrimaryVerticesWithBS_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_electronGsfTracks_*_*', 
        'keep *GsfTrack*_uncleanedOnlyElectronGsfTracks_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectrons_*_*', 
        'keep recoGsfElectron*_gedGsfElectronsTmp_*_*', 
        'keep recoGsfElectron*_gedGsfElectronCores_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_hfEMClusters_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_alCaIsolatedElectrons_*_*', 
        'keep recoCaloClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoCaloClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersCleaned_*_*', 
        'keep recoCaloClusters_multi5x5BasicClustersUncleaned_*_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoPreshowerCluster*_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerCluster*_multi5x5PreshowerClusterShape_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOHcalCalDijets = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalDijets')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_DiJetsProd_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_particleFlow_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterECALUncorrected_*_*', 
        'keep recoPFClusters_particleFlowClusterHBHE_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep recoTracks_generalTracks_*_*')
)

process.OutALCARECOHcalCalDijets_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalDijets')
    ),
    outputCommands = cms.untracked.vstring('keep *_DiJetsProd_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_particleFlow_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterECALUncorrected_*_*', 
        'keep recoPFClusters_particleFlowClusterHBHE_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep recoTracks_generalTracks_*_*')
)

process.OutALCARECOHcalCalGammaJet = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalGammaJet')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotonCores_reducedEgamma_reducedGedPhotonCores_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters__*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_reducedEgamma_reducedSuperClusters_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep *_particleFlow_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterECALUncorrected_*_*', 
        'keep recoPFClusters_particleFlowClusterHBHE_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep *_GammaJetProd_*_*')
)

process.OutALCARECOHcalCalGammaJet_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalGammaJet')
    ),
    outputCommands = cms.untracked.vstring('keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotonCores_reducedEgamma_reducedGedPhotonCores_*', 
        'keep recoSuperClusters_SCselector_*_*', 
        'keep recoSuperClusters_cleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_hfEMClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_mergedSuperClusters__*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_uncleanedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_uncleanedOnlyMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersCleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersUncleaned_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoSuperClusters_reducedEgamma_reducedSuperClusters_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep *_particleFlow_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterECALUncorrected_*_*', 
        'keep recoPFClusters_particleFlowClusterHBHE_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep *_GammaJetProd_*_*')
)

process.OutALCARECOHcalCalHBHEMuonFilter = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHBHEMuonFilter')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_hbhereco_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_muons_*_*')
)

process.OutALCARECOHcalCalHBHEMuonFilter_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHBHEMuonFilter')
    ),
    outputCommands = cms.untracked.vstring('keep *_hbhereco_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_muons_*_*')
)

process.OutALCARECOHcalCalHO = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHO')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_hoCalibProducer_*_*')
)

process.OutALCARECOHcalCalHOCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHOCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep HOCalibVariabless_hoCalibCosmicsProducer_*_*')
)

process.OutALCARECOHcalCalHOCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHOCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep HOCalibVariabless_hoCalibCosmicsProducer_*_*')
)

process.OutALCARECOHcalCalHO_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHO')
    ),
    outputCommands = cms.untracked.vstring('keep *_hoCalibProducer_*_*')
)

process.OutALCARECOHcalCalIsoTrk = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrk')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_IsoProd_*_*', 
        'keep *_TkAlIsoProd_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_generalTracks_*_*', 
        'keep *_generalTracksExtra_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_TkAlIsoProdFilter_*_*')
)

process.OutALCARECOHcalCalIsoTrkFilter = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrkFilter')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_hbhereco_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_generalTracks_*_*', 
        'keep *_generalTracksExtra_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_TkAlIsoProdFilter_*_*')
)

process.OutALCARECOHcalCalIsoTrkFilter_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrkFilter')
    ),
    outputCommands = cms.untracked.vstring('keep *_hbhereco_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_generalTracks_*_*', 
        'keep *_generalTracksExtra_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_TkAlIsoProdFilter_*_*')
)

process.OutALCARECOHcalCalIsoTrkNoHLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrkNoHLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_IsoProd_*_*', 
        'keep *_TkAlIsoProd_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.OutALCARECOHcalCalIsoTrkNoHLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrkNoHLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_IsoProd_*_*', 
        'keep *_TkAlIsoProd_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.OutALCARECOHcalCalIsoTrk_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrk')
    ),
    outputCommands = cms.untracked.vstring('keep *_IsoProd_*_*', 
        'keep *_TkAlIsoProd_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_generalTracks_*_*', 
        'keep *_generalTracksExtra_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_TkAlIsoProdFilter_*_*')
)

process.OutALCARECOHcalCalIsolatedBunchFilter = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsolatedBunchFilter')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_hbhereco_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*')
)

process.OutALCARECOHcalCalIsolatedBunchFilter_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsolatedBunchFilter')
    ),
    outputCommands = cms.untracked.vstring('keep *_hbhereco_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*')
)

process.OutALCARECOHcalCalIsolatedBunchSelector = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsolatedBunchSelector')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_hbhereco_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*')
)

process.OutALCARECOHcalCalIsolatedBunchSelector_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsolatedBunchSelector')
    ),
    outputCommands = cms.untracked.vstring('keep *_hbhereco_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*')
)

process.OutALCARECOHcalCalIterativePhiSym = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIterativePhiSym')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_horeco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep edmTriggerResults_*_*_HLT')
)

process.OutALCARECOHcalCalIterativePhiSym_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIterativePhiSym')
    ),
    outputCommands = cms.untracked.vstring('keep *_horeco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep edmTriggerResults_*_*_HLT')
)

process.OutALCARECOHcalCalMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*')
)

process.OutALCARECOHcalCalMinBiasHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbhereco_*_*', 
        'keep HORecHitsSorted_horeco_*_*', 
        'keep HFRecHitsSorted_hfreco_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*')
)

process.OutALCARECOHcalCalMinBiasHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbhereco_*_*', 
        'keep HORecHitsSorted_horeco_*_*', 
        'keep HFRecHitsSorted_hfreco_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*')
)

process.OutALCARECOHcalCalMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*')
)

process.OutALCARECOHcalCalNoise = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalNoise')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_HcalNoiseProd_*_*', 
        'keep edmTriggerResults_*_*_HLT')
)

process.OutALCARECOHcalCalNoise_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalNoise')
    ),
    outputCommands = cms.untracked.vstring('keep *_HcalNoiseProd_*_*', 
        'keep edmTriggerResults_*_*_HLT')
)

process.OutALCARECOHcalCalPedestal = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalPedestal')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_gtDigisAlCaPedestal_*_*', 
        'keep HBHERecHitsSorted_hbherecoPedestal_*_*', 
        'keep HORecHitsSorted_horecoPedestal_*_*', 
        'keep HFRecHitsSorted_hfrecoPedestal_*_*')
)

process.OutALCARECOHcalCalPedestal_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalPedestal')
    ),
    outputCommands = cms.untracked.vstring('keep *_gtDigisAlCaPedestal_*_*', 
        'keep HBHERecHitsSorted_hbherecoPedestal_*_*', 
        'keep HORecHitsSorted_horecoPedestal_*_*', 
        'keep HFRecHitsSorted_hfrecoPedestal_*_*')
)

process.OutALCARECOHotline = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathHotlineSkimSingleMuon', 
            'pathHotlineSkimDoubleMuon', 
            'pathHotlineSkimTripleMuon', 
            'pathHotlineSkimSingleElectron', 
            'pathHotlineSkimDoubleElectron', 
            'pathHotlineSkimTripleElectron', 
            'pathHotlineSkimSinglePhoton', 
            'pathHotlineSkimDoublePhoton', 
            'pathHotlineSkimTriplePhoton', 
            'pathHotlineSkimSingleJet', 
            'pathHotlineSkimDoubleJet', 
            'pathHotlineSkimMultiJet', 
            'pathHotlineSkimHT', 
            'pathHotlineSkimMassiveDimuon', 
            'pathHotlineSkimMassiveDielectron', 
            'pathHotlineSkimMassiveEMu', 
            'pathHotlineSkimPFMET', 
            'pathHotlineSkimCaloMET', 
            'pathHotlineSkimCondMET')
    ),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolation_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseChargedIsolation_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3HitsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseMuonRejection3_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3HitsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3Hits_*_*', 
        'keep *_hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits_*_*', 
        'keep *_hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3HitsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByTightMuonRejection3_*_*', 
        'keep *_hpsPFTauDiscriminationByPhotonPtSumOutsideSignalCone_*_*', 
        'keep *_hpsPFTauNeutralIsoPtSum_*_*', 
        'keep *_hpsPFTauPUcorrPtSum_*_*', 
        'keep *_hpsPFTauChargedIsoPtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauFootprintCorrection_*_*', 
        'keep *_hpsPFTauNeutralIsoPtSumWeight_*_*', 
        'keep *_hpsPFTauPhotonPtSumOutsideSignalCone_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6rawElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6VLooseElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6LooseElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6MediumElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6TightElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6VTightElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLTraw_*_*', 
        'keep *_hpsPFTauDiscriminationByVLooseIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByTightIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVTightIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVVTightIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLTraw_*_*', 
        'keep *_hpsPFTauDiscriminationByVLooseIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByTightIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVTightIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVVTightIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLTraw_*_*', 
        'keep *_hpsPFTauDiscriminationByVLooseIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByTightIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVTightIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVVTightIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLTraw_*_*', 
        'keep *_hpsPFTauDiscriminationByVLooseIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByTightIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVTightIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVVTightIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauChargedIsoPtSumdR03_*_*', 
        'keep *_hpsPFTauNeutralIsoPtSumdR03_*_*', 
        'keep *_hpsPFTauNeutralIsoPtSumWeightdR03_*_*', 
        'keep *_hpsPFTauFootprintCorrectiondR03_*_*', 
        'keep *_hpsPFTauPhotonPtSumOutsideSignalConedR03_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLTraw_*_*', 
        'keep *_hpsPFTauDiscriminationByVLooseIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByTightIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVTightIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVVTightIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLTraw_*_*', 
        'keep *_hpsPFTauDiscriminationByVLooseIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByTightIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVTightIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVVTightIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep recoRecoEcalCandidates_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*' ) )
)

process.OutALCARECOHotline_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathHotlineSkimSingleMuon', 
            'pathHotlineSkimDoubleMuon', 
            'pathHotlineSkimTripleMuon', 
            'pathHotlineSkimSingleElectron', 
            'pathHotlineSkimDoubleElectron', 
            'pathHotlineSkimTripleElectron', 
            'pathHotlineSkimSinglePhoton', 
            'pathHotlineSkimDoublePhoton', 
            'pathHotlineSkimTriplePhoton', 
            'pathHotlineSkimSingleJet', 
            'pathHotlineSkimDoubleJet', 
            'pathHotlineSkimMultiJet', 
            'pathHotlineSkimHT', 
            'pathHotlineSkimMassiveDimuon', 
            'pathHotlineSkimMassiveDielectron', 
            'pathHotlineSkimMassiveEMu', 
            'pathHotlineSkimPFMET', 
            'pathHotlineSkimCaloMET', 
            'pathHotlineSkimCondMET')
    ),
    outputCommands = cms.untracked.vstring( ('keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep ClusterSummary_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep *_generalTracks_MVAValues_*', 
        'keep *_generalTracks_MVAVals_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_muons_*_*', 
        'keep *_particleFlow_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfGhostTrackVertexTagInfos_*_*', 
        'keep *_pfGhostTrackBJetTags_*_*', 
        'keep *_pfCombinedMVAV2BJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*', 
        'keep *_pfCombinedCvsLJetTags_*_*', 
        'keep *_pfCombinedCvsBJetTags_*_*', 
        'keep *_pfChargeBJetTags_*_*', 
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*', 
        'keep recoPFTaus_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolation_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseChargedIsolation_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3HitsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseMuonRejection3_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3HitsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3Hits_*_*', 
        'keep *_hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits_*_*', 
        'keep *_hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3HitsdR03_*_*', 
        'keep *_hpsPFTauDiscriminationByTightMuonRejection3_*_*', 
        'keep *_hpsPFTauDiscriminationByPhotonPtSumOutsideSignalCone_*_*', 
        'keep *_hpsPFTauNeutralIsoPtSum_*_*', 
        'keep *_hpsPFTauPUcorrPtSum_*_*', 
        'keep *_hpsPFTauChargedIsoPtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep *_hpsPFTauFootprintCorrection_*_*', 
        'keep *_hpsPFTauNeutralIsoPtSumWeight_*_*', 
        'keep *_hpsPFTauPhotonPtSumOutsideSignalCone_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6rawElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6VLooseElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6LooseElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6MediumElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6TightElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByMVA6VTightElectronRejection_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBoldDMwLTraw_*_*', 
        'keep *_hpsPFTauDiscriminationByVLooseIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByTightIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVTightIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVVTightIsolationMVArun2v1DBoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBnewDMwLTraw_*_*', 
        'keep *_hpsPFTauDiscriminationByVLooseIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByTightIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVTightIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVVTightIsolationMVArun2v1DBnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWoldDMwLTraw_*_*', 
        'keep *_hpsPFTauDiscriminationByVLooseIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByTightIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVTightIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVVTightIsolationMVArun2v1PWoldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWnewDMwLTraw_*_*', 
        'keep *_hpsPFTauDiscriminationByVLooseIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByTightIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVTightIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVVTightIsolationMVArun2v1PWnewDMwLT_*_*', 
        'keep *_hpsPFTauChargedIsoPtSumdR03_*_*', 
        'keep *_hpsPFTauNeutralIsoPtSumdR03_*_*', 
        'keep *_hpsPFTauNeutralIsoPtSumWeightdR03_*_*', 
        'keep *_hpsPFTauFootprintCorrectiondR03_*_*', 
        'keep *_hpsPFTauPhotonPtSumOutsideSignalConedR03_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1DBdR03oldDMwLTraw_*_*', 
        'keep *_hpsPFTauDiscriminationByVLooseIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByTightIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVTightIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVVTightIsolationMVArun2v1DBdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByIsolationMVArun2v1PWdR03oldDMwLTraw_*_*', 
        'keep *_hpsPFTauDiscriminationByVLooseIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByLooseIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByMediumIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByTightIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVTightIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep *_hpsPFTauDiscriminationByVVTightIsolationMVArun2v1PWdR03oldDMwLT_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep recoRecoEcalCandidates_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHF_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_particleFlow_muons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'keep *_gtStage2Digis_*_*', 
        'keep *_gmtStage2Digis_*_*', 
        'keep *_caloStage2Digis_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByDecayModeFinding_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscriminationByIsolation_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*', 
        'keep TotemFEDInfos_totemRPRawToDigi_*_*', 
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*', 
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*', 
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*', 
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*', 
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*', 
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*', 
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*', 
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*' ) )
)

process.OutALCARECOLumiPixels = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOLumiPixels')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_siPixelClustersForLumi_*_*', 
        'keep *_TriggerResults_*_HLT')
)

process.OutALCARECOLumiPixelsMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOLumiPixelsMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_siPixelClusters_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOLumiPixelsMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOLumiPixelsMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_siPixelClusters_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOLumiPixels_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOLumiPixels')
    ),
    outputCommands = cms.untracked.vstring('keep *_siPixelClustersForLumi_*_*', 
        'keep *_TriggerResults_*_HLT')
)

process.OutALCARECOMuAlBeamHalo = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlBeamHalo_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlBeamHaloOverlaps = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHaloOverlaps')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlBeamHaloOverlaps_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlBeamHaloOverlaps_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHaloOverlaps')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlBeamHaloOverlaps_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlBeamHalo_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlBeamHalo_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlCalIsolatedMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlCalIsolatedMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlCalIsolatedMu_*_*', 
        'keep *_ALCARECOMuAlCalIsolatedMuGeneralTracks_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlCalIsolatedMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlCalIsolatedMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlCalIsolatedMu_*_*', 
        'keep *_ALCARECOMuAlCalIsolatedMuGeneralTracks_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlGlobalCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlGlobalCosmics_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsGeneralTracks_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsCombinatorialTF_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsRegionalTF_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOMuAlGlobalCosmicsInCollisions = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlGlobalCosmicsInCollisions_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsInCollisionsGeneralTracks_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOMuAlGlobalCosmicsInCollisions_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlGlobalCosmicsInCollisions_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsInCollisionsGeneralTracks_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOMuAlGlobalCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlGlobalCosmics_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsGeneralTracks_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsCombinatorialTF_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOMuAlGlobalCosmicsRegionalTF_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOMuAlOverlaps = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlOverlaps')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlOverlaps_*_*', 
        'keep *_ALCARECOMuAlOverlapsGeneralTracks_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlOverlaps_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlOverlaps')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlOverlaps_*_*', 
        'keep *_ALCARECOMuAlOverlapsGeneralTracks_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlStandAloneCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlStandAloneCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlStandAloneCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlStandAloneCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlStandAloneCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlStandAloneCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlZMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlZMuMu_*_*', 
        'keep *_ALCARECOMuAlZMuMuGeneralTracks_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlZMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlZMuMu_*_*', 
        'keep *_ALCARECOMuAlZMuMuGeneralTracks_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOPromptCalibProd = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProd')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOPromptCalibProdSiPixelAli = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiPixelAli')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_SiPixelAliMillePedeFileConverter_*_*')
)

process.OutALCARECOPromptCalibProdSiPixelAli_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiPixelAli')
    ),
    outputCommands = cms.untracked.vstring('keep *_SiPixelAliMillePedeFileConverter_*_*')
)

process.OutALCARECOPromptCalibProdSiStrip = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStrip')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOPromptCalibProdSiStripGains = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStripGains')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStripGains_*_*')
)

process.OutALCARECOPromptCalibProdSiStripGainsAfterAbortGap = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStripGainsAfterAbortGap')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStripGainsAfterAbortGap_*_*')
)

process.OutALCARECOPromptCalibProdSiStripGainsAfterAbortGap_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStripGainsAfterAbortGap')
    ),
    outputCommands = cms.untracked.vstring('keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStripGainsAfterAbortGap_*_*')
)

process.OutALCARECOPromptCalibProdSiStripGains_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStripGains')
    ),
    outputCommands = cms.untracked.vstring('keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStripGains_*_*')
)

process.OutALCARECOPromptCalibProdSiStrip_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStrip')
    ),
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOPromptCalibProd_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProd')
    ),
    outputCommands = cms.untracked.vstring('keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECORpcCalHLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECORpcCalHLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_muonDTDigis_*_*', 
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_*_*_*', 
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_*_*_*', 
        'keep DTLayerIdDTDigiMuonDigiCollection_*_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_*_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep L1MuRegionalCands_*_RPCb_*', 
        'keep L1MuRegionalCands_*_RPCf_*', 
        'keep L1MuGMTCands_*_*_*', 
        'keep L1MuGMTReadoutCollection_*_*_*')
)

process.OutALCARECORpcCalHLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECORpcCalHLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_muonDTDigis_*_*', 
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_*_*_*', 
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_*_*_*', 
        'keep DTLayerIdDTDigiMuonDigiCollection_*_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_*_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep L1MuRegionalCands_*_RPCb_*', 
        'keep L1MuRegionalCands_*_RPCf_*', 
        'keep L1MuGMTCands_*_*_*', 
        'keep L1MuGMTReadoutCollection_*_*_*')
)

process.OutALCARECOSiPixelLorentzAngle = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiPixelLorentzAngle')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_globalMuons_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'drop *_*_*_HLT')
)

process.OutALCARECOSiPixelLorentzAngle_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiPixelLorentzAngle')
    ),
    outputCommands = cms.untracked.vstring('keep *_globalMuons_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'drop *_*_*_HLT')
)

process.OutALCARECOSiStripCalMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOSiStripCalMinBias_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalMinBiasAfterAbortGap = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalMinBiasAfterAbortGap')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOSiStripCalMinBiasAfterAbortGap_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalMinBiasAfterAbortGap_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalMinBiasAfterAbortGap')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOSiStripCalMinBiasAfterAbortGap_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOSiStripCalMinBias_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalZeroBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalZeroBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOSiStripCalZeroBias_*_*', 
        'keep *_calZeroBiasClusters_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalZeroBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalZeroBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOSiStripCalZeroBias_*_*', 
        'keep *_calZeroBiasClusters_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripPCLHistos = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripPCLHistos')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOSiStripPCLHistos_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripPCLHistos')
    ),
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOTkAlBeamHalo = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlBeamHalo_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOTkAlBeamHalo_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlBeamHalo_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOTkAlCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF', 
            'pathALCARECOTkAlCosmicsCosmicTF', 
            'pathALCARECOTkAlCosmicsRegional')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics0T = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0T', 
            'pathALCARECOTkAlCosmicsCosmicTF0T', 
            'pathALCARECOTkAlCosmicsRegional0T')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsCTF0T_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF0T_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep SiPixelCluster*_siPixelClusters_*_*', 
        'keep SiStripCluster*_siStripClusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics0THLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0THLT', 
            'pathALCARECOTkAlCosmicsCosmicTF0THLT', 
            'pathALCARECOTkAlCosmicsRegional0THLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsCTF0T_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF0T_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep SiPixelCluster*_siPixelClusters_*_*', 
        'keep SiStripCluster*_siStripClusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics0THLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0THLT', 
            'pathALCARECOTkAlCosmicsCosmicTF0THLT', 
            'pathALCARECOTkAlCosmicsRegional0THLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsCTF0T_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF0T_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep SiPixelCluster*_siPixelClusters_*_*', 
        'keep SiStripCluster*_siStripClusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics0T_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0T', 
            'pathALCARECOTkAlCosmicsCosmicTF0T', 
            'pathALCARECOTkAlCosmicsRegional0T')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsCTF0T_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF0T_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep SiPixelCluster*_siPixelClusters_*_*', 
        'keep SiStripCluster*_siStripClusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmicsHLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTFHLT', 
            'pathALCARECOTkAlCosmicsCosmicTFHLT', 
            'pathALCARECOTkAlCosmicsRegionalHLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmicsHLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTFHLT', 
            'pathALCARECOTkAlCosmicsCosmicTFHLT', 
            'pathALCARECOTkAlCosmicsRegionalHLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmicsInCollisions = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsInCollisions_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep SiPixelCluster*_siPixelClusters_*_*', 
        'keep SiStripCluster*_siStripClusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmicsInCollisions_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsInCollisions_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep SiPixelCluster*_siPixelClusters_*_*', 
        'keep SiStripCluster*_siStripClusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF', 
            'pathALCARECOTkAlCosmicsCosmicTF', 
            'pathALCARECOTkAlCosmicsRegional')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlJpsiMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlJpsiMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlJpsiMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlJpsiMuMuHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlJpsiMuMuHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlJpsiMuMuHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlJpsiMuMuHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlJpsiMuMuHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlJpsiMuMuHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlJpsiMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlJpsiMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlJpsiMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlLAS = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlLAS')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlLAST0Producer_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOTkAlLAS_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlLAS')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlLAST0Producer_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOTkAlMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMinBias_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_offlineBeamSpot_*_*')
)

process.OutALCARECOTkAlMinBiasHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBiasHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMinBiasHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*', 
        'keep *_offlineBeamSpot_*_*')
)

process.OutALCARECOTkAlMinBiasHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBiasHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMinBiasHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*', 
        'keep *_offlineBeamSpot_*_*')
)

process.OutALCARECOTkAlMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMinBias_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_offlineBeamSpot_*_*')
)

process.OutALCARECOTkAlMuonIsolated = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolated')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMuonIsolated_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlMuonIsolatedHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolatedHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMuonIsolatedHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlMuonIsolatedHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolatedHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMuonIsolatedHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlMuonIsolatedPA = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolatedPA')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMuonIsolatedPA_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlMuonIsolatedPA_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolatedPA')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMuonIsolatedPA_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlMuonIsolated_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolated')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMuonIsolated_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlUpsilonMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlUpsilonMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlUpsilonMuMuHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMuHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlUpsilonMuMuHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlUpsilonMuMuHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMuHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlUpsilonMuMuHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlUpsilonMuMuPA = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMuPA')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlUpsilonMuMuPA_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlUpsilonMuMuPA_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMuPA')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlUpsilonMuMuPA_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlUpsilonMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlUpsilonMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlZMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlZMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlZMuMuHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMuHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlZMuMuHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlZMuMuHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMuHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlZMuMuHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlZMuMuPA = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMuPA')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlZMuMuPA_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlZMuMuPA_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMuPA')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlZMuMuPA_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlZMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlZMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.PerLadder = cms.PSet(
    enabled = cms.bool(True)
)

process.PerLayer1D = cms.PSet(
    enabled = cms.bool(True)
)

process.PerLayer2D = cms.PSet(
    enabled = cms.bool(True)
)

process.PerModule = cms.PSet(
    enabled = cms.bool(False)
)

process.PerReadout = cms.PSet(
    enabled = cms.bool(True)
)

process.PixelSeedMergerQuadruplets = cms.PSet(
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('PixelTTRHBuilderWithoutAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('PixelTTRHBuilderWithoutAngle')
    ),
    TEC = cms.PSet(

    ),
    appendToDataLabel = cms.string(''),
    layerList = cms.vstring('BPix1+BPix2+BPix3+BPix4', 
        'BPix1+BPix2+BPix3+FPix1_pos', 
        'BPix1+BPix2+BPix3+FPix1_neg', 
        'BPix1+BPix2+FPix1_pos+FPix2_pos', 
        'BPix1+BPix2+FPix1_neg+FPix2_neg', 
        'BPix1+FPix1_pos+FPix2_pos+FPix3_pos', 
        'BPix1+FPix1_neg+FPix2_neg+FPix3_neg')
)

process.PixelTripletHLTGenerator = cms.PSet(
    ComponentName = cms.string('PixelTripletHLTGenerator'),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    extraHitRPhitolerance = cms.double(0.032),
    extraHitRZtolerance = cms.double(0.037),
    maxElement = cms.uint32(100000),
    phiPreFiltering = cms.double(0.3),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)

process.PixelTripletHLTGeneratorWithFilter = cms.PSet(
    ComponentName = cms.string('PixelTripletHLTGenerator'),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache")
    ),
    extraHitRPhitolerance = cms.double(0.032),
    extraHitRZtolerance = cms.double(0.037),
    maxElement = cms.uint32(100000),
    phiPreFiltering = cms.double(0.3),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)

process.RAWEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.RAWSIMEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'drop *_hlt*_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.RECOEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'keep *_logErrorHarvester_*_*', 
        'keep PixelDigiedmDetSetVector_siPixelDigis_*_*', 
        'keep *_siStripDigis_*_*', 
        'keep *_siStripZeroSuppression_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelRecHits_*_*', 
        'keep *_siStripRecHits_*_*', 
        'keep *_siStripMatchedRecHits_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsT0Seg_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep ESDataFramesSorted_ecalPreshowerDigis_*_*', 
        'keep *_islandBasicClusters_*_*', 
        'keep *_fixedMatrixBasicClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_uncleanedHybridSuperClusters_*_*', 
        'keep *_cosmicBasicClusters_*_*', 
        'keep *_cosmicSuperClusters_*_*', 
        'drop recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_islandSuperClusters_islandBarrelSuperClusters_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_correctedFixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_fixedMatrixSuperClustersWithPreshower_*_*', 
        'keep *_correctedEndcapSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_preshowerClusterShape_*_*', 
        'keep recoPreshowerClusterShapes_fixedMatrixPreshowerClusterShape_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep recoRecoEcalCandidates_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5_*_*', 
        'keep recoTracks_cosmictrackfinderP5_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_splittedTracksP5_*_*', 
        'keep recoTrackExtras_splittedTracksP5_*_*', 
        'keep TrackingRecHitsOwned_splittedTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_cosmictrackfinderP5Top_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Top_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Top_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTrackExtras_regionalCosmicTracks_*_*', 
        'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxTruncated40CTF_*_*', 
        'keep *_dedxHitInfoCTF_*_*', 
        'keep *_dedxHarmonic2CTF_*_*', 
        'keep *_dedxTruncated40CosmicTF_*_*', 
        'keep *_dedxHitInfoCosmicTF_*_*', 
        'keep *_dedxHarmonic2CosmicTF_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep *_CosmicMuonSeedEndCapsOnly_*_*', 
        'keep *_CosmicMuonSeedWitht0Correction_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_globalCosmicSplitMuons_*_*', 
        'keep recoTrackExtras_globalCosmicSplitMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicSplitMuons_*_*', 
        'keep recoMuons_splitMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_splitMuons_*_*', 
        'keep recoTracks_cosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_cosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsNoRPC_*_*', 
        'keep recoTracks_globalCosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsNoRPC_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons1Leg_*_*', 
        'keep recoTracks_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_cosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTracks_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoMuons_muonsWitht0Correction_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsWitht0Correction_*_*', 
        'keep recoTracks_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTrackExtras_cosmicMuonsEndCapsOnly_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTracks_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoTrackExtras_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep TrackingRecHitsOwned_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoMuons_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoMuons_lhcSTAMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_lhcSTAMuons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksBeamHaloMuon_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RECOSIMEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'keep *_logErrorHarvester_*_*', 
        'drop *', 
        'keep *_logErrorHarvester_*_*', 
        'keep PixelDigiedmDetSetVector_siPixelDigis_*_*', 
        'keep *_siStripDigis_*_*', 
        'keep *_siStripZeroSuppression_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelRecHits_*_*', 
        'keep *_siStripRecHits_*_*', 
        'keep *_siStripMatchedRecHits_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsT0Seg_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep ESDataFramesSorted_ecalPreshowerDigis_*_*', 
        'keep *_islandBasicClusters_*_*', 
        'keep *_fixedMatrixBasicClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_uncleanedHybridSuperClusters_*_*', 
        'keep *_cosmicBasicClusters_*_*', 
        'keep *_cosmicSuperClusters_*_*', 
        'drop recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_islandSuperClusters_islandBarrelSuperClusters_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_correctedFixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_fixedMatrixSuperClustersWithPreshower_*_*', 
        'keep *_correctedEndcapSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_preshowerClusterShape_*_*', 
        'keep recoPreshowerClusterShapes_fixedMatrixPreshowerClusterShape_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep recoRecoEcalCandidates_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5_*_*', 
        'keep recoTracks_cosmictrackfinderP5_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_splittedTracksP5_*_*', 
        'keep recoTrackExtras_splittedTracksP5_*_*', 
        'keep TrackingRecHitsOwned_splittedTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_cosmictrackfinderP5Top_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Top_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Top_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTrackExtras_regionalCosmicTracks_*_*', 
        'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxTruncated40CTF_*_*', 
        'keep *_dedxHitInfoCTF_*_*', 
        'keep *_dedxHarmonic2CTF_*_*', 
        'keep *_dedxTruncated40CosmicTF_*_*', 
        'keep *_dedxHitInfoCosmicTF_*_*', 
        'keep *_dedxHarmonic2CosmicTF_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep *_CosmicMuonSeedEndCapsOnly_*_*', 
        'keep *_CosmicMuonSeedWitht0Correction_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_globalCosmicSplitMuons_*_*', 
        'keep recoTrackExtras_globalCosmicSplitMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicSplitMuons_*_*', 
        'keep recoMuons_splitMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_splitMuons_*_*', 
        'keep recoTracks_cosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_cosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsNoRPC_*_*', 
        'keep recoTracks_globalCosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsNoRPC_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons1Leg_*_*', 
        'keep recoTracks_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_cosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTracks_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoMuons_muonsWitht0Correction_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsWitht0Correction_*_*', 
        'keep recoTracks_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTrackExtras_cosmicMuonsEndCapsOnly_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTracks_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoTrackExtras_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep TrackingRecHitsOwned_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoMuons_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoMuons_lhcSTAMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_lhcSTAMuons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksBeamHaloMuon_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.REDIGIEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring('drop *', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'drop *_randomEngineStateProducer_*_*')
)

process.REGENEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring('keep *', 
        'drop *_genParticles_*_*', 
        'drop *_genParticlesForJets_*_*', 
        'drop *_kt4GenJets_*_*', 
        'drop *_kt6GenJets_*_*', 
        'drop *_iterativeCone5GenJets_*_*', 
        'drop *_ak4GenJets_*_*', 
        'drop *_ak7GenJets_*_*', 
        'drop *_ak8GenJets_*_*', 
        'drop *_ak4GenJetsNoNu_*_*', 
        'drop *_ak8GenJetsNoNu_*_*', 
        'drop *_genCandidatesForMET_*_*', 
        'drop *_genParticlesForMETAllVisible_*_*', 
        'drop *_genMetCalo_*_*', 
        'drop *_genMetCaloAndNonPrompt_*_*', 
        'drop *_genMetTrue_*_*', 
        'drop *_genMetIC5GenJs_*_*')
)

process.RESIMEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring('drop *', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoHeader_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generatorSmeared_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*')
)

process.RU_ME12 = cms.PSet(
    chi2Max = cms.double(100.0),
    chi2Norm_2D_ = cms.double(35),
    chi2_str = cms.double(50.0),
    dPhiIntMax = cms.double(0.003),
    dPhiMax = cms.double(0.004),
    dRIntMax = cms.double(2.0),
    dRMax = cms.double(1.5),
    doCollisions = cms.bool(True),
    minLayersApart = cms.int32(1),
    wideSeg = cms.double(3.0)
)

process.RU_ME13 = cms.PSet(
    chi2Max = cms.double(60.0),
    chi2Norm_2D_ = cms.double(20),
    chi2_str = cms.double(30.0),
    dPhiIntMax = cms.double(0.002),
    dPhiMax = cms.double(0.003),
    dRIntMax = cms.double(2.0),
    dRMax = cms.double(1.5),
    doCollisions = cms.bool(True),
    minLayersApart = cms.int32(1),
    wideSeg = cms.double(3.0)
)

process.RU_ME1A = cms.PSet(
    chi2Max = cms.double(100.0),
    chi2Norm_2D_ = cms.double(35),
    chi2_str = cms.double(50.0),
    dPhiIntMax = cms.double(0.005),
    dPhiMax = cms.double(0.006),
    dRIntMax = cms.double(2.0),
    dRMax = cms.double(1.5),
    doCollisions = cms.bool(True),
    minLayersApart = cms.int32(1),
    wideSeg = cms.double(3.0)
)

process.RU_ME1B = cms.PSet(
    chi2Max = cms.double(100.0),
    chi2Norm_2D_ = cms.double(35),
    chi2_str = cms.double(50.0),
    dPhiIntMax = cms.double(0.004),
    dPhiMax = cms.double(0.005),
    dRIntMax = cms.double(2.0),
    dRMax = cms.double(1.5),
    doCollisions = cms.bool(True),
    minLayersApart = cms.int32(1),
    wideSeg = cms.double(3.0)
)

process.RU_MEX1 = cms.PSet(
    chi2Max = cms.double(180.0),
    chi2Norm_2D_ = cms.double(60),
    chi2_str = cms.double(80.0),
    dPhiIntMax = cms.double(0.005),
    dPhiMax = cms.double(0.007),
    dRIntMax = cms.double(2.0),
    dRMax = cms.double(1.5),
    doCollisions = cms.bool(True),
    minLayersApart = cms.int32(1),
    wideSeg = cms.double(3.0)
)

process.RU_MEX2 = cms.PSet(
    chi2Max = cms.double(100.0),
    chi2Norm_2D_ = cms.double(35),
    chi2_str = cms.double(50.0),
    dPhiIntMax = cms.double(0.004),
    dPhiMax = cms.double(0.006),
    dRIntMax = cms.double(2.0),
    dRMax = cms.double(1.5),
    doCollisions = cms.bool(True),
    minLayersApart = cms.int32(1),
    wideSeg = cms.double(3.0)
)

process.RecoEcalAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_islandBasicClusters_*_*', 
        'keep *_fixedMatrixBasicClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_cosmicBasicClusters_*_*', 
        'keep *_cosmicSuperClusters_*_*', 
        'drop recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_islandSuperClusters_islandBarrelSuperClusters_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedEndcapSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_fixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedFixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_preshowerClusterShape_*_*', 
        'keep recoPreshowerClusterShapes_fixedMatrixPreshowerClusterShape_*_*')
)

process.RecoEcalFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ecalRecHit_*_*', 
        'keep *_ecalWeightUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_islandBasicClusters_*_*', 
        'keep *_islandSuperClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_uncleanedHybridSuperClusters_*_*', 
        'keep *_correctedFixedMatrix*_*_*', 
        'keep *_cosmicBasicClusters_*_*', 
        'keep *_cosmicSuperClusters_*_*', 
        'keep *_fixedMatrix*_*_*', 
        'keep *_correctedIslandBarrelSuperClusters_*_*', 
        'keep *_correctedIslandEndcapSuperClusters_*_*', 
        'keep *_correctedHybridSuperClusters_*_*', 
        'keep *_correctedEndcapSuperClustersWithPreshower_*_*', 
        'keep *_preshowerClusterShape_*_*')
)

process.RecoEcalRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_islandBasicClusters_*_*', 
        'keep *_fixedMatrixBasicClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_uncleanedHybridSuperClusters_*_*', 
        'keep *_cosmicBasicClusters_*_*', 
        'keep *_cosmicSuperClusters_*_*', 
        'drop recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_islandSuperClusters_islandBarrelSuperClusters_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_correctedFixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_fixedMatrixSuperClustersWithPreshower_*_*', 
        'keep *_correctedEndcapSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_preshowerClusterShape_*_*', 
        'keep recoPreshowerClusterShapes_fixedMatrixPreshowerClusterShape_*_*')
)

process.RecoEgammaAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'drop *_gedPhotons_valMapPFEgammaCandToPhoton_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*')
)

process.RecoEgammaFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_gsfElectronCores_*_*', 
        'keep *_gsfElectrons_*_*', 
        'keep *_uncleanedOnlyGsfElectronCores_*_*', 
        'keep *_uncleanedOnlyGsfElectrons_*_*', 
        'keep *_eidRobustLoose_*_*', 
        'keep *_eidRobustTight_*_*', 
        'keep *_eidRobustHighEnergy_*_*', 
        'keep *_eidLoose_*_*', 
        'keep *_eidTight_*_*', 
        'keep *_egmGedGsfElectronPF*Isolation_*_*', 
        'keep *_egmGsfElectronIDs_*_*', 
        'keep *_egmPhotonIDs_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'keep *_conversions_*_*', 
        'keep *_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotonsTmp_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep *_photonCore_*_*', 
        'keep *_photons_*_*', 
        'keep *_mustachePhotonCore_*_*', 
        'keep *_mustachePhotons_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_allConversionsOldEG_*_*', 
        'keep *_ckfOutInTracksFrom*Conversions_*_*', 
        'keep *_ckfInOutTracksFrom*Conversions_*_*', 
        'keep *_uncleanedOnlyAllConversions_*_*', 
        'keep *_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep *_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*')
)

process.RecoEgammaRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep recoRecoEcalCandidates_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*')
)

process.RecoGenJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*')
)

process.RecoGenJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*')
)

process.RecoGenJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*')
)

process.RecoGenMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoHcalNoiseAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('drop recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoHcalNoiseFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoHcalNoiseRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'drop doubles_*Jets_rhos_*', 
        'drop doubles_*Jets_sigmas_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*')
)

process.RecoJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloJets_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoTrackJets_*_*_*', 
        'keep recoJPTJets_*_*_*', 
        'keep recoBasicJets_*_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_kt4JetTracksAssociatorAtVertex_*_*', 
        'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_kt4JetExtender_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex*_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace*_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak7JetTracksAssociatorAtVertex*_*_*', 
        'keep *_ak7JetTracksAssociatorAtCaloFace*_*_*', 
        'keep *_ak7JetExtender_*_*', 
        'keep *_*JetID_*_*', 
        'keep *_kt4CaloJets_*_*', 
        'keep *_kt6CaloJets_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak5CaloJets_*_*', 
        'keep *_ak7CaloJets_*_*', 
        'keep *_kt4PFJets_*_*', 
        'keep *_kt6PFJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak5PFJets_*_*', 
        'keep *_ak7PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep *_kt4TrackJets_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ca*Mass_*_*', 
        'keep *_ak*Mass_*_*')
)

process.RecoJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*')
)

process.RecoLocalCaloAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoLocalCaloFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HBHERecHitsSorted_hbheprerecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalWeightUncalibRecHit_*_*', 
        'keep *_ecalFixedAlphaBetaFitUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep ESDataFramesSorted_ecalPreshowerDigis_*_*')
)

process.RecoLocalCaloRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hbhereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep ESDataFramesSorted_ecalPreshowerDigis_*_*')
)

process.RecoLocalMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoLocalMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsT0Seg_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_*_*_*', 
        'keep *_rpcRecHits_*_*')
)

process.RecoLocalMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsT0Seg_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*', 
        'keep *_rpcRecHits_*_*')
)

process.RecoLocalTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoLocalTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PixelDigiedmDetSetVector_siPixelDigis_*_*', 
        'keep *_siStripDigis_*_*', 
        'keep *_siStripZeroSuppression_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelRecHits_*_*', 
        'keep *_siStripRecHits_*_*', 
        'keep *_siStripMatchedRecHits_*_*')
)

process.RecoLocalTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PixelDigiedmDetSetVector_siPixelDigis_*_*', 
        'keep *_siStripDigis_*_*', 
        'keep *_siStripZeroSuppression_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelRecHits_*_*', 
        'keep *_siStripRecHits_*_*', 
        'keep *_siStripMatchedRecHits_*_*')
)

process.RecoMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'drop recoHcalNoiseRBXs_*_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*')
)

process.RecoMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*')
)

process.RecoMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*')
)

process.RecoMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_globalCosmicSplitMuons_*_*', 
        'keep recoTrackExtras_globalCosmicSplitMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicSplitMuons_*_*', 
        'keep recoMuons_splitMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_splitMuons_*_*', 
        'keep recoTracks_cosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_cosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsNoRPC_*_*', 
        'keep recoTracks_globalCosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsNoRPC_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons1Leg_*_*', 
        'keep recoTracks_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_cosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTracks_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoMuons_muonsWitht0Correction_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsWitht0Correction_*_*', 
        'keep recoTracks_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTrackExtras_cosmicMuonsEndCapsOnly_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTracks_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoTrackExtras_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep TrackingRecHitsOwned_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoMuons_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoMuons_lhcSTAMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_lhcSTAMuons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksBeamHaloMuon_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*')
)

process.RecoMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_CosmicMuonSeed_*_*', 
        'keep *_CosmicMuonSeedEndCapsOnly_*_*', 
        'keep *_CosmicMuonSeedWitht0Correction_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_globalCosmicSplitMuons_*_*', 
        'keep recoTrackExtras_globalCosmicSplitMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicSplitMuons_*_*', 
        'keep recoMuons_splitMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_splitMuons_*_*', 
        'keep recoTracks_cosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_cosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsNoRPC_*_*', 
        'keep recoTracks_globalCosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsNoRPC_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons1Leg_*_*', 
        'keep recoTracks_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_cosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTracks_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoMuons_muonsWitht0Correction_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsWitht0Correction_*_*', 
        'keep recoTracks_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTrackExtras_cosmicMuonsEndCapsOnly_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTracks_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoTrackExtras_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep TrackingRecHitsOwned_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoMuons_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoMuons_lhcSTAMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_lhcSTAMuons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksBeamHaloMuon_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoMuonIsolationAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoMuonIsolationFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoMuonIsolationParamGlobal = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muParamGlobalIsoDepositGsTk_*_*', 
        'keep *_muParamGlobalIsoDepositCalEcal_*_*', 
        'keep *_muParamGlobalIsoDepositCalHcal_*_*', 
        'keep *_muParamGlobalIsoDepositCtfTk_*_*', 
        'keep *_muParamGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muParamGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muParamGlobalIsoDepositJets_*_*')
)

process.RecoMuonIsolationRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_CosmicMuonSeed_*_*', 
        'keep *_CosmicMuonSeedEndCapsOnly_*_*', 
        'keep *_CosmicMuonSeedWitht0Correction_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_globalCosmicSplitMuons_*_*', 
        'keep recoTrackExtras_globalCosmicSplitMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicSplitMuons_*_*', 
        'keep recoMuons_splitMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_splitMuons_*_*', 
        'keep recoTracks_cosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_cosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsNoRPC_*_*', 
        'keep recoTracks_globalCosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsNoRPC_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons1Leg_*_*', 
        'keep recoTracks_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_cosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTracks_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoMuons_muonsWitht0Correction_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsWitht0Correction_*_*', 
        'keep recoTracks_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTrackExtras_cosmicMuonsEndCapsOnly_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTracks_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoTrackExtras_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep TrackingRecHitsOwned_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoMuons_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoMuons_lhcSTAMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_lhcSTAMuons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksBeamHaloMuon_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5_*_*', 
        'keep recoTracks_cosmictrackfinderP5_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_splittedTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_cosmictrackfinderP5Top_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxHitInfoCTF_*_*', 
        'keep *_dedxHarmonic2CTF_*_*', 
        'keep *_dedxHitInfoCosmicTF_*_*', 
        'keep *_dedxHarmonic2CosmicTF_*_*')
)

process.RecoTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5_*_*', 
        'keep recoTracks_cosmictrackfinderP5_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_splittedTracksP5_*_*', 
        'keep recoTrackExtras_splittedTracksP5_*_*', 
        'keep TrackingRecHitsOwned_splittedTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_cosmictrackfinderP5Top_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Top_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Top_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTrackExtras_regionalCosmicTracks_*_*', 
        'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxTruncated40CTF_*_*', 
        'keep *_dedxHitInfoCTF_*_*', 
        'keep *_dedxHarmonic2CTF_*_*', 
        'keep *_dedxTruncated40CosmicTF_*_*', 
        'keep *_dedxHitInfoCosmicTF_*_*', 
        'keep *_dedxHarmonic2CosmicTF_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*')
)

process.RecoTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5_*_*', 
        'keep recoTracks_cosmictrackfinderP5_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_splittedTracksP5_*_*', 
        'keep recoTrackExtras_splittedTracksP5_*_*', 
        'keep TrackingRecHitsOwned_splittedTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_cosmictrackfinderP5Top_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Top_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Top_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTrackExtras_regionalCosmicTracks_*_*', 
        'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxTruncated40CTF_*_*', 
        'keep *_dedxHitInfoCTF_*_*', 
        'keep *_dedxHarmonic2CTF_*_*', 
        'keep *_dedxTruncated40CosmicTF_*_*', 
        'keep *_dedxHitInfoCosmicTF_*_*', 
        'keep *_dedxHarmonic2CosmicTF_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*')
)

process.RecoVertexAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*')
)

process.RecoVertexFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*')
)

process.RecoVertexRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*')
)

process.ReferenceTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('Combined'),
    MomentumEstimateFieldOff = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseBzeroIfFieldOff = cms.bool(True),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.RegionPSetBlock = cms.PSet(
    RegionPSet = cms.PSet(
        originHalfLength = cms.double(21.2),
        originRadius = cms.double(0.2),
        originXPos = cms.double(0.0),
        originYPos = cms.double(0.0),
        originZPos = cms.double(0.0),
        precise = cms.bool(True),
        ptMin = cms.double(0.9),
        useMultipleScattering = cms.bool(False)
    )
)

process.RegionPSetWithVerticesBlock = cms.PSet(
    RegionPSet = cms.PSet(
        VertexCollection = cms.InputTag("firstStepPrimaryVertices"),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        fixedError = cms.double(0.2),
        nSigmaZ = cms.double(4.0),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(0.9),
        sigmaZVertex = cms.double(3.0),
        useFakeVertices = cms.bool(False),
        useFixedError = cms.bool(True),
        useFoundVertices = cms.bool(True),
        useMultipleScattering = cms.bool(False)
    )
)

process.SK_ME1234 = cms.PSet(
    chi2Max = cms.double(99999.0),
    dPhiFineMax = cms.double(0.025),
    dPhiMax = cms.double(0.003),
    dRPhiFineMax = cms.double(8.0),
    dRPhiMax = cms.double(8.0),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True),
    wideSeg = cms.double(3.0)
)

process.SK_ME1A = cms.PSet(
    chi2Max = cms.double(99999.0),
    dPhiFineMax = cms.double(0.025),
    dPhiMax = cms.double(0.025),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(8.0),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True),
    wideSeg = cms.double(3.0)
)

process.ST_ME1234 = cms.PSet(
    BPMinImprovement = cms.double(10000.0),
    BrutePruning = cms.bool(True),
    CSCDebug = cms.untracked.bool(False),
    CorrectTheErrors = cms.bool(True),
    Covariance = cms.double(0.0),
    ForceCovariance = cms.bool(False),
    ForceCovarianceAll = cms.bool(False),
    NormChi2Cut2D = cms.double(20.0),
    NormChi2Cut3D = cms.double(10.0),
    Pruning = cms.bool(True),
    SeedBig = cms.double(0.0015),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    curvePenaltyThreshold = cms.double(0.85),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(4.0),
    dYclusBoxMax = cms.double(8.0),
    hitDropLimit4Hits = cms.double(0.6),
    hitDropLimit5Hits = cms.double(0.8),
    hitDropLimit6Hits = cms.double(0.3333),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3),
    maxRecHitsInCluster = cms.int32(20),
    minHitsPerSegment = cms.int32(3),
    onlyBestSegment = cms.bool(False),
    preClustering = cms.bool(True),
    preClusteringUseChaining = cms.bool(True),
    prePrun = cms.bool(True),
    prePrunLimit = cms.double(3.17),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2),
    useShowering = cms.bool(False),
    yweightPenalty = cms.double(1.5),
    yweightPenaltyThreshold = cms.double(1.0)
)

process.ST_ME1A = cms.PSet(
    BPMinImprovement = cms.double(10000.0),
    BrutePruning = cms.bool(True),
    CSCDebug = cms.untracked.bool(False),
    CorrectTheErrors = cms.bool(True),
    Covariance = cms.double(0.0),
    ForceCovariance = cms.bool(False),
    ForceCovarianceAll = cms.bool(False),
    NormChi2Cut2D = cms.double(20.0),
    NormChi2Cut3D = cms.double(10.0),
    Pruning = cms.bool(True),
    SeedBig = cms.double(0.0015),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    curvePenaltyThreshold = cms.double(0.85),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(4.0),
    dYclusBoxMax = cms.double(8.0),
    hitDropLimit4Hits = cms.double(0.6),
    hitDropLimit5Hits = cms.double(0.8),
    hitDropLimit6Hits = cms.double(0.3333),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3),
    maxRecHitsInCluster = cms.int32(24),
    minHitsPerSegment = cms.int32(3),
    onlyBestSegment = cms.bool(False),
    preClustering = cms.bool(True),
    preClusteringUseChaining = cms.bool(True),
    prePrun = cms.bool(True),
    prePrunLimit = cms.double(3.17),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2),
    useShowering = cms.bool(False),
    yweightPenalty = cms.double(1.5),
    yweightPenaltyThreshold = cms.double(1.0)
)

process.SectCollParametersBlock = cms.PSet(
    SectCollParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SCCSP1 = cms.int32(0),
        SCCSP2 = cms.int32(0),
        SCCSP3 = cms.int32(0),
        SCCSP4 = cms.int32(0),
        SCCSP5 = cms.int32(0),
        SCECF1 = cms.bool(False),
        SCECF2 = cms.bool(False),
        SCECF3 = cms.bool(False),
        SCECF4 = cms.bool(False)
    )
)

process.SiPixelGainCalibrationServiceParameters = cms.PSet(

)

process.SiPixelPhase1ClustersCharge = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('charge'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(200000.0),
    range_min = cms.double(0),
    range_nbins = cms.int32(200),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedModuleCoord'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedLadderCoord'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(11)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXPanel'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXBModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXLayer'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXDisk'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Cluster Charge'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('Charge (electrons)'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1ClustersEventrate = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('clustereventrate'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(100),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring(),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('Lumisection'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring(),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('BX'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Number of Events with clusters'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('something'),
    ylabel = cms.string('#Events')
)

process.SiPixelPhase1ClustersNClusters = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('clusters'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(10),
    range_min = cms.double(0),
    range_nbins = cms.int32(10),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedModuleCoord'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedLadderCoord'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer', 
                    'SignedLadder', 
                    'SignedModule', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel', 
                        'PXLayer'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedLadder'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'PXRing'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXDisk'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanel'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXLayer'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXDisk'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer', 
                        'SignedLadder'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer', 
                        'SignedLadder', 
                        'PXModuleName'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing', 
                        'SignedBlade'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing', 
                        'SignedBlade', 
                        'PXModuleName'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXPanel'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing', 
                        'SignedBlade'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXPanel'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXBModule'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer', 
                        'SignedLadder'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXBModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Clusters'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('clusters'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1ClustersNClustersInclusive = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('clusters'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(2000),
    range_min = cms.double(0),
    range_nbins = cms.int32(200),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('COUNT'),
            columns = cms.vstring('PXBarrel'),
            stage = cms.int32(1),
            type = cms.int32(4)
        ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Clusters'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('clusters'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1ClustersNdigisInclusive = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('digis'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(2000),
    range_min = cms.double(0),
    range_nbins = cms.int32(200),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('COUNT'),
            columns = cms.vstring('PXBarrel'),
            stage = cms.int32(1),
            type = cms.int32(4)
        ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Digis'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('digis'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1ClustersPositionB = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(2),
    enabled = cms.bool(True),
    name = cms.string('clusterposition_zphi'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(60),
    range_min = cms.double(-60),
    range_nbins = cms.int32(600),
    range_y_max = cms.double(3.2),
    range_y_min = cms.double(-3.2),
    range_y_nbins = cms.int32(200),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring(),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Cluster Positions'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('Global Z'),
    ylabel = cms.string('Global \\phi')
)

process.SiPixelPhase1ClustersPositionF = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(2),
    enabled = cms.bool(True),
    name = cms.string('clusterposition_xy'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(20),
    range_min = cms.double(-20),
    range_nbins = cms.int32(200),
    range_y_max = cms.double(20),
    range_y_min = cms.double(-20),
    range_y_nbins = cms.int32(200),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXForward', 
                'PXDisk'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Cluster Positions'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('Global X'),
    ylabel = cms.string('Global Y')
)

process.SiPixelPhase1ClustersPositionXZ = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(2),
    enabled = cms.bool(False),
    name = cms.string('clusterposition_xz'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(20),
    range_min = cms.double(-20),
    range_nbins = cms.int32(200),
    range_y_max = cms.double(60),
    range_y_min = cms.double(-60),
    range_y_nbins = cms.int32(1200),
    specs = cms.VPSet(),
    title = cms.string('Cluster Positions'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('Global X'),
    ylabel = cms.string('Global Z')
)

process.SiPixelPhase1ClustersPositionYZ = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(2),
    enabled = cms.bool(False),
    name = cms.string('clusterposition_yz'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(20),
    range_min = cms.double(-20),
    range_nbins = cms.int32(200),
    range_y_max = cms.double(60),
    range_y_min = cms.double(-60),
    range_y_nbins = cms.int32(1200),
    specs = cms.VPSet(),
    title = cms.string('Cluster Positions'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('Global Y'),
    ylabel = cms.string('Global Z')
)

process.SiPixelPhase1ClustersReadoutCharge = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('charge'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(200000.0),
    range_min = cms.double(0),
    range_nbins = cms.int32(200),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'Shell', 
                'Sector'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'Sector'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('OnlineBlock'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('OnlineBlock'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Cluster Charge'),
    topFolderName = cms.string('PixelPhase1/FED/Readout'),
    xlabel = cms.string('Charge (electrons)'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1ClustersReadoutNClusters = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('clusters'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(10),
    range_min = cms.double(0),
    range_nbins = cms.int32(10),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('COUNT'),
            columns = cms.vstring('PXBarrel', 
                'Shell', 
                'Sector', 
                'DetId'),
            stage = cms.int32(1),
            type = cms.int32(4)
        ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'Sector'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'Sector', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'Sector'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Clusters'),
    topFolderName = cms.string('PixelPhase1/FED/Readout'),
    xlabel = cms.string('clusters'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1ClustersSize = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('size'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(30),
    range_min = cms.double(0),
    range_nbins = cms.int32(30),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedModuleCoord'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedLadderCoord'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(11)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXPanel'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXBModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXLayer'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXDisk'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Total Cluster Size'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('size[pixels]'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1ClustersSizeVsEta = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(2),
    enabled = cms.bool(True),
    name = cms.string('sizeyvseta'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(3.2),
    range_min = cms.double(-3.2),
    range_nbins = cms.int32(40),
    range_y_max = cms.double(40),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(40),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    )),
    title = cms.string('Cluster Size along Beamline vs. Cluster position #eta'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('Cluster #eta'),
    ylabel = cms.string('length [pixels]')
)

process.SiPixelPhase1ClustersSizeX = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('sizeX'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(30),
    range_min = cms.double(0),
    range_nbins = cms.int32(30),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'Shell', 
                'PXLayer', 
                'SignedLadder'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string('MEAN'),
                columns = cms.vstring(),
                stage = cms.int32(3),
                type = cms.int32(5)
            ), 
            cms.PSet(
                arg = cms.string('EXTEND_X'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer'),
                stage = cms.int32(3),
                type = cms.int32(2)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXPanel'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXBModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Cluster Size in X'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('size[pixels]'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1ClustersSizeY = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('sizeY'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(30),
    range_min = cms.double(0),
    range_nbins = cms.int32(30),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'Shell', 
                'PXLayer', 
                'SignedLadder'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string('MEAN'),
                columns = cms.vstring(),
                stage = cms.int32(3),
                type = cms.int32(5)
            ), 
            cms.PSet(
                arg = cms.string('EXTEND_X'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer'),
                stage = cms.int32(3),
                type = cms.int32(2)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXPanel'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXBModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Cluster Size in Y'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('size[pixels]'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1DigisADC = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('adc'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(300),
    range_min = cms.double(0),
    range_nbins = cms.int32(300),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('Lumisection'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(11)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXLayer'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXDisk'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedModuleCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedLadderCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXPanel'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXBModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Digi ADC values'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('adc readout'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1DigisEvents = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('eventrate'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(100),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring(),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('Lumisection'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring(),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('BX'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Rate of Pixel Events'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('Lumisection'),
    ylabel = cms.string('#Events')
)

process.SiPixelPhase1DigisHitmap = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('digi_occupancy'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(100),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(False)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'Shell', 
                'PXLayer', 
                'PXLadder', 
                'PXModuleName'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('row'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('col'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'PXLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('col'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'PXLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('row'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'PXBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('row'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('col'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'PXBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('col'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'PXBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('row'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedModuleCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedLadderCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Digi Occupancy'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('something'),
    ylabel = cms.string('#digis')
)

process.SiPixelPhase1DigisNdigis = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('digis'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(30),
    range_min = cms.double(0),
    range_nbins = cms.int32(30),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('COUNT'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(4)
        ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('Lumisection'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('PXLayer'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(11)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXDisk'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer', 
                    'SignedLadder', 
                    'SignedModule', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel', 
                        'PXLayer'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedLadder'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'PXRing'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXDisk'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanel'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer', 
                        'SignedLadder'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer', 
                        'SignedLadder', 
                        'PXModuleName'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing', 
                        'SignedBlade'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing', 
                        'SignedBlade', 
                        'PXModuleName'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXPanel'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing', 
                        'SignedBlade'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXPanel'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXBModule'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer', 
                        'SignedLadder'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXBModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Digis'),
    topFolderName = cms.string('PixelPhase1/Phase1_MechanicalView'),
    xlabel = cms.string('digis'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1DigisNdigisPerFED = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('feddigis'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(1000),
    range_min = cms.double(0),
    range_nbins = cms.int32(200),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('COUNT'),
            columns = cms.vstring('FED'),
            stage = cms.int32(1),
            type = cms.int32(4)
        ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring(),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('FED'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    )),
    title = cms.string('Digis'),
    topFolderName = cms.string('PixelPhase1'),
    xlabel = cms.string('digis'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1DigisNdigisPerFEDtrend = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('feddigistrend'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(1000),
    range_min = cms.double(0),
    range_nbins = cms.int32(200),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('COUNT'),
            columns = cms.vstring('Lumisection', 
                'FED', 
                'FED'),
            stage = cms.int32(1),
            type = cms.int32(4)
        ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring(),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('Lumisection'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('FED'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(11)
            ))
    )),
    title = cms.string('Digis'),
    topFolderName = cms.string('PixelPhase1'),
    xlabel = cms.string('digis'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1DigisOccupancy = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('occupancy'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(100),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'FED'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('LinkInFed'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'FED'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('LinkInFed'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('RocInLink'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'FED'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('LinkInFed'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'FED'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('LinkInFed'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('RocInLink'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('FED'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('FED'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Digi Occupancy'),
    topFolderName = cms.string('PixelPhase1/FED/Readout'),
    xlabel = cms.string('something'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1Geometry = cms.PSet(
    CablingMapLabel = cms.string(''),
    max_bunchcrossing = cms.int32(3600),
    max_lumisection = cms.int32(1000),
    module_cols = cms.int32(416),
    module_rows = cms.int32(160),
    n_onlineblocks = cms.int32(100),
    n_rocs = cms.int32(16),
    onlineblock = cms.int32(20),
    roc_cols = cms.int32(52),
    roc_rows = cms.int32(80),
    upgradePhase = cms.int32(1)
)

process.SiPixelPhase1RawDataFIFOFull = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('fifofull'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(7.5),
    range_min = cms.double(-0.5),
    range_nbins = cms.int32(8),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('FED', 
                'FED'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    )),
    title = cms.string('Type of FIFO full'),
    topFolderName = cms.string('PixelPhase1/FED'),
    xlabel = cms.string('FIFO (data bit #)'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1RawDataNErrors = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('errors'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(30),
    range_min = cms.double(0),
    range_nbins = cms.int32(30),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('COUNT'),
            columns = cms.vstring('FED', 
                'FED'),
            stage = cms.int32(1),
            type = cms.int32(4)
        ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('FED', 
                    'FED'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('FED', 
                    'FED'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('LinkInFed'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring(),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('LinkInFed'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('FED'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('FED', 
                    'FED'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(1)
                ))
        )),
    title = cms.string('Errors'),
    topFolderName = cms.string('PixelPhase1/FED'),
    xlabel = cms.string('errors'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1RawDataTBMMessage = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('tbmmessage'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(7.5),
    range_min = cms.double(-0.5),
    range_nbins = cms.int32(8),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('FED', 
                'FED'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    )),
    title = cms.string('TBM trailer message'),
    topFolderName = cms.string('PixelPhase1/FED'),
    xlabel = cms.string('TBM message (data bit #)'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1RawDataTBMType = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('tbmtype'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(4.5),
    range_min = cms.double(-0.5),
    range_nbins = cms.int32(4),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('FED', 
                'FED'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    )),
    title = cms.string('Type of TBM trailer'),
    topFolderName = cms.string('PixelPhase1/FED'),
    xlabel = cms.string('TBM type'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1RawDataTypeNErrors = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('nerrors_per_type'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(50),
    range_min = cms.double(0),
    range_nbins = cms.int32(51),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('FED', 
                'FED'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring(),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('FED'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('FED', 
                    'FED'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('LinkInFed'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Number of Errors per Type'),
    topFolderName = cms.string('PixelPhase1/FED'),
    xlabel = cms.string('Error Type'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1RecHitsClustX = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('rechitsize_x'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(10),
    range_min = cms.double(0),
    range_nbins = cms.int32(10),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedModule'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedLadder'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(11)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('X size of RecHit clusters'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('RecHit X-Size'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1RecHitsClustY = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('rechitsize_y'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(10),
    range_min = cms.double(0),
    range_nbins = cms.int32(10),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedModule'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedLadder'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(11)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Y size of RecHit clusters'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('RecHit Y-Size'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1RecHitsErrorX = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(False),
    name = cms.string('rechiterror_x'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(0.02),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedModule'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedLadder'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(11)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('RecHit Error in X-direction'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('X error'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1RecHitsErrorY = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(False),
    name = cms.string('rechiterror_y'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(0.02),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedModule'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedLadder'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(11)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('RecHit Error in Y-direction'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('Y error'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1RecHitsNRecHits = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('rechits'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(10),
    range_min = cms.double(0),
    range_nbins = cms.int32(10),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('COUNT'),
            columns = cms.vstring('PXBarrel'),
            stage = cms.int32(1),
            type = cms.int32(4)
        ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXLayer'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXDisk'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('RecHits'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('rechits'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1RecHitsPosition = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(2),
    enabled = cms.bool(False),
    name = cms.string('rechit_pos'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(1),
    range_min = cms.double(-1),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(4),
    range_y_min = cms.double(-4),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(False)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer', 
                'DetId'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXDisk', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Position of RecHits on Module'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('x offset'),
    ylabel = cms.string('y offset')
)

process.SiPixelPhase1RecHitsProb = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('clusterprob'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(1),
    range_min = cms.double(-10),
    range_nbins = cms.int32(50),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'Shell', 
                'PXLayer', 
                'SignedLadder'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string('MEAN'),
                columns = cms.vstring(),
                stage = cms.int32(3),
                type = cms.int32(5)
            ), 
            cms.PSet(
                arg = cms.string('EXTEND_X'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer'),
                stage = cms.int32(3),
                type = cms.int32(2)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXPanel'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXBModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Cluster Probability'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('log_10(Pr)'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackClustersNTracks = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('ntracks'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(5),
    range_min = cms.double(1),
    range_nbins = cms.int32(4),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring(),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    )),
    title = cms.string('Number of Tracks'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('All - Pixel - BPIX - FPIX'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackClustersNTracksInVolume = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('ntracksinpixvolume'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(2),
    range_min = cms.double(0),
    range_nbins = cms.int32(2),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring(),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    )),
    title = cms.string('Number of Tracks in Pixel fiducial Volume'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('without hits - with hits'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackClustersOffTrackCharge = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(False),
    name = cms.string('charge'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(200000.0),
    range_min = cms.double(0),
    range_nbins = cms.int32(200),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(3),
                type = cms.int32(1)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(3),
                    type = cms.int32(1)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedLadder'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Cluster Charge'),
    topFolderName = cms.string('PixelPhase1/OffTrack'),
    xlabel = cms.string('Charge (electrons)'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackClustersOffTrackNClusters = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(False),
    name = cms.string('clusters_ontrack'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(10),
    range_min = cms.double(0),
    range_nbins = cms.int32(10),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('COUNT'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer', 
                'DetId'),
            stage = cms.int32(1),
            type = cms.int32(4)
        ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(3),
                type = cms.int32(1)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'PXDisk', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'PXDisk'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(3),
                    type = cms.int32(1)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXLayer'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXDisk'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Clusters_onTrack'),
    topFolderName = cms.string('PixelPhase1/OffTrack'),
    xlabel = cms.string('clusters'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackClustersOffTrackPositionB = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(2),
    enabled = cms.bool(False),
    name = cms.string('clusterposition_zphi_ontrack'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(60),
    range_min = cms.double(-60),
    range_nbins = cms.int32(600),
    range_y_max = cms.double(3.2),
    range_y_min = cms.double(-3.2),
    range_y_nbins = cms.int32(200),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring(),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Cluster_onTrack Positions'),
    topFolderName = cms.string('PixelPhase1/OffTrack'),
    xlabel = cms.string('Global Z'),
    ylabel = cms.string('Global \\phi')
)

process.SiPixelPhase1TrackClustersOffTrackPositionF = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(2),
    enabled = cms.bool(False),
    name = cms.string('clusterposition_xy_ontrack'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(20),
    range_min = cms.double(-20),
    range_nbins = cms.int32(200),
    range_y_max = cms.double(20),
    range_y_min = cms.double(-20),
    range_y_nbins = cms.int32(200),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXForward', 
                'PXDisk'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    )),
    title = cms.string('Cluster_onTrack Positions'),
    topFolderName = cms.string('PixelPhase1/OffTrack'),
    xlabel = cms.string('Global X'),
    ylabel = cms.string('Global Y')
)

process.SiPixelPhase1TrackClustersOffTrackSize = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(False),
    name = cms.string('size'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(30),
    range_min = cms.double(0),
    range_nbins = cms.int32(30),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(3),
                type = cms.int32(1)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(3),
                    type = cms.int32(1)
                ))
        )),
    title = cms.string('Total Cluster Size'),
    topFolderName = cms.string('PixelPhase1/OffTrack'),
    xlabel = cms.string('size[pixels]'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackClustersOnTrackCharge = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('charge'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(200000.0),
    range_min = cms.double(0),
    range_nbins = cms.int32(200),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(3),
                type = cms.int32(1)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(3),
                    type = cms.int32(1)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedLadder'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Corrected Cluster Charge'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('Charge (electrons)'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackClustersOnTrackNClusters = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('clusters_ontrack'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(10),
    range_min = cms.double(0),
    range_nbins = cms.int32(10),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('COUNT'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer', 
                'DetId'),
            stage = cms.int32(1),
            type = cms.int32(4)
        ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(3),
                type = cms.int32(1)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'PXDisk', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'PXDisk'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(3),
                    type = cms.int32(1)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXLayer'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXDisk'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Clusters_onTrack'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('clusters'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackClustersOnTrackPositionB = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(2),
    enabled = cms.bool(True),
    name = cms.string('clusterposition_zphi_ontrack'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(60),
    range_min = cms.double(-60),
    range_nbins = cms.int32(600),
    range_y_max = cms.double(3.2),
    range_y_min = cms.double(-3.2),
    range_y_nbins = cms.int32(200),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring(),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Cluster_onTrack Positions'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('Global Z'),
    ylabel = cms.string('Global \\phi')
)

process.SiPixelPhase1TrackClustersOnTrackPositionF = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(2),
    enabled = cms.bool(True),
    name = cms.string('clusterposition_xy_ontrack'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(20),
    range_min = cms.double(-20),
    range_nbins = cms.int32(200),
    range_y_max = cms.double(20),
    range_y_min = cms.double(-20),
    range_y_nbins = cms.int32(200),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXForward', 
                'PXDisk'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    )),
    title = cms.string('Cluster_onTrack Positions'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('Global X'),
    ylabel = cms.string('Global Y')
)

process.SiPixelPhase1TrackClustersOnTrackSize = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('size'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(30),
    range_min = cms.double(0),
    range_nbins = cms.int32(30),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(3),
                type = cms.int32(1)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXDisk'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward'),
                    stage = cms.int32(3),
                    type = cms.int32(1)
                ))
        )),
    title = cms.string('Total Cluster Size'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('size[pixels]'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackEfficiencyEfficiency = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('hitefficiency'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(100),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedModule'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedLadder'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(11)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedModuleCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedLadderCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('ROC'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('ROC'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Hit Efficiency'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('#valid/(#valid+#missing)'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackEfficiencyMissing = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('missing'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(100),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('COUNT'),
            columns = cms.vstring('PXBarrel', 
                'Shell', 
                'PXLayer', 
                'SignedLadder', 
                'DetId'),
            stage = cms.int32(1),
            type = cms.int32(4)
        ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string('MEAN'),
                columns = cms.vstring(),
                stage = cms.int32(3),
                type = cms.int32(5)
            ), 
            cms.PSet(
                arg = cms.string('EXTEND_X'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer'),
                stage = cms.int32(3),
                type = cms.int32(2)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer', 
                        'SignedLadder', 
                        'PXModuleName'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing', 
                        'SignedBlade'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing', 
                        'SignedBlade', 
                        'PXModuleName'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXPanel'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing', 
                        'SignedBlade'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXPanel'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXBModule'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer', 
                        'SignedLadder'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXBModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedModuleCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedLadderCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Missing Hits'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('missing hits'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackEfficiencyValid = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(0),
    enabled = cms.bool(True),
    name = cms.string('valid'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(100),
    range_min = cms.double(0),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('COUNT'),
            columns = cms.vstring('PXBarrel', 
                'Shell', 
                'PXLayer', 
                'SignedLadder', 
                'DetId'),
            stage = cms.int32(1),
            type = cms.int32(4)
        ), 
            cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string('MEAN'),
                columns = cms.vstring(),
                stage = cms.int32(3),
                type = cms.int32(5)
            ), 
            cms.PSet(
                arg = cms.string('EXTEND_X'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer'),
                stage = cms.int32(3),
                type = cms.int32(2)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer', 
                        'SignedLadder', 
                        'PXModuleName'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'DetId'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing', 
                        'SignedBlade'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing', 
                        'SignedBlade', 
                        'PXModuleName'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXPanel'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing', 
                        'SignedBlade'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXPanel'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('COUNT'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXBModule'),
                stage = cms.int32(1),
                type = cms.int32(4)
            ), 
                cms.PSet(
                    arg = cms.string('SUM'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer', 
                        'SignedLadder'),
                    stage = cms.int32(1),
                    type = cms.int32(1)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXBModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedModuleCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedLadderCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        )),
    title = cms.string('Valid Hits'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('valid hits'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackEfficiencyVertices = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('num_vertices'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(100.5),
    range_min = cms.double(-0.5),
    range_nbins = cms.int32(101),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring(),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(8)
            ), 
            cms.PSet(
                arg = cms.string('2'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(9)
            ), 
            cms.PSet(
                arg = cms.string('3'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring(),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('Lumisection'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('PrimaryVertices'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('# Vertices'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackResidualsResidualsX = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('residual_x'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(0.05),
    range_min = cms.double(-0.05),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedModule'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedLadder'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(11)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXPanel'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXBModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Track Residuals X'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('(x_rec - x_pred) [cm]'),
    ylabel = cms.string('count')
)

process.SiPixelPhase1TrackResidualsResidualsY = cms.PSet(
    bookUndefined = cms.bool(False),
    dimensions = cms.int32(1),
    enabled = cms.bool(True),
    name = cms.string('residual_y'),
    perLumiHarvesting = cms.bool(False),
    range_max = cms.double(0.05),
    range_min = cms.double(-0.05),
    range_nbins = cms.int32(100),
    range_y_max = cms.double(100),
    range_y_min = cms.double(0),
    range_y_nbins = cms.int32(100),
    specs = cms.VPSet(cms.PSet(
        conf = cms.PSet(
            enabled = cms.bool(True)
        ),
        spec = cms.VPSet(cms.PSet(
            arg = cms.string('SUM'),
            columns = cms.vstring('PXBarrel', 
                'PXLayer'),
            stage = cms.int32(1),
            type = cms.int32(1)
        ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedModule'),
                stage = cms.int32(2),
                type = cms.int32(2)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring('SignedLadder'),
                stage = cms.int32(2),
                type = cms.int32(3)
            ), 
            cms.PSet(
                arg = cms.string('1'),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(10)
            ), 
            cms.PSet(
                arg = cms.string(''),
                columns = cms.vstring(),
                stage = cms.int32(2),
                type = cms.int32(11)
            ))
    ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedDiskCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('SignedBladePanelCoord'),
                    stage = cms.int32(2),
                    type = cms.int32(3)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXBarrel', 
                        'Shell', 
                        'PXLayer'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string('MEAN'),
                    columns = cms.vstring(),
                    stage = cms.int32(3),
                    type = cms.int32(5)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk', 
                        'PXRing'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('EXTEND_X'),
                    columns = cms.vstring('PXForward', 
                        'HalfCylinder', 
                        'PXDisk'),
                    stage = cms.int32(3),
                    type = cms.int32(2)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(False)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade', 
                    'PXModuleName'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(8)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('3'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXForward', 
                    'HalfCylinder', 
                    'PXDisk', 
                    'PXRing', 
                    'SignedBlade'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXPanel'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        ), 
        cms.PSet(
            conf = cms.PSet(
                enabled = cms.bool(True)
            ),
            spec = cms.VPSet(cms.PSet(
                arg = cms.string('SUM'),
                columns = cms.vstring('PXBarrel', 
                    'Shell', 
                    'PXLayer', 
                    'SignedLadder'),
                stage = cms.int32(1),
                type = cms.int32(1)
            ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring('PXBModule'),
                    stage = cms.int32(2),
                    type = cms.int32(2)
                ), 
                cms.PSet(
                    arg = cms.string('1'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(9)
                ), 
                cms.PSet(
                    arg = cms.string('2'),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(10)
                ), 
                cms.PSet(
                    arg = cms.string(''),
                    columns = cms.vstring(),
                    stage = cms.int32(2),
                    type = cms.int32(11)
                ))
        )),
    title = cms.string('Track Residuals Y'),
    topFolderName = cms.string('PixelPhase1/Tracks'),
    xlabel = cms.string('(y_rec - y_pred) [cm]'),
    ylabel = cms.string('count')
)

process.SiStripClusterChargeCutLoose = cms.PSet(
    value = cms.double(1620.0)
)

process.SiStripClusterChargeCutNone = cms.PSet(
    value = cms.double(-1.0)
)

process.SiStripClusterChargeCutTight = cms.PSet(
    value = cms.double(1945.0)
)

process.SiStripClusterChargeCutTiny = cms.PSet(
    value = cms.double(800.0)
)

process.SimCalorimetryAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimCalorimetryFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simEcalDigis_*_*', 
        'keep *_simEcalPreshowerDigis_*_*', 
        'keep *_simEcalTriggerPrimitiveDigis_*_*', 
        'keep *_simEcalEBTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*', 
        'keep *_simHcalTriggerPrimitiveDigis_*_*', 
        'keep *_mix_HcalSamples_*', 
        'keep *_mix_HcalHits_*', 
        'keep *_simHcalUnsuppressedDigis_*_*')
)

process.SimCalorimetryRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep *_simHcalUnsuppressedDigis_*_*')
)

process.SimCalorimetryRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimG4CoreAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimG4CoreRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*')
)

process.SimG4CoreRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*')
)

process.SimGeneralAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*')
)

process.SimGeneralFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*')
)

process.SimGeneralRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*', 
        'keep int_*_bunchSpacing_*')
)

process.SimGeneralRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*')
)

process.SimMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimMuonFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonDTDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*')
)

process.SimMuonRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*')
)

process.SimMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*')
)

process.SimTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.SimTrackerDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*')
)

process.SimTrackerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simSiPixelDigis_*_*', 
        'keep *_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_trackingParticleRecoTrackAsssociation_*_*', 
        'keep *_assoc2secStepTk_*_*', 
        'keep *_assoc2thStepTk_*_*', 
        'keep *_assoc2GsfTracks_*_*', 
        'keep *_assocOutInConversionTracks_*_*', 
        'keep *_assocInOutConversionTracks_*_*')
)

process.SimTrackerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.SimTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.TC_ME1234 = cms.PSet(
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    chi2ndfProbMin = cms.double(0.0001),
    dPhiFineMax = cms.double(0.02),
    dPhiMax = cms.double(0.003),
    dRPhiFineMax = cms.double(6.0),
    dRPhiMax = cms.double(1.2),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True)
)

process.TC_ME1A = cms.PSet(
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    chi2ndfProbMin = cms.double(0.0001),
    dPhiFineMax = cms.double(0.013),
    dPhiMax = cms.double(0.00198),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(0.6),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True)
)

process.TECi = cms.PSet(
    TTRHBuilder = cms.string('WithTrackAngle'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxRing = cms.int32(2),
    minRing = cms.int32(1),
    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    useRingSlector = cms.bool(True)
)

process.TSPhiParametersBlock = cms.PSet(
    TSPhiParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        TSMCCE1 = cms.bool(True),
        TSMCCE2 = cms.bool(False),
        TSMCCEC = cms.bool(False),
        TSMCGS1 = cms.bool(True),
        TSMCGS2 = cms.bool(True),
        TSMGS1 = cms.int32(1),
        TSMGS2 = cms.int32(1),
        TSMHSP = cms.int32(1),
        TSMHTE1 = cms.bool(True),
        TSMHTE2 = cms.bool(False),
        TSMHTEC = cms.bool(False),
        TSMMSK1 = cms.int32(312),
        TSMMSK2 = cms.int32(312),
        TSMNOE1 = cms.bool(True),
        TSMNOE2 = cms.bool(False),
        TSMNOEC = cms.bool(False),
        TSMWORD = cms.int32(255),
        TSSCCE1 = cms.bool(True),
        TSSCCE2 = cms.bool(False),
        TSSCCEC = cms.bool(False),
        TSSCGS1 = cms.bool(True),
        TSSCGS2 = cms.bool(True),
        TSSGS1 = cms.int32(1),
        TSSGS2 = cms.int32(1),
        TSSHTE1 = cms.bool(True),
        TSSHTE2 = cms.bool(False),
        TSSHTEC = cms.bool(False),
        TSSMSK1 = cms.int32(312),
        TSSMSK2 = cms.int32(312),
        TSSNOE1 = cms.bool(True),
        TSSNOE2 = cms.bool(False),
        TSSNOEC = cms.bool(False),
        TSTREN0 = cms.bool(True),
        TSTREN1 = cms.bool(True),
        TSTREN10 = cms.bool(True),
        TSTREN11 = cms.bool(True),
        TSTREN12 = cms.bool(True),
        TSTREN13 = cms.bool(True),
        TSTREN14 = cms.bool(True),
        TSTREN15 = cms.bool(True),
        TSTREN16 = cms.bool(True),
        TSTREN17 = cms.bool(True),
        TSTREN18 = cms.bool(True),
        TSTREN19 = cms.bool(True),
        TSTREN2 = cms.bool(True),
        TSTREN20 = cms.bool(True),
        TSTREN21 = cms.bool(True),
        TSTREN22 = cms.bool(True),
        TSTREN23 = cms.bool(True),
        TSTREN3 = cms.bool(True),
        TSTREN4 = cms.bool(True),
        TSTREN5 = cms.bool(True),
        TSTREN6 = cms.bool(True),
        TSTREN7 = cms.bool(True),
        TSTREN8 = cms.bool(True),
        TSTREN9 = cms.bool(True)
    )
)

process.TSThetaParametersBlock = cms.PSet(
    TSThetaParameters = cms.PSet(
        Debug = cms.untracked.bool(False)
    )
)

process.TUParamsBlock = cms.PSet(
    Debug = cms.untracked.bool(False)
)

process.ThresholdPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ThresholdPtTrajectoryFilter'),
    minHitsThresholdPt = cms.int32(3),
    nSigmaThresholdPt = cms.double(5.0),
    thresholdPt = cms.double(10.0)
)

process.TimingFillerBlock = cms.PSet(
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(5.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    )
)

process.TrackAssociatorParameterBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    )
)

process.TrackAssociatorParameters = cms.PSet(
    CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
    EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
    HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
    HORecHitCollectionLabel = cms.InputTag("horeco"),
    ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
    accountForTrajectoryChangeCalo = cms.bool(False),
    dREcal = cms.double(9999.0),
    dREcalPreselection = cms.double(0.05),
    dRHcal = cms.double(9999.0),
    dRHcalPreselection = cms.double(0.2),
    dRMuon = cms.double(9999.0),
    dRMuonPreselection = cms.double(0.2),
    muonMaxDistanceSigmaX = cms.double(0.0),
    muonMaxDistanceSigmaY = cms.double(0.0),
    muonMaxDistanceX = cms.double(5.0),
    muonMaxDistanceY = cms.double(5.0),
    propagateAllDirections = cms.bool(True),
    trajectoryUncertaintyTolerance = cms.double(-1.0),
    truthMatch = cms.bool(False),
    useCalo = cms.bool(False),
    useEcal = cms.bool(True),
    useGEM = cms.bool(False),
    useHO = cms.bool(True),
    useHcal = cms.bool(True),
    useME0 = cms.bool(False),
    useMuon = cms.bool(True),
    usePreshower = cms.bool(False)
)

process.TrackerKinkFinderParametersBlock = cms.PSet(
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    )
)

process.TracoParametersBlock = cms.PSet(
    TracoParameters = cms.PSet(
        BTIC = cms.int32(32),
        DD = cms.int32(18),
        Debug = cms.untracked.int32(0),
        FHISM = cms.int32(0),
        FHTMSK = cms.int32(0),
        FHTPRF = cms.int32(1),
        FLTMSK = cms.int32(1),
        FPRGCOMP = cms.int32(2),
        FSLMSK = cms.int32(0),
        IBTIOFF = cms.int32(0),
        KPRGCOM = cms.int32(255),
        KRAD = cms.int32(0),
        LTF = cms.int32(0),
        LTS = cms.int32(0),
        LVALIDIFH = cms.int32(0),
        REUSEI = cms.int32(1),
        REUSEO = cms.int32(1),
        SHISM = cms.int32(0),
        SHTMSK = cms.int32(0),
        SHTPRF = cms.int32(1),
        SLTMSK = cms.int32(1),
        SPRGCOMP = cms.int32(2),
        SSLMSK = cms.int32(0),
        TRGENB0 = cms.int32(1),
        TRGENB1 = cms.int32(1),
        TRGENB10 = cms.int32(1),
        TRGENB11 = cms.int32(1),
        TRGENB12 = cms.int32(1),
        TRGENB13 = cms.int32(1),
        TRGENB14 = cms.int32(1),
        TRGENB15 = cms.int32(1),
        TRGENB2 = cms.int32(1),
        TRGENB3 = cms.int32(1),
        TRGENB4 = cms.int32(1),
        TRGENB5 = cms.int32(1),
        TRGENB6 = cms.int32(1),
        TRGENB7 = cms.int32(1),
        TRGENB8 = cms.int32(1),
        TRGENB9 = cms.int32(1)
    )
)

process.TrajectoryBuilderForConversions = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('eleLooseChi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('alongMomElePropagator'),
    propagatorOpposite = cms.string('oppositeToMomElePropagator'),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('TrajectoryFilterForConversions')
    ),
    updator = cms.string('KFUpdator')
)

process.TrajectoryFactoryBase = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('Combined'),
    PropagationDirection = cms.string('alongMomentum'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.TrajectoryFilterForConversions = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(-1),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(-1),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.TrkIsoCuts = cms.PSet(
    IsCombinedIso = cms.untracked.bool(False),
    IsRelativeIso = cms.untracked.bool(False),
    IsoCut03 = cms.untracked.double(3.0),
    ptThreshold = cms.untracked.double(0.0)
)

process.TwoBodyDecayTrajectoryFactory = cms.PSet(
    AllowZeroMaterial = cms.bool(False),
    Chi2Cut = cms.double(10000.0),
    ConstructTsosWithErrors = cms.bool(False),
    EstimatorParameters = cms.PSet(
        MaxIterationDifference = cms.untracked.double(0.01),
        MaxIterations = cms.untracked.int32(100),
        RobustificationConstant = cms.untracked.double(1.0),
        UseInvariantMass = cms.untracked.bool(True)
    ),
    IncludeAPEs = cms.bool(False),
    MaterialEffects = cms.string('Combined'),
    NSigmaCut = cms.double(100.0),
    ParticleProperties = cms.PSet(
        PrimaryMass = cms.double(91.1876),
        PrimaryWidth = cms.double(2.4952),
        SecondaryMass = cms.double(0.105658)
    ),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('TwoBodyDecayTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True),
    UseRefittedState = cms.bool(True)
)

process.allMuonParams = cms.PSet(
    d0Cut = cms.untracked.double(1000.0),
    hltCuts = cms.untracked.string('abs(eta) < 2.0'),
    recoCuts = cms.untracked.string('isStandAloneMuon && abs(eta) < 2.0'),
    z0Cut = cms.untracked.double(1000.0)
)

process.barrelMuonParams = cms.PSet(
    d0Cut = cms.untracked.double(1000.0),
    hltCuts = cms.untracked.string('abs(eta) < 0.9'),
    recoCuts = cms.untracked.string('isStandAloneMuon && abs(eta) < 0.9'),
    z0Cut = cms.untracked.double(1000.0)
)

process.ckfBaseInOutTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.ckfBaseTrajectoryFilterP5 = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(3),
    maxLostHits = cms.int32(4),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.5),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.ckfTrajectoryFilterBeamHaloMuon = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(2),
    maxLostHits = cms.int32(3),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.cleaningAlgoConfig = cms.PSet(
    cThreshold_barrel = cms.double(4),
    cThreshold_double = cms.double(10),
    cThreshold_endcap = cms.double(15),
    e4e1Threshold_barrel = cms.double(0.08),
    e4e1Threshold_endcap = cms.double(0.3),
    e4e1_a_barrel = cms.double(0.02),
    e4e1_a_endcap = cms.double(0.02),
    e4e1_b_barrel = cms.double(0.02),
    e4e1_b_endcap = cms.double(-0.0125),
    e6e2thresh = cms.double(0.04),
    ignoreOutOfTimeThresh = cms.double(1000000000.0),
    tightenCrack_e1_double = cms.double(2),
    tightenCrack_e1_single = cms.double(1),
    tightenCrack_e4e1_single = cms.double(2.5),
    tightenCrack_e6e2_double = cms.double(3)
)

process.cleaningParameters = cms.PSet(
    bypassAllDCSChecks = cms.bool(False),
    bypassAllPVChecks = cms.bool(False),
    gtLabel = cms.InputTag("gtDigis"),
    trigSelection = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(False),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_hltsel'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('')
    ),
    vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQM")
)

process.configurationMetadata = cms.untracked.PSet(
    annotation = cms.untracked.string(' nevts:-1'),
    name = cms.untracked.string('Applications'),
    version = cms.untracked.string('$Revision: 1.19 $')
)

process.cscRecHitDParameters = cms.PSet(
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME41 = cms.double(0.03),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0),
    XTasymmetry_ME12 = cms.double(0.015),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME1a = cms.double(0.023),
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME21 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME31 = cms.double(0.023),
    XTasymmetry_ME32 = cms.double(0.023),
    XTasymmetry_ME41 = cms.double(0.023)
)

process.dphiScale = cms.PSet(
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0)
)

process.ecalClusterTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        BCE = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Basic cluster energy distribution.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        BCEMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean energy of the basic clusters.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy map%(suffix)s'),
            zaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        BCEMapProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the mean energy of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy projection eta%(suffix)s'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        BCEMapProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the mean energy of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy projection phi%(suffix)s'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        BCEtMapProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the mean Et of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC ET projection eta%(suffix)s'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('transverse energy (GeV)')
            )
        ),
        BCEtMapProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the mean Et of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC ET projection phi%(suffix)s'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('transverse energy (GeV)')
            )
        ),
        BCNum = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the number of basic clusters per event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(20)
            )
        ),
        BCOccupancy = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Basic cluster occupancy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number map%(suffix)s')
        ),
        BCOccupancyProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the basic cluster occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number projection eta%(suffix)s')
        ),
        BCOccupancyProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the basic cluster occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number projection phi%(suffix)s')
        ),
        BCSize = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the basic cluster size (number of crystals).'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50)
            )
        ),
        BCSizeMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean size (number of crystals) of the basic clusters.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size map%(suffix)s')
        ),
        BCSizeMapProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the mean size (number of crystals) of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size projection eta%(suffix)s')
        ),
        BCSizeMapProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the mean size (number of crystals) of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size projection phi%(suffix)s')
        ),
        ExclusiveTriggers = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Counter for the trigger categories'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('None'),
            path = cms.untracked.string('EcalBarrel/EBClusterTaskExtras/EBCLTE exclusive triggers'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(5.0),
                labels = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(5),
                title = cms.untracked.string('triggers')
            )
        ),
        SCClusterVsSeed = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Relation between super cluster energy and its seed crystal energy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy vs seed crystal energy'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCE = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Super cluster energy distribution.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCELow = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Energy distribution of the super clusters (low scale).'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy (low scale)'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(10.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCNBCs = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the super cluster size (number of basic clusters)'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC size'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(15)
            )
        ),
        SCNcrystals = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the super cluster size (number of crystals).'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC size (crystal)'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50)
            )
        ),
        SCNum = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the number of super clusters per event in EB/EE.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC number'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(20)
            )
        ),
        SCOccupancyProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Supercluster eta.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/superClusters_%(subdetshortsig)s_eta')
        ),
        SCOccupancyProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Supercluster phi.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/superClusters_%(subdetshortsig)s_phi')
        ),
        SCR9 = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of E_seed / E_3x3 of the super clusters.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC R9'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(1.2),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50)
            )
        ),
        SCSeedEnergy = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Energy distribution of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC seed crystal energy'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCSeedOccupancy = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC seed occupancy map%(suffix)s')
        ),
        SCSeedOccupancyHighE = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters with energy > 2.0 GeV.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed occupancy map%(suffix)s (high energy clusters) %(supercrystal)s binned')
        ),
        SCSeedOccupancyTrig = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TH2F'),
            multi = cms.untracked.PSet(
                trig = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC')
            ),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed occupancy map%(suffix)s (%(trig)s triggered) %(supercrystal)s binned')
        ),
        SCSeedTimeMapTrigEx = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Mean timing of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TProfile2D'),
            multi = cms.untracked.PSet(
                trig = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC')
            ),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed crystal timing map%(suffix)s (%(trig)s exclusive triggered) %(supercrystal)s binned'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(25.0),
                low = cms.untracked.double(-25.0),
                title = cms.untracked.string('time (ns)')
            )
        ),
        SCSeedTimeTrigEx = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Timing distribution of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TH1F'),
            multi = cms.untracked.PSet(
                trig = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC')
            ),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed crystal timing (%(trig)s exclusive triggered)'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(25.0),
                low = cms.untracked.double(-25.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('time (ns)')
            )
        ),
        SCSizeVsEnergy = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Mean SC size in crystals as a function of the SC energy.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC size (crystal) vs energy (GeV)'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(10.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCSwissCross = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Swiss cross for SC maximum-energy crystal.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('EB'),
            path = cms.untracked.string('EcalBarrel/EBRecoSummary/superClusters_EB_E1oE4'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(1.5),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        SingleCrystalCluster = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy map of the occurrence of super clusters with only one constituent'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC single crystal cluster seed occupancy map%(suffix)s')
        ),
        TrendBCSize = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the mean size of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s size of basic clusters')
        ),
        TrendNBC = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the number of basic clusters per event in EB/EE.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s number of basic clusters')
        ),
        TrendNSC = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the number of super clusters per event in EB/EE.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s number of super clusters')
        ),
        TrendSCSize = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the mean size (number of crystals) of the super clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s size of super clusters')
        ),
        Triggers = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Counter for the trigger categories'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('None'),
            path = cms.untracked.string('EcalBarrel/EBClusterTaskExtras/EBCLTE triggers'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(5.0),
                labels = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(5),
                title = cms.untracked.string('triggers')
            )
        )
    ),
    params = cms.untracked.PSet(
        L1GlobalTriggerReadoutRecordTag = cms.untracked.InputTag("gtDigis"),
        L1MuGMTReadoutCollectionTag = cms.untracked.InputTag("gtDigis"),
        doExtra = cms.untracked.bool(True),
        egTriggerAlgos = cms.untracked.vstring('L1_SingleEG2', 
            'L1_SingleEG5', 
            'L1_SingleEG8', 
            'L1_SingleEG10', 
            'L1_SingleEG12', 
            'L1_SingleEG15', 
            'L1_SingleEG20', 
            'L1_SingleEG25', 
            'L1_DoubleNoIsoEG_BTB_tight', 
            'L1_DoubleNoIsoEG_BTB_loose', 
            'L1_DoubleNoIsoEGTopBottom', 
            'L1_DoubleNoIsoEGTopBottomCen', 
            'L1_DoubleNoIsoEGTopBottomCen2', 
            'L1_DoubleNoIsoEGTopBottomCenVert'),
        energyThreshold = cms.untracked.double(2.0),
        swissCrossMaxThreshold = cms.untracked.double(3.0)
    )
)

process.ecalCommonParams = cms.untracked.PSet(
    onlineMode = cms.untracked.bool(False),
    willConvertToEDM = cms.untracked.bool(True)
)

process.ecalDQMCollectionTags = cms.untracked.PSet(
    BlockSizeErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
    EBBasicCluster = cms.untracked.InputTag("cosmicBasicClusters","CosmicBarrelBasicClusters"),
    EBChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EBDigi = cms.untracked.InputTag("ecalDigis","ebDigis"),
    EBGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EBGainSwitchErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    EBLaserLedUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
    EBRecHit = cms.untracked.InputTag("ecalRecHit","EcalRecHitsEB"),
    EBReducedRecHit = cms.untracked.InputTag("reducedEcalRecHitsEB"),
    EBSrFlag = cms.untracked.InputTag("ecalDigis"),
    EBSuperCluster = cms.untracked.InputTag("cosmicSuperClusters","CosmicBarrelSuperClusters"),
    EBTestPulseUncalibRecHit = cms.untracked.InputTag("ecalTestPulseUncalibRecHit","EcalUncalibRecHitsEB"),
    EBUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
    EEBasicCluster = cms.untracked.InputTag("cosmicBasicClusters","CosmicEndcapBasicClusters"),
    EEChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EEDigi = cms.untracked.InputTag("ecalDigis","eeDigis"),
    EEGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EEGainSwitchErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    EELaserLedUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
    EERecHit = cms.untracked.InputTag("ecalRecHit","EcalRecHitsEE"),
    EEReducedRecHit = cms.untracked.InputTag("reducedEcalRecHitsEE"),
    EESrFlag = cms.untracked.InputTag("ecalDigis"),
    EESuperCluster = cms.untracked.InputTag("cosmicSuperClusters","CosmicEndcapSuperClusters"),
    EETestPulseUncalibRecHit = cms.untracked.InputTag("ecalTestPulseUncalibRecHit","EcalUncalibRecHitsEE"),
    EEUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
    EcalRawData = cms.untracked.InputTag("ecalDigis"),
    MEMBlockSizeErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemBlockSizeErrors"),
    MEMChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemChIdErrors"),
    MEMGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemGainErrors"),
    MEMTowerIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemTtIdErrors"),
    PnDiodeDigi = cms.untracked.InputTag("ecalDigis"),
    Source = cms.untracked.InputTag("rawDataCollector"),
    TowerIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
    TrigPrimDigi = cms.untracked.InputTag("ecalDigis","EcalTriggerPrimitives"),
    TrigPrimEmulDigi = cms.untracked.InputTag("valEcalTriggerPrimitiveDigis")
)

process.ecalDrivenElectronSeedsParameters = cms.PSet(
    DeltaPhi1High = cms.double(0.08),
    DeltaPhi1Low = cms.double(0.23),
    DeltaPhi2B = cms.double(0.008),
    DeltaPhi2F = cms.double(0.012),
    HGCalConfig = cms.PSet(
        HGCBHInput = cms.InputTag("HGCalRecHit","HGCHEBRecHits"),
        HGCEEInput = cms.InputTag("HGCalRecHit","HGCEERecHits"),
        HGCFHInput = cms.InputTag("HGCalRecHit","HGCHEFRecHits")
    ),
    HighPtThreshold = cms.double(35.0),
    LowPtThreshold = cms.double(5.0),
    PhiMax2B = cms.double(0.002),
    PhiMax2F = cms.double(0.003),
    PhiMin2B = cms.double(-0.002),
    PhiMin2F = cms.double(-0.003),
    SCEtCut = cms.double(0.0),
    SizeWindowENeg = cms.double(0.675),
    allowHGCal = cms.bool(False),
    applyHOverECut = cms.bool(True),
    applySigmaIEtaIEtaCut = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    deltaZ1WithVertex = cms.double(25.0),
    dynamicPhiRoad = cms.bool(True),
    ePhiMax1 = cms.double(0.075),
    ePhiMin1 = cms.double(-0.125),
    fromTrackerSeeds = cms.bool(True),
    hOverEConeSize = cms.double(0.15),
    hOverEHBMinE = cms.double(0.7),
    hOverEHFMinE = cms.double(0.8),
    hOverEPtMin = cms.double(0.0),
    hcalRecHits = cms.InputTag("hbhereco"),
    hcalTowers = cms.InputTag("towerMaker"),
    initialSeeds = cms.InputTag("newCombinedSeeds"),
    maxHBarrel = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEEndcaps = cms.double(0.15),
    maxSigmaIEtaIEtaBarrel = cms.double(0.5),
    maxSigmaIEtaIEtaEndcaps = cms.double(0.5),
    measurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    measurementTrackerName = cms.string(''),
    nSigmasDeltaZ1 = cms.double(5.0),
    pPhiMax1 = cms.double(0.125),
    pPhiMin1 = cms.double(-0.075),
    preFilteredSeeds = cms.bool(False),
    r2MaxF = cms.double(0.15),
    r2MinF = cms.double(-0.15),
    rMaxI = cms.double(0.2),
    rMinI = cms.double(-0.2),
    searchInTIDTEC = cms.bool(True),
    useRecoVertex = cms.bool(False),
    vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
    z2MaxB = cms.double(0.09),
    z2MinB = cms.double(-0.09)
)

process.ecalEnergyTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        Hit = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Rec hit energy distribution.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT energy spectrum %(sm)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        HitAll = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Rec hit energy distribution.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit spectrum%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        HitMap = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('2D distribution of the mean rec hit energy.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit energy %(sm)s'),
            zaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        HitMapAll = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean rec hit energy.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sOT%(suffix)s energy summary'),
            zaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        HitMapAllByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean tower rec hit energy for this lumisection. The mean is the total tower rechit energy over the number of rechits in the tower.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sOT%(suffix)s energy summary by lumi'),
            zaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        )
    ),
    params = cms.untracked.PSet(
        isPhysicsRun = cms.untracked.bool(True)
    )
)

process.ecalIntegrityTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        BlockSize = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/TTBlockSize/%(prefix)sIT TTBlockSize %(sm)s')
        ),
        ByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of integrity errors for each FED in this lumi section.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/%(prefix)sIT weighted integrity errors by lumi'),
            perLumi = cms.untracked.bool(True)
        ),
        ChId = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/ChId/%(prefix)sIT ChId %(sm)s')
        ),
        Gain = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/Gain/%(prefix)sIT gain %(sm)s')
        ),
        GainSwitch = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/GainSwitch/%(prefix)sIT gain switch %(sm)s')
        ),
        MapByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('Integrity error occupancy map for this lumisection. Includes Gain, ChId, GainSwitch, TowerId, and BlockSize errors.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/%(prefix)sIT%(suffix)s integrity errors map by lumi')
        ),
        Total = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of integrity errors for each FED.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sIT integrity quality errors summary')
        ),
        TowerId = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/TTId/%(prefix)sIT TTId %(sm)s')
        ),
        TrendNErrors = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the number of integrity errors.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal'),
            path = cms.untracked.string('Ecal/Trends/IntegrityTask number of integrity errors')
        )
    )
)

process.ecalLocalRecoAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.ecalLocalRecoFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ecalWeightUncalibRecHit_*_*', 
        'keep *_ecalFixedAlphaBetaFitUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep ESDataFramesSorted_ecalPreshowerDigis_*_*')
)

process.ecalLocalRecoRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep ESDataFramesSorted_ecalPreshowerDigis_*_*')
)

process.ecalOccupancyTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        DCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of entries recoreded by each FED'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT DCC entries')
        ),
        Digi = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('Digi occupancy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy %(sm)s')
        ),
        Digi1D = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the number of digis per event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT number of digis in event'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(3000.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        DigiAll = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Digi occupancy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s')
        ),
        DigiAllByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Digi occupancy for this lumisection.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s by lumi')
        ),
        DigiDCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('DCC digi occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sOT digi occupancy summary 1D')
        ),
        DigiProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of digi occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s projection eta')
        ),
        DigiProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of digi occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s projection phi')
        ),
        RecHitAll = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('Rec hit occupancy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s')
        ),
        RecHitProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the occupancy of all rec hits.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s projection eta')
        ),
        RecHitProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the rec hit occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s projection phi')
        ),
        RecHitThr1D = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT number of filtered rec hits in event'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(500.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        RecHitThrAll = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy for rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s')
        ),
        RecHitThrAllByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Filtered rechit cccupancy for this lumisection. Only includes rechits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s by lumi')
        ),
        RecHitThrProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s projection eta')
        ),
        RecHitThrProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s projection phi')
        ),
        RecHitThrmvp = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Filtered rechit occupancy correlation.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy correlation'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(500.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('Nrechits(z+,far)')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(500.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('Nrechits(z-,near)')
            )
        ),
        RecHitThrpm = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Filtered rechit occupancy difference.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy z+(far) - z-(near)'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(1000.0),
                low = cms.untracked.double(-1000.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('Nrechits(z+,far) - Nrechits(z-,near)')
            )
        ),
        TPDigiRCT = cms.untracked.PSet(
            btype = cms.untracked.string('RCT'),
            description = cms.untracked.string('Occupancy for TP digis with Et > 4.0 GeV in RCT coordinates'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal'),
            path = cms.untracked.string('EcalBarrel/EBOccupancyTask/TP digi thr occupancy in RCT coordinates')
        ),
        TPDigiThrAll = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Occupancy for TP digis with Et > 4.0 GeV.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s')
        ),
        TPDigiThrAllByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('TP digi occupancy for this lumisection. Only includes TP digis with Et > 4.0 GeV.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s by lumi')
        ),
        TPDigiThrProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the occupancy of TP digis with Et > 4.0 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s projection eta')
        ),
        TPDigiThrProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the occupancy of TP digis with Et > 4.0 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s projection phi')
        ),
        TrendNDigi = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the per-event number of digis.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of digis')
        ),
        TrendNRecHitThr = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the per-event number of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of filtered recHits')
        ),
        TrendNTPDigi = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the per-event number of TP digis with Et > 4.0 GeV.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of filtered TP digis')
        )
    ),
    params = cms.untracked.PSet(
        recHitThreshold = cms.untracked.double(0.5),
        tpThreshold = cms.untracked.double(4.0)
    )
)

process.ecalPresampleTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        Pedestal = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('2D distribution of mean presample value.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sPedestalOnlineTask/Gain12/%(prefix)sPOT pedestal %(sm)s G12')
        ),
        PedestalByLS = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('2D distribution of mean presample value for "current" LS.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sPedestalOnlineTask/Gain12/%(prefix)sPOT pedestal by LS %(sm)s G12')
        )
    ),
    params = cms.untracked.PSet(
        doPulseMaxCheck = cms.untracked.bool(True),
        nSamples = cms.untracked.int32(3),
        pulseMaxPosition = cms.untracked.int32(5)
    )
)

process.ecalRawDataTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        BXDCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between bunch crossing numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing DCC errors')
        ),
        BXDCCDiff = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between bunch crossing numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing DCC-GT'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(-100.0),
                nbins = cms.untracked.int32(200)
            )
        ),
        BXFE = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing FE errors'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(68.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(68),
                title = cms.untracked.string('iFE')
            )
        ),
        BXFEDiff = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing FE-DCC'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(-100.0),
                nbins = cms.untracked.int32(200)
            )
        ),
        BXFEInvalid = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing invalid value'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(69.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(69),
                title = cms.untracked.string('iFE')
            )
        ),
        BXSRP = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and SRP.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing SRP errors')
        ),
        BXTCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch corssing value mismatches between DCC and TCC.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing TCC errors')
        ),
        CRC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of CRC errors.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT CRC errors')
        ),
        DesyncByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of synchronization errors (L1A & BX mismatches) between DCC and FE in this lumi section.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT FE synchronization errors by lumi'),
            perLumi = cms.untracked.bool(True)
        ),
        DesyncTotal = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of synchronization errors (L1A & BX mismatches) between DCC and FE.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT total FE synchronization errors')
        ),
        EventTypeCalib = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing == 3490. This plot is filled using data from the physics data stream during physics runs. It is normal to have very few entries in these cases.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type calibration BX'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(24.5),
                labels = cms.untracked.vstring('UNKNOWN', 
                    'COSMIC', 
                    'BEAMH4', 
                    'BEAMH2', 
                    'MTCC', 
                    'LASER_STD', 
                    'LASER_POWER_SCAN', 
                    'LASER_DELAY_SCAN', 
                    'TESTPULSE_SCAN_MEM', 
                    'TESTPULSE_MGPA', 
                    'PEDESTAL_STD', 
                    'PEDESTAL_OFFSET_SCAN', 
                    'PEDESTAL_25NS_SCAN', 
                    'LED_STD', 
                    'PHYSICS_GLOBAL', 
                    'COSMICS_GLOBAL', 
                    'HALO_GLOBAL', 
                    'LASER_GAP', 
                    'TESTPULSE_GAP', 
                    'PEDESTAL_GAP', 
                    'LED_GAP', 
                    'PHYSICS_LOCAL', 
                    'COSMICS_LOCAL', 
                    'HALO_LOCAL', 
                    'CALIB_LOCAL'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(25)
            )
        ),
        EventTypePostCalib = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing > 3490.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type post calibration BX'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(24.5),
                labels = cms.untracked.vstring('UNKNOWN', 
                    'COSMIC', 
                    'BEAMH4', 
                    'BEAMH2', 
                    'MTCC', 
                    'LASER_STD', 
                    'LASER_POWER_SCAN', 
                    'LASER_DELAY_SCAN', 
                    'TESTPULSE_SCAN_MEM', 
                    'TESTPULSE_MGPA', 
                    'PEDESTAL_STD', 
                    'PEDESTAL_OFFSET_SCAN', 
                    'PEDESTAL_25NS_SCAN', 
                    'LED_STD', 
                    'PHYSICS_GLOBAL', 
                    'COSMICS_GLOBAL', 
                    'HALO_GLOBAL', 
                    'LASER_GAP', 
                    'TESTPULSE_GAP', 
                    'PEDESTAL_GAP', 
                    'LED_GAP', 
                    'PHYSICS_LOCAL', 
                    'COSMICS_LOCAL', 
                    'HALO_LOCAL', 
                    'CALIB_LOCAL'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(25)
            )
        ),
        EventTypePreCalib = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing < 3490'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type pre calibration BX'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(24.5),
                labels = cms.untracked.vstring('UNKNOWN', 
                    'COSMIC', 
                    'BEAMH4', 
                    'BEAMH2', 
                    'MTCC', 
                    'LASER_STD', 
                    'LASER_POWER_SCAN', 
                    'LASER_DELAY_SCAN', 
                    'TESTPULSE_SCAN_MEM', 
                    'TESTPULSE_MGPA', 
                    'PEDESTAL_STD', 
                    'PEDESTAL_OFFSET_SCAN', 
                    'PEDESTAL_25NS_SCAN', 
                    'LED_STD', 
                    'PHYSICS_GLOBAL', 
                    'COSMICS_GLOBAL', 
                    'HALO_GLOBAL', 
                    'LASER_GAP', 
                    'TESTPULSE_GAP', 
                    'PEDESTAL_GAP', 
                    'LED_GAP', 
                    'PHYSICS_LOCAL', 
                    'COSMICS_LOCAL', 
                    'HALO_LOCAL', 
                    'CALIB_LOCAL'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(25)
            )
        ),
        FEByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of front-ends in error status in this lumi section.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sStatusFlagsTask/FEStatus/%(prefix)sSFT weighted frontend errors by lumi'),
            perLumi = cms.untracked.bool(True)
        ),
        FEStatus = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('FE status counter.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sStatusFlagsTask/FEStatus/%(prefix)sSFT front-end status bits %(sm)s'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.5),
                labels = cms.untracked.vstring('ENABLED', 
                    'DISABLED', 
                    'TIMEOUT', 
                    'HEADERERROR', 
                    'CHANNELID', 
                    'LINKERROR', 
                    'BLOCKSIZE', 
                    'SUPPRESSED', 
                    'FIFOFULL', 
                    'L1ADESYNC', 
                    'BXDESYNC', 
                    'L1ABXDESYNC', 
                    'FIFOFULLL1ADESYNC', 
                    'HPARITY', 
                    'VPARITY', 
                    'FORCEDZS'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(16)
            )
        ),
        FEStatusErrMapByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('FE status error occupancy map for this lumisection. Nominal FE status flags such as ENABLED, SUPPRESSED, FIFOFILL, FIFOFULLL1ADESYNC, and FORCEDZS are NOT included.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sStatusFlagsTask/FEStatus/%(prefix)sSFT%(suffix)s front-end status error map by lumi'),
            perLumi = cms.untracked.bool(True)
        ),
        L1ADCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between L1A recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A DCC errors')
        ),
        L1AFE = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of L1A value mismatches between DCC and FE.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A FE errors'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(68.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(68),
                title = cms.untracked.string('iFE')
            )
        ),
        L1ASRP = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of L1A value mismatches between DCC and SRP.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A SRP errors')
        ),
        L1ATCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of L1A value mismatches between DCC and TCC.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A TCC errors')
        ),
        Orbit = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between LHC orbit numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT orbit number errors')
        ),
        OrbitDiff = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between LHC orbit numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT orbit number DCC-GT'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(-100.0),
                nbins = cms.untracked.int32(200)
            )
        ),
        RunNumber = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between run numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT run number errors')
        ),
        TrendNSyncErrors = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            cumulative = cms.untracked.bool(True),
            description = cms.untracked.string('Accumulated trend of the number of synchronization errors (L1A & BX mismatches) between DCC and FE in this run.'),
            kind = cms.untracked.string('TH1F'),
            online = cms.untracked.bool(True),
            otype = cms.untracked.string('Ecal'),
            path = cms.untracked.string('Ecal/Trends/RawDataTask accumulated number of sync errors')
        ),
        TriggerType = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between trigger type recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT trigger type errors')
        )
    )
)

process.ecalRecoSummaryTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        Chi2 = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Chi2 of the pulse reconstruction.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_Chi2'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        EnergyMax = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Maximum energy of the rechit.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_energyMax'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(-10.0),
                nbins = cms.untracked.int32(110)
            )
        ),
        RecoFlagAll = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Reconstruction flags from all rechits.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshort)s_recoFlag'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.5),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(16)
            )
        ),
        RecoFlagBasicCluster = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Reconstruction flags from rechits in basic clusters.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/basicClusters_recHits_%(subdetshort)s_recoFlag'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.5),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(16)
            )
        ),
        RecoFlagReduced = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Reconstruction flags from reduced rechits.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/redRecHits_%(subdetshort)s_recoFlag'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.5),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(16)
            )
        ),
        SwissCross = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Swiss cross.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('EB'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshort)s_E1oE4'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(1.5),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        Time = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Rechit time.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_time'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(50.0),
                low = cms.untracked.double(-50.0),
                nbins = cms.untracked.int32(100)
            )
        )
    ),
    params = cms.untracked.PSet(
        rechitThresholdEB = cms.untracked.double(0.8),
        rechitThresholdEE = cms.untracked.double(1.2)
    )
)

process.ecalSelectiveReadoutTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        DCCSize = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Distribution of the per-DCC data size.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT event size vs DCC'),
            yaxis = cms.untracked.PSet(
                edges = cms.untracked.vdouble(0.0, 0.0608, 0.1216, 0.1824, 0.2432, 
                    0.304, 0.3648, 0.4256, 0.4864, 0.5472, 
                    0.608, 0.608, 1.216, 1.824, 2.432, 
                    3.04, 3.648, 4.256, 4.864, 5.472, 
                    6.08, 6.688, 7.296, 7.904, 8.512, 
                    9.12, 9.728, 10.336, 10.944, 11.552, 
                    12.16, 12.768, 13.376, 13.984, 14.592, 
                    15.2, 15.808, 16.416, 17.024, 17.632, 
                    18.24, 18.848, 19.456, 20.064, 20.672, 
                    21.28, 21.888, 22.496, 23.104, 23.712, 
                    24.32, 24.928, 25.536, 26.144, 26.752, 
                    27.36, 27.968, 28.576, 29.184, 29.792, 
                    30.4, 31.008, 31.616, 32.224, 32.832, 
                    33.44, 34.048, 34.656, 35.264, 35.872, 
                    36.48, 37.088, 37.696, 38.304, 38.912, 
                    39.52, 40.128, 40.736, 41.344),
                title = cms.untracked.string('event size (kB)')
            )
        ),
        DCCSizeProf = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Mean and spread of the per-DCC data size.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT DCC event size'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('event size (kB)')
            )
        ),
        EventSize = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of per-DCC data size.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT event size%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(5.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('event size (kB)')
            )
        ),
        FRDropped = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Number of FR flagged but dropped towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT FR Flagged Dropped Readout Number%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(20),
                title = cms.untracked.string('number of towers')
            )
        ),
        FRDroppedMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Number of FR flagged but dropped towers.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT FR flagged dropped counter%(suffix)s')
        ),
        FlagCounterMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy of any SR flag.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower flag counter%(suffix)s')
        ),
        FullReadout = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Number of FR flags per event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT full readout SR Flags Number%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(200.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('number of towers')
            )
        ),
        FullReadoutMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy with FR flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower full readout counter%(suffix)s')
        ),
        HighIntOutput = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Output of the ZS filter for high interest towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT high interest ZS filter output%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(60.0),
                low = cms.untracked.double(-60.0),
                nbins = cms.untracked.int32(120),
                title = cms.untracked.string('ADC counts*4')
            )
        ),
        HighIntPayload = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Total data size from all high interest towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT high interest payload%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(3.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('event size (kB)')
            )
        ),
        LowIntOutput = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Output of the ZS filter for low interest towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT low interest ZS filter output%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(60.0),
                low = cms.untracked.double(-60.0),
                nbins = cms.untracked.int32(120),
                title = cms.untracked.string('ADC counts*4')
            )
        ),
        LowIntPayload = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Total data size from all low interest towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT low interest payload%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(3.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('event size (kB)')
            )
        ),
        RUForcedMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy of FORCED flag.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT RU with forced SR counter%(suffix)s')
        ),
        TowerSize = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean data size from each readout unit.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT tower event size%(suffix)s'),
            zaxis = cms.untracked.PSet(
                title = cms.untracked.string('size (bytes)')
            )
        ),
        ZS1Map = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy with ZS1 flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower ZS1 counter%(suffix)s')
        ),
        ZSFullReadout = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Number of ZS flagged but fully read out towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT ZS Flagged Fully Readout Number%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(20),
                title = cms.untracked.string('number of towers')
            )
        ),
        ZSFullReadoutMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Number of ZS flagged but fully read out towers.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT ZS flagged full readout counter%(suffix)s')
        ),
        ZSMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy of ZS1 and ZS2 flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower ZS1+ZS2 counter%(suffix)s')
        )
    ),
    params = cms.untracked.PSet(
        DCCZS1stSample = cms.untracked.int32(2),
        ZSFIRWeights = cms.untracked.vdouble(-0.374, -0.374, -0.3629, 0.2721, 0.4681, 
            0.3707),
        useCondDb = cms.untracked.bool(False)
    )
)

process.ecalTimingTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        Chi2 = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Chi2 of the pulse reconstruction.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT %(subdetshortsig)s Chi2'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        Time1D = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing 1D %(sm)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(12.5),
                low = cms.untracked.double(-12.5),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeAll = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing 1D summary%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(12.5),
                low = cms.untracked.double(-12.5),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeAllMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. Hits with |t| > 7.0 ns are discarded. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing map%(suffix)s'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(7.0),
                low = cms.untracked.double(-7.0),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeAmp = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Correlation between hit timing and energy. Only hits with GOOD or OUT_OF_TIME reconstruction flags are used.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing vs amplitude %(sm)s'),
            xaxis = cms.untracked.PSet(
                edges = cms.untracked.vdouble(0.316227766017, 0.354813389234, 0.398107170553, 0.446683592151, 0.501187233627, 
                    0.56234132519, 0.63095734448, 0.707945784384, 0.794328234724, 0.891250938134, 
                    1.0, 1.1220184543, 1.25892541179, 1.41253754462, 1.58489319246, 
                    1.77827941004, 1.99526231497, 2.23872113857, 2.51188643151, 2.81838293126, 
                    3.16227766017, 3.54813389234, 3.98107170553, 4.46683592151, 5.01187233627, 
                    5.6234132519, 6.3095734448, 7.07945784384, 7.94328234724, 8.91250938134, 
                    10.0, 11.220184543, 12.5892541179, 14.1253754462, 15.8489319246, 
                    17.7827941004, 19.9526231497, 22.3872113857, 25.1188643151, 28.1838293126, 
                    31.6227766017, 35.4813389234, 39.8107170553, 44.6683592151, 50.1187233627, 
                    56.234132519, 63.095734448, 70.7945784384, 79.4328234724, 89.1250938134),
                title = cms.untracked.string('energy (GeV)')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(50.0),
                low = cms.untracked.double(-50.0),
                nbins = cms.untracked.int32(200),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeAmpAll = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Correlation between hit timing and energy. Only hits with GOOD or OUT_OF_TIME reconstruction flags are used.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing vs amplitude summary%(suffix)s'),
            xaxis = cms.untracked.PSet(
                edges = cms.untracked.vdouble(0.316227766017, 0.354813389234, 0.398107170553, 0.446683592151, 0.501187233627, 
                    0.56234132519, 0.63095734448, 0.707945784384, 0.794328234724, 0.891250938134, 
                    1.0, 1.1220184543, 1.25892541179, 1.41253754462, 1.58489319246, 
                    1.77827941004, 1.99526231497, 2.23872113857, 2.51188643151, 2.81838293126, 
                    3.16227766017, 3.54813389234, 3.98107170553, 4.46683592151, 5.01187233627, 
                    5.6234132519, 6.3095734448, 7.07945784384, 7.94328234724, 8.91250938134, 
                    10.0, 11.220184543, 12.5892541179, 14.1253754462, 15.8489319246, 
                    17.7827941004, 19.9526231497, 22.3872113857, 25.1188643151, 28.1838293126, 
                    31.6227766017, 35.4813389234, 39.8107170553, 44.6683592151, 50.1187233627, 
                    56.234132519, 63.095734448, 70.7945784384, 79.4328234724, 89.1250938134),
                title = cms.untracked.string('energy (GeV)')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(50.0),
                low = cms.untracked.double(-50.0),
                nbins = cms.untracked.int32(200),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeAmpBXm = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Correlation between in-time amplitude and BX-1 out-of-time amplitude. Only events with kGood reconstruction flag set, energy > ( EB:20.000000, EE:15.000000 ) GeV, and chi2 < ( EB:16.000000, EE:50.000000 ) are used.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT in-time vs BX-1 amplitude%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(1000.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(250),
                title = cms.untracked.string('In-time amplitude [ADC]')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('Amplitude BX-1 [ADC]')
            )
        ),
        TimeAmpBXp = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Correlation between in-time amplitude and BX+1 out-of-time amplitude. Only events with kGood reconstruction flag set, energy > ( EB:20.000000, EE:15.000000 ) GeV, and chi2 < ( EB:16.000000, EE:50.000000 ) are used.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT in-time vs BX+1 amplitude%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(1000.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(250),
                title = cms.untracked.string('In-time amplitude [ADC]')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('Amplitude BX+1 [ADC]')
            )
        ),
        TimeMap = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('2D distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. Hits with |t| > 12.5 ns are discarded. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing %(sm)s'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(12.5),
                low = cms.untracked.double(-12.5),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeMapByLS = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('2D distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. Hits with |t| > 12.5 ns are discarded. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing by LS %(sm)s'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(12.5),
                low = cms.untracked.double(-12.5),
                title = cms.untracked.string('time (ns)')
            )
        )
    ),
    params = cms.untracked.PSet(
        chi2ThresholdEB = cms.untracked.double(16.0),
        chi2ThresholdEE = cms.untracked.double(50.0),
        energyThresholdEB = cms.untracked.double(1.0),
        energyThresholdEE = cms.untracked.double(3.0)
    )
)

process.ecalTrigPrimTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        EmulMaxIndex = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the index of emulated TP with the highest Et value.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT max TP matching index%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(5.5),
                labels = cms.untracked.vstring('no maximum', 
                    '0', 
                    '1', 
                    '2', 
                    '3', 
                    '4'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(6),
                title = cms.untracked.string('TP index')
            )
        ),
        EtEmulError = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulError %(sm)s')
        ),
        EtMaxEmul = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the maximum Et value within one emulated TP'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/Emulated/%(prefix)sTTT Et spectrum Emulated Digis max%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('TP Et')
            )
        ),
        EtReal = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the trigger primitive Et.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et spectrum Real Digis%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('TP Et')
            )
        ),
        EtRealMap = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('2D distribution of the trigger primitive Et.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et map Real Digis %(sm)s'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('TP Et')
            )
        ),
        EtSummary = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('2D distribution of the trigger primitive Et.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sTTT%(suffix)s Et trigger tower summary'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('TP Et')
            )
        ),
        EtSummaryByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('2D distribution of the Trigger Primitives Et for this lumisection.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sTTT%(suffix)s Et trigger tower summary by lumi'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('TP Et')
            )
        ),
        EtVsBx = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Mean TP Et in different bunch crossing intervals. This plot is filled by data from physics data stream. It is normal to have very little entries in BX >= 3490.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et vs bx Real Digis%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(16.0),
                labels = cms.untracked.vstring('1', 
                    '271', 
                    '541', 
                    '892', 
                    '1162', 
                    '1432', 
                    '1783', 
                    '2053', 
                    '2323', 
                    '2674', 
                    '2944', 
                    '3214', 
                    '3446', 
                    '3490', 
                    '3491', 
                    '3565'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(16),
                title = cms.untracked.string('bunch crossing')
            ),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('TP Et')
            )
        ),
        FGEmulError = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulFineGrainVetoError %(sm)s')
        ),
        HighIntMap = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Tower occupancy of high interest flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower high interest counter%(suffix)s')
        ),
        LowIntMap = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Tower occupancy of low interest flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower low interest counter%(suffix)s')
        ),
        MatchedIndex = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Counter for TP "timing" (= index withing the emulated TP whose Et matched that of the real TP)'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulMatch %(sm)s'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(6.0),
                labels = cms.untracked.vstring('no emul', 
                    '0', 
                    '1', 
                    '2', 
                    '3', 
                    '4'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(6),
                title = cms.untracked.string('TP index')
            )
        ),
        MedIntMap = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Tower occupancy of medium interest flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower med interest counter%(suffix)s')
        ),
        OccVsBx = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('TP occupancy in different bunch crossing intervals. This plot is filled by data from physics data stream. It is normal to have very little entries in BX >= 3490.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT TP occupancy vs bx Real Digis%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(16.0),
                labels = cms.untracked.vstring('1', 
                    '271', 
                    '541', 
                    '892', 
                    '1162', 
                    '1432', 
                    '1783', 
                    '2053', 
                    '2323', 
                    '2674', 
                    '2944', 
                    '3214', 
                    '3446', 
                    '3490', 
                    '3491', 
                    '3565'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(16),
                title = cms.untracked.string('bunch crossing')
            )
        ),
        RealvEmulEt = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Real data VS emulated TP Et (in-time)'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Real vs Emulated TP Et%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('Emulated TP Et (ADC)')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('Real data TP Et (ADC)')
            )
        ),
        TTFMismatch = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT TT flag mismatch%(suffix)s')
        ),
        TTFlags = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Distribution of the trigger tower flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT TT Flags%(suffix)s'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(7.5),
                labels = cms.untracked.vstring('0', 
                    '1', 
                    '2', 
                    '3', 
                    '4', 
                    '5', 
                    '6', 
                    '7'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(8),
                title = cms.untracked.string('TT flag')
            )
        ),
        TTFlags4 = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Occupancy for TP digis with TTF=4.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT TTF4 Occupancy%(suffix)s')
        ),
        TTFlagsVsEt = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('2D histograms of of TT flags of a corresponding to a given TT vs Et measured by that tower.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT TT Flags vs Et%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(50.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('TP Et')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(7.5),
                labels = cms.untracked.vstring('0', 
                    '1', 
                    '2', 
                    '3', 
                    '4', 
                    '5', 
                    '6', 
                    '7'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(8),
                title = cms.untracked.string('TT flag')
            )
        ),
        TTMaskMap = cms.untracked.PSet(
            btype = cms.untracked.string('PseudoStrip'),
            description = cms.untracked.string('Trigger tower and pseudo-strip masking status: a TT or strip is red if it is masked'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/TTStatus/%(prefix)sTTT TT Masking Status%(sm)s')
        ),
        TTMaskMapAll = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Trigger tower masking status: a TT is red if it is masked.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT TT Masking Status%(suffix)s')
        )
    ),
    params = cms.untracked.PSet(
        runOnEmul = cms.untracked.bool(False)
    )
)

process.ecal_digi_parameters = cms.PSet(
    EBCorrNoiseMatrixG01 = cms.vdouble(1.0, 0.73354, 0.64442, 0.58851, 0.55425, 
        0.53082, 0.51916, 0.51097, 0.50732, 0.50409),
    EBCorrNoiseMatrixG06 = cms.vdouble(1.0, 0.70946, 0.58021, 0.49846, 0.45006, 
        0.41366, 0.39699, 0.38478, 0.37847, 0.37055),
    EBCorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71073, 0.55721, 0.46089, 0.40449, 
        0.35931, 0.33924, 0.32439, 0.31581, 0.30481),
    EBdigiCollection = cms.string(''),
    EECorrNoiseMatrixG01 = cms.vdouble(1.0, 0.72698, 0.62048, 0.55691, 0.51848, 
        0.49147, 0.47813, 0.47007, 0.46621, 0.46265),
    EECorrNoiseMatrixG06 = cms.vdouble(1.0, 0.71217, 0.47464, 0.34056, 0.26282, 
        0.20287, 0.17734, 0.16256, 0.15618, 0.14443),
    EECorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71373, 0.44825, 0.30152, 0.21609, 
        0.14786, 0.11772, 0.10165, 0.09465, 0.08098),
    EEdigiCollection = cms.string(''),
    ESdigiCollection = cms.string(''),
    EcalPreMixStage1 = cms.bool(False),
    EcalPreMixStage2 = cms.bool(False),
    UseLCcorrection = cms.untracked.bool(True)
)

process.ecal_pulse_shape_covariances = cms.PSet(
    EBPulseShapeCovariance = cms.vdouble(3.001e-06, 1.233e-05, 0.0, -4.416e-06, -4.571e-06, 
        -3.614e-06, -2.636e-06, -1.286e-06, -8.41e-07, -5.296e-07, 
        0.0, 0.0, 1.233e-05, 6.154e-05, 0.0, 
        -2.2e-05, -2.309e-05, -1.838e-05, -1.373e-05, -7.334e-06, 
        -5.088e-06, -3.745e-06, -2.428e-06, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, -4.416e-06, -2.2e-05, 0.0, 8.319e-06, 
        8.545e-06, 6.792e-06, 5.059e-06, 2.678e-06, 1.816e-06, 
        1.223e-06, 8.245e-07, 5.589e-07, -4.571e-06, -2.309e-05, 
        0.0, 8.545e-06, 9.182e-06, 7.219e-06, 5.388e-06, 
        2.853e-06, 1.944e-06, 1.324e-06, 9.083e-07, 6.335e-07, 
        -3.614e-06, -1.838e-05, 0.0, 6.792e-06, 7.219e-06, 
        6.016e-06, 4.437e-06, 2.385e-06, 1.636e-06, 1.118e-06, 
        7.754e-07, 5.556e-07, -2.636e-06, -1.373e-05, 0.0, 
        5.059e-06, 5.388e-06, 4.437e-06, 3.602e-06, 1.917e-06, 
        1.322e-06, 9.079e-07, 6.529e-07, 4.752e-07, -1.286e-06, 
        -7.334e-06, 0.0, 2.678e-06, 2.853e-06, 2.385e-06, 
        1.917e-06, 1.375e-06, 9.1e-07, 6.455e-07, 4.693e-07, 
        3.657e-07, -8.41e-07, -5.088e-06, 0.0, 1.816e-06, 
        1.944e-06, 1.636e-06, 1.322e-06, 9.1e-07, 9.115e-07, 
        6.062e-07, 4.436e-07, 3.422e-07, -5.296e-07, -3.745e-06, 
        0.0, 1.223e-06, 1.324e-06, 1.118e-06, 9.079e-07, 
        6.455e-07, 6.062e-07, 7.217e-07, 4.862e-07, 3.768e-07, 
        0.0, -2.428e-06, 0.0, 8.245e-07, 9.083e-07, 
        7.754e-07, 6.529e-07, 4.693e-07, 4.436e-07, 4.862e-07, 
        6.509e-07, 4.418e-07, 0.0, 0.0, 0.0, 
        5.589e-07, 6.335e-07, 5.556e-07, 4.752e-07, 3.657e-07, 
        3.422e-07, 3.768e-07, 4.418e-07, 6.142e-07),
    EEPulseShapeCovariance = cms.vdouble(3.941e-05, 3.333e-05, 0.0, -1.449e-05, -1.661e-05, 
        -1.424e-05, -1.183e-05, -6.842e-06, -4.915e-06, -3.411e-06, 
        0.0, 0.0, 3.333e-05, 2.862e-05, 0.0, 
        -1.244e-05, -1.431e-05, -1.233e-05, -1.032e-05, -5.883e-06, 
        -4.154e-06, -2.902e-06, -2.128e-06, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, -1.449e-05, -1.244e-05, 0.0, 5.84e-06, 
        6.649e-06, 5.72e-06, 4.812e-06, 2.708e-06, 1.869e-06, 
        1.33e-06, 9.186e-07, 6.446e-07, -1.661e-05, -1.431e-05, 
        0.0, 6.649e-06, 7.966e-06, 6.898e-06, 5.794e-06, 
        3.157e-06, 2.184e-06, 1.567e-06, 1.084e-06, 7.575e-07, 
        -1.424e-05, -1.233e-05, 0.0, 5.72e-06, 6.898e-06, 
        6.341e-06, 5.347e-06, 2.859e-06, 1.991e-06, 1.431e-06, 
        9.839e-07, 6.886e-07, -1.183e-05, -1.032e-05, 0.0, 
        4.812e-06, 5.794e-06, 5.347e-06, 4.854e-06, 2.628e-06, 
        1.809e-06, 1.289e-06, 9.02e-07, 6.146e-07, -6.842e-06, 
        -5.883e-06, 0.0, 2.708e-06, 3.157e-06, 2.859e-06, 
        2.628e-06, 1.863e-06, 1.296e-06, 8.882e-07, 6.108e-07, 
        4.283e-07, -4.915e-06, -4.154e-06, 0.0, 1.869e-06, 
        2.184e-06, 1.991e-06, 1.809e-06, 1.296e-06, 1.217e-06, 
        8.669e-07, 5.751e-07, 3.882e-07, -3.411e-06, -2.902e-06, 
        0.0, 1.33e-06, 1.567e-06, 1.431e-06, 1.289e-06, 
        8.882e-07, 8.669e-07, 9.522e-07, 6.717e-07, 4.293e-07, 
        0.0, -2.128e-06, 0.0, 9.186e-07, 1.084e-06, 
        9.839e-07, 9.02e-07, 6.108e-07, 5.751e-07, 6.717e-07, 
        7.911e-07, 5.493e-07, 0.0, 0.0, 0.0, 
        6.446e-07, 7.575e-07, 6.886e-07, 6.146e-07, 4.283e-07, 
        3.882e-07, 4.293e-07, 5.493e-07, 7.027e-07)
)

process.ecal_pulse_shape_parameters = cms.PSet(
    EBCorrNoiseMatrixG01 = cms.vdouble(1.0, 0.73354, 0.64442, 0.58851, 0.55425, 
        0.53082, 0.51916, 0.51097, 0.50732, 0.50409),
    EBCorrNoiseMatrixG06 = cms.vdouble(1.0, 0.70946, 0.58021, 0.49846, 0.45006, 
        0.41366, 0.39699, 0.38478, 0.37847, 0.37055),
    EBCorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71073, 0.55721, 0.46089, 0.40449, 
        0.35931, 0.33924, 0.32439, 0.31581, 0.30481),
    EBPulseShapeCovariance = cms.vdouble(3.001e-06, 1.233e-05, 0.0, -4.416e-06, -4.571e-06, 
        -3.614e-06, -2.636e-06, -1.286e-06, -8.41e-07, -5.296e-07, 
        0.0, 0.0, 1.233e-05, 6.154e-05, 0.0, 
        -2.2e-05, -2.309e-05, -1.838e-05, -1.373e-05, -7.334e-06, 
        -5.088e-06, -3.745e-06, -2.428e-06, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, -4.416e-06, -2.2e-05, 0.0, 8.319e-06, 
        8.545e-06, 6.792e-06, 5.059e-06, 2.678e-06, 1.816e-06, 
        1.223e-06, 8.245e-07, 5.589e-07, -4.571e-06, -2.309e-05, 
        0.0, 8.545e-06, 9.182e-06, 7.219e-06, 5.388e-06, 
        2.853e-06, 1.944e-06, 1.324e-06, 9.083e-07, 6.335e-07, 
        -3.614e-06, -1.838e-05, 0.0, 6.792e-06, 7.219e-06, 
        6.016e-06, 4.437e-06, 2.385e-06, 1.636e-06, 1.118e-06, 
        7.754e-07, 5.556e-07, -2.636e-06, -1.373e-05, 0.0, 
        5.059e-06, 5.388e-06, 4.437e-06, 3.602e-06, 1.917e-06, 
        1.322e-06, 9.079e-07, 6.529e-07, 4.752e-07, -1.286e-06, 
        -7.334e-06, 0.0, 2.678e-06, 2.853e-06, 2.385e-06, 
        1.917e-06, 1.375e-06, 9.1e-07, 6.455e-07, 4.693e-07, 
        3.657e-07, -8.41e-07, -5.088e-06, 0.0, 1.816e-06, 
        1.944e-06, 1.636e-06, 1.322e-06, 9.1e-07, 9.115e-07, 
        6.062e-07, 4.436e-07, 3.422e-07, -5.296e-07, -3.745e-06, 
        0.0, 1.223e-06, 1.324e-06, 1.118e-06, 9.079e-07, 
        6.455e-07, 6.062e-07, 7.217e-07, 4.862e-07, 3.768e-07, 
        0.0, -2.428e-06, 0.0, 8.245e-07, 9.083e-07, 
        7.754e-07, 6.529e-07, 4.693e-07, 4.436e-07, 4.862e-07, 
        6.509e-07, 4.418e-07, 0.0, 0.0, 0.0, 
        5.589e-07, 6.335e-07, 5.556e-07, 4.752e-07, 3.657e-07, 
        3.422e-07, 3.768e-07, 4.418e-07, 6.142e-07),
    EBPulseShapeTemplate = cms.vdouble(0.0113979, 0.758151, 1.0, 0.887744, 0.673548, 
        0.474332, 0.319561, 0.215144, 0.147464, 0.101087, 
        0.0693181, 0.0475044),
    EBdigiCollection = cms.string(''),
    EECorrNoiseMatrixG01 = cms.vdouble(1.0, 0.72698, 0.62048, 0.55691, 0.51848, 
        0.49147, 0.47813, 0.47007, 0.46621, 0.46265),
    EECorrNoiseMatrixG06 = cms.vdouble(1.0, 0.71217, 0.47464, 0.34056, 0.26282, 
        0.20287, 0.17734, 0.16256, 0.15618, 0.14443),
    EECorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71373, 0.44825, 0.30152, 0.21609, 
        0.14786, 0.11772, 0.10165, 0.09465, 0.08098),
    EEPulseShapeCovariance = cms.vdouble(3.941e-05, 3.333e-05, 0.0, -1.449e-05, -1.661e-05, 
        -1.424e-05, -1.183e-05, -6.842e-06, -4.915e-06, -3.411e-06, 
        0.0, 0.0, 3.333e-05, 2.862e-05, 0.0, 
        -1.244e-05, -1.431e-05, -1.233e-05, -1.032e-05, -5.883e-06, 
        -4.154e-06, -2.902e-06, -2.128e-06, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, -1.449e-05, -1.244e-05, 0.0, 5.84e-06, 
        6.649e-06, 5.72e-06, 4.812e-06, 2.708e-06, 1.869e-06, 
        1.33e-06, 9.186e-07, 6.446e-07, -1.661e-05, -1.431e-05, 
        0.0, 6.649e-06, 7.966e-06, 6.898e-06, 5.794e-06, 
        3.157e-06, 2.184e-06, 1.567e-06, 1.084e-06, 7.575e-07, 
        -1.424e-05, -1.233e-05, 0.0, 5.72e-06, 6.898e-06, 
        6.341e-06, 5.347e-06, 2.859e-06, 1.991e-06, 1.431e-06, 
        9.839e-07, 6.886e-07, -1.183e-05, -1.032e-05, 0.0, 
        4.812e-06, 5.794e-06, 5.347e-06, 4.854e-06, 2.628e-06, 
        1.809e-06, 1.289e-06, 9.02e-07, 6.146e-07, -6.842e-06, 
        -5.883e-06, 0.0, 2.708e-06, 3.157e-06, 2.859e-06, 
        2.628e-06, 1.863e-06, 1.296e-06, 8.882e-07, 6.108e-07, 
        4.283e-07, -4.915e-06, -4.154e-06, 0.0, 1.869e-06, 
        2.184e-06, 1.991e-06, 1.809e-06, 1.296e-06, 1.217e-06, 
        8.669e-07, 5.751e-07, 3.882e-07, -3.411e-06, -2.902e-06, 
        0.0, 1.33e-06, 1.567e-06, 1.431e-06, 1.289e-06, 
        8.882e-07, 8.669e-07, 9.522e-07, 6.717e-07, 4.293e-07, 
        0.0, -2.128e-06, 0.0, 9.186e-07, 1.084e-06, 
        9.839e-07, 9.02e-07, 6.108e-07, 5.751e-07, 6.717e-07, 
        7.911e-07, 5.493e-07, 0.0, 0.0, 0.0, 
        6.446e-07, 7.575e-07, 6.886e-07, 6.146e-07, 4.283e-07, 
        3.882e-07, 4.293e-07, 5.493e-07, 7.027e-07),
    EEPulseShapeTemplate = cms.vdouble(0.116442, 0.756246, 1.0, 0.897182, 0.686831, 
        0.491506, 0.344111, 0.245731, 0.174115, 0.123361, 
        0.0874288, 0.061957),
    EEdigiCollection = cms.string(''),
    ESdigiCollection = cms.string(''),
    EcalPreMixStage1 = cms.bool(False),
    EcalPreMixStage2 = cms.bool(False),
    UseLCcorrection = cms.untracked.bool(True)
)

process.ecal_pulse_shape_templates = cms.PSet(
    EBPulseShapeTemplate = cms.vdouble(0.0113979, 0.758151, 1.0, 0.887744, 0.673548, 
        0.474332, 0.319561, 0.215144, 0.147464, 0.101087, 
        0.0693181, 0.0475044),
    EEPulseShapeTemplate = cms.vdouble(0.116442, 0.756246, 1.0, 0.897182, 0.686831, 
        0.491506, 0.344111, 0.245731, 0.174115, 0.123361, 
        0.0874288, 0.061957)
)

process.ecal_time_digi_parameters = cms.PSet(
    EBtimeDigiCollection = cms.string('EBTimeDigi'),
    EEtimeDigiCollection = cms.string('EETimeDigi'),
    hitsProducerEB = cms.InputTag("g4SimHits","EcalHitsEB"),
    hitsProducerEE = cms.InputTag("g4SimHits","EcalHitsEE"),
    timeLayerBarrel = cms.int32(7),
    timeLayerEndcap = cms.int32(3)
)

process.egHLTOffBaseEleTrigCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('default')
)

process.egHLTOffBasePhoTrigCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('default')
)

process.egHLTOffDQMBinData = cms.PSet(
    HLTenergy = cms.PSet(
        max = cms.double(300.0),
        min = cms.double(0.0),
        nr = cms.int32(60)
    ),
    HLTeta = cms.PSet(
        max = cms.double(3.0),
        min = cms.double(-3.0),
        nr = cms.int32(30)
    ),
    HLTphi = cms.PSet(
        max = cms.double(3.14),
        min = cms.double(-3.14),
        nr = cms.int32(16)
    ),
    charge = cms.PSet(
        max = cms.double(1.5),
        min = cms.double(-1.5),
        nr = cms.int32(2)
    ),
    dEtaIn = cms.PSet(
        max = cms.double(0.02),
        min = cms.double(-0.02),
        nr = cms.int32(10)
    ),
    dPhiIn = cms.PSet(
        max = cms.double(0.15),
        min = cms.double(-0.15),
        nr = cms.int32(10)
    ),
    deltaE = cms.PSet(
        max = cms.double(50.0),
        min = cms.double(-50.0),
        nr = cms.int32(50)
    ),
    e1x5 = cms.PSet(
        max = cms.double(1.1),
        min = cms.double(-0.1),
        nr = cms.int32(24)
    ),
    e2x5 = cms.PSet(
        max = cms.double(1.1),
        min = cms.double(-0.1),
        nr = cms.int32(24)
    ),
    eOverP = cms.PSet(
        max = cms.double(5),
        min = cms.double(-1.0),
        nr = cms.int32(12)
    ),
    energy = cms.PSet(
        max = cms.double(300.0),
        min = cms.double(0.0),
        nr = cms.int32(60)
    ),
    err = cms.PSet(
        max = cms.double(100.5),
        min = cms.double(-0.5),
        nr = cms.int32(101)
    ),
    et = cms.PSet(
        max = cms.double(155.0),
        min = cms.double(-5.0),
        nr = cms.int32(80)
    ),
    etHigh = cms.PSet(
        max = cms.double(2025),
        min = cms.double(25),
        nr = cms.int32(30)
    ),
    eta = cms.PSet(
        max = cms.double(3.0),
        min = cms.double(-3.0),
        nr = cms.int32(30)
    ),
    etaVsPhi = cms.PSet(
        nrX = cms.int32(15),
        nrY = cms.int32(8),
        xMax = cms.double(3.0),
        xMin = cms.double(-3.0),
        yMax = cms.double(3.14),
        yMin = cms.double(-3.14)
    ),
    hOverE = cms.PSet(
        max = cms.double(0.1),
        min = cms.double(0.0),
        nr = cms.int32(30)
    ),
    invEInvP = cms.PSet(
        max = cms.double(0.2),
        min = cms.double(-0.2),
        nr = cms.int32(10)
    ),
    isolEm = cms.PSet(
        max = cms.double(10),
        min = cms.double(-1),
        nr = cms.int32(22)
    ),
    isolHad = cms.PSet(
        max = cms.double(10),
        min = cms.double(-1),
        nr = cms.int32(22)
    ),
    isolNrTrks = cms.PSet(
        max = cms.double(10),
        min = cms.double(-1),
        nr = cms.int32(22)
    ),
    isolPtTrks = cms.PSet(
        max = cms.double(10),
        min = cms.double(-1),
        nr = cms.int32(22)
    ),
    mass = cms.PSet(
        max = cms.double(120),
        min = cms.double(-10.0),
        nr = cms.int32(26)
    ),
    massHigh = cms.PSet(
        max = cms.double(5000),
        min = cms.double(0.0),
        nr = cms.int32(20)
    ),
    maxr9 = cms.PSet(
        max = cms.double(1.1),
        min = cms.double(-0.1),
        nr = cms.int32(24)
    ),
    minr9 = cms.PSet(
        max = cms.double(1.1),
        min = cms.double(-0.1),
        nr = cms.int32(24)
    ),
    nVertex = cms.PSet(
        max = cms.double(21.0),
        min = cms.double(-1.0),
        nr = cms.int32(22)
    ),
    phi = cms.PSet(
        max = cms.double(3.14),
        min = cms.double(-3.14),
        nr = cms.int32(16)
    ),
    sigEtaEta = cms.PSet(
        max = cms.double(0.05),
        min = cms.double(-0.01),
        nr = cms.int32(30)
    )
)

process.egHLTOffDoubleEleEt10SWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoDoubleElectronEt10PixelMatchFilter')
)

process.egHLTOffDoubleEleEt5Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(5.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(5.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoDoubleElectronEt5PixelMatchFilter')
)

process.egHLTOffDoublePhoEt10Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoDoublePhotonEt10HcalIsolFilter')
)

process.egHLTOffDoublePhoEt15Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoDoublePhotonEt15HcalIsolFilter')
)

process.egHLTOffDoublePhoEt15VLEICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(5.0),
        maxHLTIsolEmOverEt = cms.double(0.2),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(5.0),
        maxHLTIsolEmOverEt = cms.double(0.2),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTVLEIDoublePhotonEt15HcalIsolFilter')
)

process.egHLTOffDoublePhotonEt33_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:maxr9:hadem'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(33.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:maxr9:hadem'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(33.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltDoublePhoton33EgammaLHEDoubleFilter')
)

process.egHLTOffEle90_NoSpikeFilter_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hadem'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(90.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hadem'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(90.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle90NoSpikeFilterPixelMatchFilter')
)

process.egHLTOffEleBarrelCuts = cms.PSet(
    cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
    isolEmConstTerm = cms.double(3),
    isolEmGradStart = cms.double(0.0),
    isolEmGradTerm = cms.double(0.03),
    isolHadConstTerm = cms.double(3),
    isolHadGradStart = cms.double(0.0),
    isolHadGradTerm = cms.double(0.03),
    isolNrTrksConstTerm = cms.int32(0),
    isolPtTrksConstTerm = cms.double(7.5),
    isolPtTrksGradStart = cms.double(0.0),
    isolPtTrksGradTerm = cms.double(0.0),
    maxCTFTrkChi2NDof = cms.double(99999),
    maxCTFTrkInnerRadius = cms.double(99999),
    maxDEtaIn = cms.double(0.004),
    maxDPhiIn = cms.double(0.06),
    maxEta = cms.double(1.442),
    maxHLTDEtaIn = cms.double(0.008),
    maxHLTDPhiIn = cms.double(0.1),
    maxHLTInvEInvP = cms.double(9999),
    maxHLTIsolEm = cms.double(0),
    maxHLTIsolEmOverEt = cms.double(0.07),
    maxHLTIsolEmOverEt2 = cms.double(0),
    maxHLTIsolHad = cms.double(0),
    maxHLTIsolHadOverEt = cms.double(0.1),
    maxHLTIsolHadOverEt2 = cms.double(0),
    maxHLTIsolTrksEle = cms.double(0),
    maxHLTIsolTrksEleOverPt = cms.double(0.09),
    maxHLTIsolTrksEleOverPt2 = cms.double(0),
    maxHLTIsolTrksPho = cms.double(0),
    maxHLTIsolTrksPhoOverPt = cms.double(0),
    maxHLTIsolTrksPhoOverPt2 = cms.double(0),
    maxHadEnergy = cms.double(0),
    maxHadem = cms.double(0.04),
    maxInvEInvP = cms.double(0.1),
    maxNrCTFTrkHitsLost = cms.int32(999),
    maxR9 = cms.double(0.98),
    maxSigmaEtaEta = cms.double(0.01),
    maxSigmaIEtaIEta = cms.double(0.01),
    minCTFTrkOuterRadius = cms.double(0.0),
    minEt = cms.double(15),
    minEta = cms.double(0.0),
    minNrCTFTrkHits = cms.int32(7),
    minR9 = cms.double(0.0),
    requirePixelHitsIfOuterInOuter = cms.bool(True)
)

process.egHLTOffEleCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    )
)

process.egHLTOffEleEndcapCuts = cms.PSet(
    cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
    isolEmConstTerm = cms.double(3),
    isolEmGradStart = cms.double(0.0),
    isolEmGradTerm = cms.double(0.03),
    isolHadConstTerm = cms.double(3),
    isolHadGradStart = cms.double(0.0),
    isolHadGradTerm = cms.double(0.03),
    isolNrTrksConstTerm = cms.int32(0),
    isolPtTrksConstTerm = cms.double(15),
    isolPtTrksGradStart = cms.double(0.0),
    isolPtTrksGradTerm = cms.double(0.0),
    maxCTFTrkChi2NDof = cms.double(99999),
    maxCTFTrkInnerRadius = cms.double(9999.0),
    maxDEtaIn = cms.double(0.007),
    maxDPhiIn = cms.double(0.03),
    maxEta = cms.double(2.5),
    maxHLTDEtaIn = cms.double(0.008),
    maxHLTDPhiIn = cms.double(0.1),
    maxHLTInvEInvP = cms.double(9999),
    maxHLTIsolEm = cms.double(0),
    maxHLTIsolEmOverEt = cms.double(0.05),
    maxHLTIsolEmOverEt2 = cms.double(0),
    maxHLTIsolHad = cms.double(0),
    maxHLTIsolHadOverEt = cms.double(0.025),
    maxHLTIsolHadOverEt2 = cms.double(0),
    maxHLTIsolTrksEle = cms.double(0),
    maxHLTIsolTrksEleOverPt = cms.double(0.04),
    maxHLTIsolTrksEleOverPt2 = cms.double(0),
    maxHLTIsolTrksPho = cms.double(0),
    maxHLTIsolTrksPhoOverPt = cms.double(0),
    maxHLTIsolTrksPhoOverPt2 = cms.double(0),
    maxHadEnergy = cms.double(0),
    maxHadem = cms.double(0.025),
    maxInvEInvP = cms.double(0.1),
    maxNrCTFTrkHitsLost = cms.int32(999),
    maxR9 = cms.double(999.0),
    maxSigmaEtaEta = cms.double(0.03),
    maxSigmaIEtaIEta = cms.double(0.03),
    minCTFTrkOuterRadius = cms.double(0.0),
    minEt = cms.double(15),
    minEta = cms.double(1.56),
    minNrCTFTrkHits = cms.int32(7),
    minR9 = cms.double(0.0),
    requirePixelHitsIfOuterInOuter = cms.bool(True)
)

process.egHLTOffEleEt10LWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronLWEt10PixelMatchFilter')
)

process.egHLTOffEleEt10LWEleIdCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltDEtaIn:hltDPhiIn:sigmaEtaEta:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.015),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltDEtaIn:hltDPhiIn:sigmaEtaEta:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.04),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronLWEt10EleIdDphiFilter')
)

process.egHLTOffEleEt10SWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt10PixelMatchFilter')
)

process.egHLTOffEleEt15LWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronLWEt15PixelMatchFilter')
)

process.egHLTOffEleEt15SWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt15PixelMatchFilter')
)

process.egHLTOffEleEt15SWEleIdCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltDEtaIn:hltDPhiIn:sigmaEtaEta:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.015),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltDEtaIn:hltDPhiIn:sigmaEtaEta:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.04),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt15EleIdDphiFilter')
)

process.egHLTOffEleEt15SWEleIdLTICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:dEtaIn:dPhiIn:sigmaIEtaIEta:hltIsolTrksEle:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(8),
        maxHLTIsolTrksEleOverPt = cms.double(0.5),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.015),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(25.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:dEtaIn:dPhiIn:sigmaIEtaIEta:hltIsolTrksEle:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(8),
        maxHLTIsolTrksEleOverPt = cms.double(0.5),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.04),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(25.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt15EleIdTrackIsolFilterESet25LTI')
)

process.egHLTOffEleEt15SWLTICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksEle:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(8),
        maxHLTIsolTrksEleOverPt = cms.double(0.5),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksEle:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(8),
        maxHLTIsolTrksEleOverPt = cms.double(0.5),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt15LTITrackIsolFilter')
)

process.egHLTOffEleEt15_CaloIdVT_CaloIsoT_TrkIdT_TrkIsoT_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad:hltIsolTrksEle:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.07),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.125),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.125),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.125),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad:hltIsolTrksEle:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.05),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.075),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.075),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.075),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle15CaloIdVTTrkIdTCaloIsoTTrkIsoTTrackIsolFilter')
)

process.egHLTOffEleEt17_CaloIdL_CaloIsoVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.2),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.2),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.014),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(17),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.035),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(17),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle17CaloIdLCaloIsoVLPixelMatchFilter')
)

process.egHLTOffEleEt20SWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(20.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(20.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt20PixelMatchFilter')
)

process.egHLTOffEleEt27_CaloIdVT_CaloIsoT_TrkIdT_TrkIsoT_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad:hltIsolTrksEle:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.07),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.125),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.125),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.125),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(27.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad:hltIsolTrksEle:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.05),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.075),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.075),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.075),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(27.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle27CaloIdTCaloIsoTTrkIdTTrkIsoTTrackIsoFilter')
)

process.egHLTOffEleEt45_CaloIdVT_TrkIdT_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.07),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(45.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.05),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(45.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle45CaloIdVTTrkIdTDphiFilter')
)

process.egHLTOffEleEt8_CaloIdL_CaloIsoVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.2),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.2),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.014),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.035),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle8CaloIdLCaloIsoVLPixelMatchFilter')
)

process.egHLTOffEleEt8_CaloIdL_TrkIdVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.01),
        maxDPhiIn = cms.double(0.15),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.014),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.01),
        maxDPhiIn = cms.double(0.1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.035),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle8CaloIdLTrkIdVLDphiFilter')
)

process.egHLTOffEleEt8_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hadem:maxr9'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hadem:maxr9'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle8PixelMatchFilter')
)

process.egHLTOffEleLooseCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    )
)

process.egHLTOffFiltersToMon = cms.PSet(
    diEleTightLooseTrigNames = cms.vstring(),
    diPhoTightLooseTrigNames = cms.vstring(),
    eleHLTFilterNames = cms.vstring('hltEle65CaloIdVTTrkIdTDphiFilter'),
    eleHLTFilterNames2Leg = cms.vstring(),
    eleTightLooseTrigNames = cms.vstring(),
    phoHLTFilterNames = cms.vstring(),
    phoHLTFilterNames2Leg = cms.vstring(),
    phoTightLooseTrigNames = cms.vstring()
)

process.egHLTOffPhoBarrelCuts = cms.PSet(
    cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
    isolEmConstTerm = cms.double(5.0),
    isolEmGradStart = cms.double(0.0),
    isolEmGradTerm = cms.double(0.012),
    isolHadConstTerm = cms.double(3.0),
    isolHadGradStart = cms.double(0.0),
    isolHadGradTerm = cms.double(0.005),
    isolNrTrksConstTerm = cms.int32(4),
    isolPtTrksConstTerm = cms.double(3.0),
    isolPtTrksGradStart = cms.double(0.0),
    isolPtTrksGradTerm = cms.double(0.002),
    maxCTFTrkChi2NDof = cms.double(99999.0),
    maxCTFTrkInnerRadius = cms.double(9.0),
    maxDEtaIn = cms.double(-1),
    maxDPhiIn = cms.double(-1),
    maxEta = cms.double(1.442),
    maxHLTDEtaIn = cms.double(0.1),
    maxHLTDPhiIn = cms.double(0.1),
    maxHLTInvEInvP = cms.double(0.1),
    maxHLTIsolEm = cms.double(0),
    maxHLTIsolEmOverEt = cms.double(0),
    maxHLTIsolEmOverEt2 = cms.double(0),
    maxHLTIsolHad = cms.double(0),
    maxHLTIsolHadOverEt = cms.double(0),
    maxHLTIsolHadOverEt2 = cms.double(0),
    maxHLTIsolTrksEle = cms.double(0),
    maxHLTIsolTrksEleOverPt = cms.double(0),
    maxHLTIsolTrksEleOverPt2 = cms.double(0),
    maxHLTIsolTrksPho = cms.double(0),
    maxHLTIsolTrksPhoOverPt = cms.double(0),
    maxHLTIsolTrksPhoOverPt2 = cms.double(0),
    maxHadEnergy = cms.double(0),
    maxHadem = cms.double(0.05),
    maxInvEInvP = cms.double(-1),
    maxNrCTFTrkHitsLost = cms.int32(0),
    maxR9 = cms.double(0.98),
    maxSigmaEtaEta = cms.double(0.011),
    maxSigmaIEtaIEta = cms.double(0.011),
    minCTFTrkOuterRadius = cms.double(40.0),
    minEt = cms.double(20),
    minEta = cms.double(0.0),
    minNrCTFTrkHits = cms.int32(5),
    minR9 = cms.double(0.0),
    requirePixelHitsIfOuterInOuter = cms.bool(True)
)

process.egHLTOffPhoCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    )
)

process.egHLTOffPhoEndcapCuts = cms.PSet(
    cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
    isolEmConstTerm = cms.double(5.0),
    isolEmGradStart = cms.double(0.0),
    isolEmGradTerm = cms.double(0.012),
    isolHadConstTerm = cms.double(3.0),
    isolHadGradStart = cms.double(0.0),
    isolHadGradTerm = cms.double(0.005),
    isolNrTrksConstTerm = cms.int32(4),
    isolPtTrksConstTerm = cms.double(3.0),
    isolPtTrksGradStart = cms.double(0.0),
    isolPtTrksGradTerm = cms.double(0.002),
    maxCTFTrkChi2NDof = cms.double(99999.0),
    maxCTFTrkInnerRadius = cms.double(9.0),
    maxDEtaIn = cms.double(-1),
    maxDPhiIn = cms.double(-1),
    maxEta = cms.double(2.5),
    maxHLTDEtaIn = cms.double(0.1),
    maxHLTDPhiIn = cms.double(0.1),
    maxHLTInvEInvP = cms.double(0.1),
    maxHLTIsolEm = cms.double(0),
    maxHLTIsolEmOverEt = cms.double(0),
    maxHLTIsolEmOverEt2 = cms.double(0),
    maxHLTIsolHad = cms.double(0),
    maxHLTIsolHadOverEt = cms.double(0),
    maxHLTIsolHadOverEt2 = cms.double(0),
    maxHLTIsolTrksEle = cms.double(0),
    maxHLTIsolTrksEleOverPt = cms.double(0),
    maxHLTIsolTrksEleOverPt2 = cms.double(0),
    maxHLTIsolTrksPho = cms.double(0),
    maxHLTIsolTrksPhoOverPt = cms.double(0),
    maxHLTIsolTrksPhoOverPt2 = cms.double(0),
    maxHadEnergy = cms.double(0),
    maxHadem = cms.double(0.05),
    maxInvEInvP = cms.double(-1),
    maxNrCTFTrkHitsLost = cms.int32(0),
    maxR9 = cms.double(999.0),
    maxSigmaEtaEta = cms.double(0.031),
    maxSigmaIEtaIEta = cms.double(0.031),
    minCTFTrkOuterRadius = cms.double(40.0),
    minEt = cms.double(20),
    minEta = cms.double(1.56),
    minNrCTFTrkHits = cms.int32(5),
    minR9 = cms.double(0.0),
    requirePixelHitsIfOuterInOuter = cms.bool(True)
)

process.egHLTOffPhoEt10Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt10HcalIsolFilter')
)

process.egHLTOffPhoEt10LEITICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTLEITISinglePhotonEt10TrackIsolFilter')
)

process.egHLTOffPhoEt15Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt15HcalIsolFilter')
)

process.egHLTOffPhoEt15HTICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoSinglePhotonEt15HTITrackIsolFilter')
)

process.egHLTOffPhoEt15LEICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoSinglePhotonEt15LEIHcalIsolFilter')
)

process.egHLTOffPhoEt20Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt20HcalIsolFilter')
)

process.egHLTOffPhoEt20LEITICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTLEITISinglePhotonEt20TrackIsolFilter')
)

process.egHLTOffPhoEt25Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(25.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(25.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt25HcalIsolFilter')
)

process.egHLTOffPhoEt25LEITICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(25.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(25.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTLEITISinglePhotonEt25TrackIsolFilter')
)

process.egHLTOffPhoEt30Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt30HcalIsolFilter')
)

process.egHLTOffPhoLooseCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    )
)

process.egHLTOffPhotonEt125_NoSpikeFilter_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(125.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(125.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltPhoton125HEFilter')
)

process.egHLTOffPhotonEt30_CaloIdVL_IsoL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltPhoton30CaloIdVLIsoLTrackIsoFilter')
)

process.egHLTOffPhotonEt30_CaloIdVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEG30CaloIdVLHEFilter')
)

process.egHLTOffPhotonEt50_CaloIdVL_IsoL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(50.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(50.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltPhoton50CaloIdVLIsoLTrackIsoFilter')
)

process.egHLTOffPhotonEt75_CaloIdVL_IsoL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(75.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(75.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltPhoton75CaloIdVLIsoLTrackIsoFilter')
)

process.egHLTOffPhotonEt75_CaloIdVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(75.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(75.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEG75CaloIdVLHEFilter')
)

process.endcapMuonParams = cms.PSet(
    d0Cut = cms.untracked.double(1000.0),
    hltCuts = cms.untracked.string('abs(eta) > 1.4 && abs(eta) < 2.0'),
    recoCuts = cms.untracked.string('isStandAloneMuon && abs(eta) > 1.4 && abs(eta) < 2.0'),
    z0Cut = cms.untracked.double(1000.0)
)

process.genericTriggerEventFlag4fullTracker = cms.PSet(
    andOr = cms.bool(False),
    andOrDcs = cms.bool(False),
    dcsInputTag = cms.InputTag("scalersRawToDigi"),
    dcsPartitions = cms.vint32(24, 25, 26, 27, 28, 
        29),
    errorReplyDcs = cms.bool(True)
)

process.genericTriggerEventFlag4fullTrackerAndHLTHIPOOTdb = cms.PSet(
    andOr = cms.bool(False),
    andOrDcs = cms.bool(False),
    andOrHlt = cms.bool(True),
    dbLabel = cms.string('SiStripDQMTrigger'),
    dcsInputTag = cms.InputTag("scalersRawToDigi"),
    dcsPartitions = cms.vint32(24, 25, 26, 27, 28, 
        29),
    errorReplyDcs = cms.bool(True),
    errorReplyHlt = cms.bool(False),
    hltDBKey = cms.string('Tracking_HLT_HIP_OOT'),
    hltInputTag = cms.InputTag("TriggerResults","","HLT"),
    hltPaths = cms.vstring(''),
    verbosityLevel = cms.uint32(1)
)

process.genericTriggerEventFlag4fullTrackerAndHLTHIPnoOOTdb = cms.PSet(
    andOr = cms.bool(False),
    andOrDcs = cms.bool(False),
    andOrHlt = cms.bool(True),
    dbLabel = cms.string('SiStripDQMTrigger'),
    dcsInputTag = cms.InputTag("scalersRawToDigi"),
    dcsPartitions = cms.vint32(24, 25, 26, 27, 28, 
        29),
    errorReplyDcs = cms.bool(True),
    errorReplyHlt = cms.bool(False),
    hltDBKey = cms.string('Tracking_HLT_HIP_noOOT'),
    hltInputTag = cms.InputTag("TriggerResults","","HLT"),
    hltPaths = cms.vstring(''),
    verbosityLevel = cms.uint32(1)
)

process.genericTriggerEventFlag4fullTrackerAndHLTdb = cms.PSet(
    andOr = cms.bool(False),
    andOrDcs = cms.bool(False),
    andOrHlt = cms.bool(True),
    dbLabel = cms.string('SiStripDQMTrigger'),
    dcsInputTag = cms.InputTag("scalersRawToDigi"),
    dcsPartitions = cms.vint32(24, 25, 26, 27, 28, 
        29),
    errorReplyDcs = cms.bool(True),
    errorReplyHlt = cms.bool(False),
    hltDBKey = cms.string('Tracking_HLT'),
    hltInputTag = cms.InputTag("TriggerResults","","HLT"),
    hltPaths = cms.vstring(''),
    verbosityLevel = cms.uint32(1)
)

process.genericTriggerEventFlag4fullTrackerAndHLTnoHIPnoOOTdb = cms.PSet(
    andOr = cms.bool(False),
    andOrDcs = cms.bool(False),
    andOrHlt = cms.bool(True),
    dbLabel = cms.string('SiStripDQMTrigger'),
    dcsInputTag = cms.InputTag("scalersRawToDigi"),
    dcsPartitions = cms.vint32(24, 25, 26, 27, 28, 
        29),
    errorReplyDcs = cms.bool(True),
    errorReplyHlt = cms.bool(False),
    hltDBKey = cms.string('Tracking_HLT_noHIP_noOOT'),
    hltInputTag = cms.InputTag("TriggerResults","","HLT"),
    hltPaths = cms.vstring(''),
    verbosityLevel = cms.uint32(1)
)

process.genericTriggerEventFlag4onlyStrip = cms.PSet(
    andOr = cms.bool(False),
    andOrDcs = cms.bool(False),
    dcsInputTag = cms.InputTag("scalersRawToDigi"),
    dcsPartitions = cms.vint32(24, 25, 26, 27),
    errorReplyDcs = cms.bool(True)
)

process.hfTPScaleShift = cms.PSet(
    NCT = cms.int32(1),
    RCT = cms.int32(3)
)

process.initialStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('initialStepChi2Est'),
    foundHitBonus = cms.double(10.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.initialStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryFilterBase')
    ))
)

process.initialStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.2),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.initialStepTrajectoryFilterInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.2),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(True),
    seedExtension = cms.int32(1),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(True)
)

process.initialStepTrajectoryFilterShape = cms.PSet(
    ComponentType = cms.string('StripSubClusterShapeTrajectoryFilter'),
    layerMask = cms.PSet(
        TEC = cms.bool(False),
        TIB = cms.vuint32(1, 2),
        TID = cms.vuint32(1, 2),
        TOB = cms.bool(False)
    ),
    maxNSat = cms.uint32(3),
    maxTrimmedSizeDiffNeg = cms.double(1.0),
    maxTrimmedSizeDiffPos = cms.double(0.7),
    seedCutMIPs = cms.double(0.35),
    seedCutSN = cms.double(7.0),
    subclusterCutMIPs = cms.double(0.45),
    subclusterCutSN = cms.double(12.0),
    subclusterWindow = cms.double(0.7),
    trimMaxADC = cms.double(30.0),
    trimMaxFracNeigh = cms.double(0.25),
    trimMaxFracTotal = cms.double(0.15)
)

process.isolationSumsCalculator = cms.PSet(
    ComponentName = cms.string('isolationSumsCalculator'),
    EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
    EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
    EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
    EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
    EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
    EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
    EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
    EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
    EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
    EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
    EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
    EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
    EcalRecHitThreshEA_Barrel = cms.double(0.095),
    EcalRecHitThreshEA_Endcap = cms.double(0.0),
    EcalRecHitThreshEB_Barrel = cms.double(0.095),
    EcalRecHitThreshEB_Endcap = cms.double(0.0),
    EcalRecHitThreshEtA_Barrel = cms.double(0.0),
    EcalRecHitThreshEtA_Endcap = cms.double(0.11),
    EcalRecHitThreshEtB_Barrel = cms.double(0.0),
    EcalRecHitThreshEtB_Endcap = cms.double(0.11),
    HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
    HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
    HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
    HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
    HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
    HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
    HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
    HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
    HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
    HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
    HcalRecHitCollection = cms.InputTag("towerMaker"),
    HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
    HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
    HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalTowerThreshEA_Barrel = cms.double(0.0),
    HcalTowerThreshEA_Endcap = cms.double(0.0),
    HcalTowerThreshEB_Barrel = cms.double(0.0),
    HcalTowerThreshEB_Endcap = cms.double(0.0),
    TrackConeInnerRadiusA_Barrel = cms.double(0.04),
    TrackConeInnerRadiusA_Endcap = cms.double(0.04),
    TrackConeInnerRadiusB_Barrel = cms.double(0.04),
    TrackConeInnerRadiusB_Endcap = cms.double(0.04),
    TrackConeOuterRadiusA_Barrel = cms.double(0.4),
    TrackConeOuterRadiusA_Endcap = cms.double(0.4),
    TrackConeOuterRadiusB_Barrel = cms.double(0.3),
    TrackConeOuterRadiusB_Endcap = cms.double(0.3),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotProducer = cms.InputTag("offlineBeamSpot"),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    isolationtrackEtaSliceA_Barrel = cms.double(0.015),
    isolationtrackEtaSliceA_Endcap = cms.double(0.015),
    isolationtrackEtaSliceB_Barrel = cms.double(0.015),
    isolationtrackEtaSliceB_Endcap = cms.double(0.015),
    isolationtrackThresholdA_Barrel = cms.double(0.0),
    isolationtrackThresholdA_Endcap = cms.double(0.0),
    isolationtrackThresholdB_Barrel = cms.double(0.0),
    isolationtrackThresholdB_Endcap = cms.double(0.0),
    longImpactParameterA_Barrel = cms.double(0.2),
    longImpactParameterA_Endcap = cms.double(0.2),
    longImpactParameterB_Barrel = cms.double(0.2),
    longImpactParameterB_Endcap = cms.double(0.2),
    moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
        0.81, 1.13, 1.15, 1.45, 1.58),
    modulePhiBoundary = cms.double(0.0087),
    trackProducer = cms.InputTag("generalTracks"),
    transImpactParameterA_Barrel = cms.double(0.1),
    transImpactParameterA_Endcap = cms.double(0.1),
    transImpactParameterB_Barrel = cms.double(0.1),
    transImpactParameterB_Endcap = cms.double(0.1),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False)
)

process.jetDQMParameters = cms.PSet(
    asymmetryThirdJetCut = cms.double(30),
    balanceThirdJetCut = cms.double(0.2),
    eBin = cms.int32(100),
    eMax = cms.double(1000.0),
    eMin = cms.double(0.0),
    etaBin = cms.int32(100),
    etaMax = cms.double(5.0),
    etaMin = cms.double(-5.0),
    fillJIDPassFrac = cms.int32(1),
    pBin = cms.int32(100),
    pMax = cms.double(500.0),
    pMin = cms.double(0.0),
    pVBin = cms.int32(100),
    pVMax = cms.double(100.0),
    pVMin = cms.double(0.0),
    phiBin = cms.int32(70),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(100),
    ptMax = cms.double(500.0),
    ptMin = cms.double(20.0),
    ptThreshold = cms.double(20.0),
    ptThresholdUnc = cms.double(30),
    verbose = cms.int32(0)
)

process.layerInfo = cms.PSet(
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        maxRing = cms.int32(7),
        minRing = cms.int32(6),
        useRingSlector = cms.bool(False)
    ),
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        )
    )
)

process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(10)
)

process.me11tmbSLHCGEM = cms.PSet(
    alctTrigEnable = cms.uint32(0),
    buildLCTfromALCTandGEM_ME1a = cms.bool(True),
    buildLCTfromALCTandGEM_ME1b = cms.bool(True),
    buildLCTfromCLCTandGEM_ME1a = cms.bool(False),
    buildLCTfromCLCTandGEM_ME1b = cms.bool(False),
    clctToAlct = cms.bool(False),
    clctTrigEnable = cms.uint32(0),
    correctLCTtimingWithGEM = cms.bool(False),
    debugGEMDphi = cms.bool(False),
    debugLUTs = cms.bool(False),
    debugMatching = cms.bool(False),
    doLCTGhostBustingWithGEMs = cms.bool(False),
    dropLowQualityALCTsNoGEMs_ME1a = cms.bool(False),
    dropLowQualityALCTsNoGEMs_ME1b = cms.bool(False),
    dropLowQualityCLCTsNoGEMs_ME1a = cms.bool(False),
    dropLowQualityCLCTsNoGEMs_ME1b = cms.bool(True),
    firstTwoLCTsInChamber = cms.bool(True),
    matchEarliestAlctME11Only = cms.bool(False),
    matchEarliestClctME11Only = cms.bool(False),
    matchTrigEnable = cms.uint32(1),
    matchTrigWindowSize = cms.uint32(3),
    maxDeltaBXCoPadEven = cms.int32(0),
    maxDeltaBXCoPadOdd = cms.int32(0),
    maxDeltaBXInCoPad = cms.int32(1),
    maxDeltaBXPadEven = cms.int32(1),
    maxDeltaBXPadOdd = cms.int32(1),
    maxDeltaPadCoPadEven = cms.int32(2),
    maxDeltaPadCoPadOdd = cms.int32(3),
    maxDeltaPadInCoPad = cms.int32(1),
    maxDeltaPadPadEven = cms.int32(2),
    maxDeltaPadPadOdd = cms.int32(3),
    maxME11LCTs = cms.uint32(2),
    mpcBlockMe1a = cms.uint32(0),
    promoteALCTGEMpattern = cms.bool(True),
    promoteALCTGEMquality = cms.bool(True),
    promoteCLCTGEMquality_ME1a = cms.bool(True),
    promoteCLCTGEMquality_ME1b = cms.bool(True),
    tmbCrossBxAlgorithm = cms.uint32(2),
    tmbDropUsedAlcts = cms.bool(False),
    tmbDropUsedClcts = cms.bool(False),
    tmbEarlyTbins = cms.int32(4),
    tmbL1aWindowSize = cms.uint32(7),
    tmbReadoutEarliest2 = cms.bool(False),
    useOldLCTDataFormat = cms.bool(True),
    verbosity = cms.int32(0)
)

process.me21tmbSLHCGEM = cms.PSet(
    alctTrigEnable = cms.uint32(0),
    buildLCTfromALCTandGEM = cms.bool(True),
    buildLCTfromCLCTandGEM = cms.bool(False),
    clctToAlct = cms.bool(False),
    clctTrigEnable = cms.uint32(0),
    correctLCTtimingWithGEM = cms.bool(False),
    debugGEMDphi = cms.bool(False),
    debugLUTs = cms.bool(False),
    debugMatching = cms.bool(False),
    doLCTGhostBustingWithGEMs = cms.bool(False),
    dropLowQualityALCTsNoGEMs = cms.bool(False),
    dropLowQualityCLCTsNoGEMs = cms.bool(True),
    firstTwoLCTsInChamber = cms.bool(True),
    matchEarliestAlctME21Only = cms.bool(False),
    matchEarliestClctME21Only = cms.bool(False),
    matchTrigEnable = cms.uint32(1),
    matchTrigWindowSize = cms.uint32(3),
    maxDeltaBXCoPad = cms.int32(1),
    maxDeltaBXInCoPad = cms.int32(1),
    maxDeltaBXPad = cms.int32(1),
    maxDeltaPadCoPad = cms.int32(2),
    maxDeltaPadInCoPad = cms.int32(2),
    maxDeltaPadPadEven = cms.int32(3),
    maxDeltaPadPadOdd = cms.int32(4),
    maxDeltaWg = cms.int32(2),
    maxME21LCTs = cms.uint32(2),
    mpcBlockMe1a = cms.uint32(0),
    promoteALCTGEMpattern = cms.bool(True),
    promoteALCTGEMquality = cms.bool(True),
    promoteCLCTGEMquality = cms.bool(True),
    tmbCrossBxAlgorithm = cms.uint32(2),
    tmbDropUsedAlcts = cms.bool(False),
    tmbDropUsedClcts = cms.bool(False),
    tmbEarlyTbins = cms.int32(4),
    tmbL1aWindowSize = cms.uint32(7),
    tmbReadoutEarliest2 = cms.bool(False),
    useOldLCTDataFormat = cms.bool(True),
    verbosity = cms.int32(0)
)

process.me3141tmbSLHCRPC = cms.PSet(
    alctTrigEnable = cms.uint32(0),
    buildLCTfromALCTandRPC = cms.bool(True),
    buildLCTfromCLCTandRPC = cms.bool(False),
    buildLCTfromLowQstubandRPC = cms.bool(True),
    clctToAlct = cms.bool(False),
    clctTrigEnable = cms.uint32(0),
    debugLUTs = cms.bool(False),
    debugMatching = cms.bool(False),
    dropLowQualityCLCTsNoRPCs = cms.bool(True),
    matchEarliestClctME3141Only = cms.bool(False),
    matchTrigEnable = cms.uint32(1),
    matchTrigWindowSize = cms.uint32(3),
    maxDeltaBXRPC = cms.int32(0),
    maxDeltaStripRPCEven = cms.int32(4),
    maxDeltaStripRPCOdd = cms.int32(6),
    maxDeltaWg = cms.int32(2),
    maxME3141LCTs = cms.uint32(2),
    mpcBlockMe1a = cms.uint32(0),
    promoteALCTRPCpattern = cms.bool(True),
    promoteALCTRPCquality = cms.bool(True),
    promoteCLCTRPCquality = cms.bool(True),
    tmbCrossBxAlgorithm = cms.uint32(2),
    tmbDropUsedAlcts = cms.bool(False),
    tmbDropUsedClcts = cms.bool(False),
    tmbEarlyTbins = cms.int32(4),
    tmbL1aWindowSize = cms.uint32(7),
    tmbReadoutEarliest2 = cms.bool(False),
    useOldLCTDataFormat = cms.bool(True),
    verbosity = cms.int32(0)
)

process.mipVariable = cms.PSet(
    ComponentName = cms.string('mipVariable'),
    HaloDiscThreshold = cms.double(70.0),
    ResidualWidth = cms.double(0.23),
    XRangeFit = cms.double(180.0),
    YRangeFit = cms.double(7.0),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)

process.muonSeededTrajectoryBuilderForOutInDisplaced = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForOutInDisplaced'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutInDisplaced')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(3),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutInDisplaced')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.muonSeededTrajectoryFilterForOutInDisplaced = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxCCCLostHits = cms.int32(9999),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minGoodStripCharge = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    ),
    minHitsMinPt = cms.int32(3),
    minNumberOfHitsForLoopers = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    pixelSeedExtension = cms.bool(False),
    seedExtension = cms.int32(0),
    seedPairPenalty = cms.int32(0),
    strictSeedExtension = cms.bool(False)
)

process.options = cms.untracked.PSet(
    allowUnscheduled = cms.untracked.bool(True),
    canDeleteEarly = cms.untracked.vstring()
)

process.ptSeedParameterization = cms.PSet(
    CSC_01 = cms.vdouble(0.155906, -0.000406, 0.0, 0.194022, -0.010181, 
        0.0),
    CSC_02 = cms.vdouble(0.600235, -0.205683, 0.001113, 0.655625, -0.682129, 
        0.253916),
    CSC_03 = cms.vdouble(0.498992, -0.086235, -0.025772, 2.761006, -2.667607, 
        0.72802),
    CSC_12 = cms.vdouble(-0.363549, 0.569552, -0.173186, 7.777069, -10.203618, 
        3.478874),
    CSC_13 = cms.vdouble(1.22495, -1.792358, 0.711378, 5.271848, -6.280625, 
        2.0142),
    CSC_14 = cms.vdouble(0.952517, -0.532733, 0.084601, 1.615881, -1.630744, 
        0.514139),
    CSC_23 = cms.vdouble(-0.095236, 0.122061, -0.029852, -11.396689, 15.933598, 
        -4.267065),
    CSC_24 = cms.vdouble(-0.049769, 0.063087, -0.011029, -13.765978, 16.296143, 
        -4.241835),
    CSC_34 = cms.vdouble(0.144321, -0.142283, 0.035636, 190.260708, -180.888643, 
        43.430395),
    DT_12 = cms.vdouble(0.176182, 0.058535, -0.090549, 0.202363, -0.203126, 
        0.222219),
    DT_13 = cms.vdouble(0.298842, 0.076531, -0.14293, 0.219923, -0.145026, 
        0.155638),
    DT_14 = cms.vdouble(0.388423, 0.068698, -0.145925, 0.159515, 0.124299, 
        -0.133269),
    DT_23 = cms.vdouble(0.120647, 0.034743, -0.070855, 0.302427, -0.21417, 
        0.261012),
    DT_24 = cms.vdouble(0.189527, 0.037328, -0.088523, 0.251936, 0.032411, 
        0.010984),
    DT_34 = cms.vdouble(0.049146, -0.003494, -0.010099, 0.672095, 0.36459, 
        -0.304346),
    OL_1213 = cms.vdouble(0.960544, -0.75644, 0.0, 0.1636, 0.114178, 
        0.0),
    OL_1222 = cms.vdouble(0.215915, 0.002556, 0.0, 0.313596, -0.021465, 
        0.0),
    OL_1232 = cms.vdouble(0.162626, 0.000843, 0.0, 0.396271, 0.002791, 
        0.0),
    OL_2213 = cms.vdouble(0.563218, -0.493991, 0.0, 0.943776, -0.591751, 
        0.0),
    OL_2222 = cms.vdouble(0.087587, 0.005729, 0.0, 0.535169, -0.087675, 
        0.0),
    SMB_10 = cms.vdouble(1.160532, 0.148991, 0.0, 0.182785, -0.093776, 
        0.0),
    SMB_11 = cms.vdouble(1.289468, -0.139653, 0.0, 0.137191, 0.01217, 
        0.0),
    SMB_12 = cms.vdouble(1.923091, -0.913204, 0.0, 0.161556, 0.020215, 
        0.0),
    SMB_20 = cms.vdouble(0.861314, -0.16233, 0.0, 0.248879, -0.113879, 
        0.0),
    SMB_21 = cms.vdouble(0.918425, -0.141199, 0.0, 0.254515, -0.111848, 
        0.0),
    SMB_22 = cms.vdouble(1.308565, -0.701634, 0.0, -0.302861, 0.675785, 
        0.0),
    SMB_30 = cms.vdouble(0.399628, 0.014922, 0.0, 0.665622, 0.358439, 
        0.0),
    SMB_31 = cms.vdouble(0.398661, -0.024853, 0.0, 0.863324, -0.413048, 
        0.0),
    SMB_32 = cms.vdouble(0.421649, -0.111654, 0.0, -0.044613, 1.134858, 
        0.0),
    SME_11 = cms.vdouble(2.39479, -0.888663, 0.0, -4.604546, 3.623464, 
        0.0),
    SME_12 = cms.vdouble(-0.277294, 0.7616, 0.0, -0.243326, 1.446792, 
        0.0),
    SME_13 = cms.vdouble(0.398851, 0.028176, 0.0, 0.567015, 2.623232, 
        0.0),
    SME_21 = cms.vdouble(0.64895, -0.148762, 0.0, -5.07676, 6.284227, 
        0.0),
    SME_22 = cms.vdouble(-0.624708, 0.641043, 0.0, 32.581295, -19.604264, 
        0.0),
    SME_31 = cms.vdouble(-0.588188, 0.316961, 0.0, -95.261732, 45.444051, 
        0.0),
    SME_32 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0),
    SME_41 = cms.vdouble(-0.187116, 0.076415, 0.0, -58.552583, 27.933864, 
        0.0),
    SME_42 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0)
)

process.regressionModifier = cms.PSet(
    applyExtraHighEnergyProtection = cms.bool(True),
    autoDetectBunchSpacing = cms.bool(True),
    bunchSpacingTag = cms.InputTag("bunchSpacingProducer"),
    electron_config = cms.PSet(
        combinationKey_25ns = cms.string('gedelectron_p4combination_25ns'),
        combinationKey_50ns = cms.string('gedelectron_p4combination_50ns'),
        regressionKey_25ns = cms.vstring('gedelectron_EBCorrection_25ns', 
            'gedelectron_EECorrection_25ns'),
        regressionKey_50ns = cms.vstring('gedelectron_EBCorrection_50ns', 
            'gedelectron_EECorrection_50ns'),
        uncertaintyKey_25ns = cms.vstring('gedelectron_EBUncertainty_25ns', 
            'gedelectron_EEUncertainty_25ns'),
        uncertaintyKey_50ns = cms.vstring('gedelectron_EBUncertainty_50ns', 
            'gedelectron_EEUncertainty_50ns')
    ),
    manualBunchSpacing = cms.int32(50),
    modifierName = cms.string('EGExtraInfoModifierFromDB'),
    photon_config = cms.PSet(
        regressionKey_25ns = cms.vstring('gedphoton_EBCorrection_25ns', 
            'gedphoton_EECorrection_25ns'),
        regressionKey_50ns = cms.vstring('gedphoton_EBCorrection_50ns', 
            'gedphoton_EECorrection_50ns'),
        uncertaintyKey_25ns = cms.vstring('gedphoton_EBUncertainty_25ns', 
            'gedphoton_EEUncertainty_25ns'),
        uncertaintyKey_50ns = cms.vstring('gedphoton_EBUncertainty_50ns', 
            'gedphoton_EEUncertainty_50ns')
    ),
    rhoCollection = cms.InputTag("fixedGridRhoFastjetAll"),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)

process.APVPhases = cms.EDProducer("APVCyclePhaseProducerFromL1TS",
    defaultPartitionNames = cms.vstring('TI', 
        'TO', 
        'TP', 
        'TM'),
    defaultPhases = cms.vint32(30, 30, 30, 30),
    l1TSCollection = cms.InputTag("scalersRawToDigi")
)


process.BeamHaloSummary = cms.EDProducer("BeamHaloSummaryProducer",
    CSCHaloDataLabel = cms.InputTag("CSCHaloData"),
    EcalHaloDataLabel = cms.InputTag("EcalHaloData"),
    GlobalHaloDataLabel = cms.InputTag("GlobalHaloData"),
    HcalHaloDataLabel = cms.InputTag("HcalHaloData"),
    l_EcalPhiWedgeConfidence = cms.double(0.7),
    l_EcalPhiWedgeConstituents = cms.int32(6),
    l_EcalPhiWedgeEnergy = cms.double(10.0),
    l_EcalPhiWedgeToF = cms.double(-200.0),
    l_EcalShowerShapesAngle = cms.double(0.51),
    l_EcalShowerShapesRoundness = cms.double(0.41),
    l_EcalSuperClusterEnergy = cms.double(10.0),
    l_EcalSuperClusterSize = cms.int32(3),
    l_HcalPhiWedgeConfidence = cms.double(0.7),
    l_HcalPhiWedgeConstituents = cms.int32(6),
    l_HcalPhiWedgeEnergy = cms.double(20.0),
    l_HcalPhiWedgeToF = cms.double(-100.0),
    problematicStripMinLength = cms.int32(6),
    t_EcalPhiWedgeConfidence = cms.double(0.9),
    t_EcalPhiWedgeConstituents = cms.int32(8),
    t_EcalPhiWedgeEnergy = cms.double(20.0),
    t_EcalPhiWedgeToF = cms.double(-200.0),
    t_EcalShowerShapesAngle = cms.double(0.51),
    t_EcalShowerShapesRoundness = cms.double(0.23),
    t_EcalSuperClusterEnergy = cms.double(10.0),
    t_EcalSuperClusterSize = cms.int32(3),
    t_HcalPhiWedgeConfidence = cms.double(0.9),
    t_HcalPhiWedgeConstituents = cms.int32(8),
    t_HcalPhiWedgeEnergy = cms.double(25.0),
    t_HcalPhiWedgeToF = cms.double(-100.0)
)


process.CSCHaloData = cms.EDProducer("CSCHaloDataProducer",
    ALCTDigiLabel = cms.InputTag("muonCSCDigis","MuonCSCALCTDigi"),
    CSCRecHitLabel = cms.InputTag("csc2DRecHits"),
    CSCSegmentLabel = cms.InputTag("cscSegments"),
    CosmicMuonLabel = cms.InputTag("muons"),
    DetaParam = cms.double(0.1),
    DphiParam = cms.double(1.0),
    ECALBrhLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    ECALErhLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    ExpectedBX = cms.int32(6),
    HBHErhLabel = cms.InputTag("hbhereco"),
    HLTBitLabel = cms.VInputTag(cms.InputTag("HLT_CSCBeamHalo"), cms.InputTag("HLT_CSCBeamHaloOverlapRing1"), cms.InputTag("HLT_CSCBeamHaloOverlapRing2"), cms.InputTag("HLT_CSCBeamHaloRing2or3")),
    HLTResultLabel = cms.InputTag("TriggerResults","","HLT"),
    InnerRMaxParam = cms.double(99999.0),
    InnerRMinParam = cms.double(0.0),
    L1MuGMTReadoutLabel = cms.InputTag("gtDigis"),
    MatchParameters = cms.PSet(
        CSCsegments = cms.InputTag("cscSegments"),
        DTradius = cms.double(0.01),
        DTsegments = cms.InputTag("dt4DSegments"),
        RPChits = cms.InputTag("rpcRecHits"),
        TightMatchCSC = cms.bool(True),
        TightMatchDT = cms.bool(False)
    ),
    MatchingDEtaThreshold = cms.double(0.4),
    MatchingDPhiThreshold = cms.double(0.18),
    MatchingDWireThreshold = cms.int32(5),
    MaxDtMuonSegment = cms.double(-10.0),
    MaxFreeInverseBeta = cms.double(0.0),
    MaxOuterMomentumTheta = cms.double(3.0),
    MaxSegmentPhiDiff = cms.double(0.1),
    MaxSegmentRDiff = cms.double(10.0),
    MaxSegmentTheta = cms.double(0.7),
    MinOuterMomentumTheta = cms.double(0.1),
    MuonLabel = cms.InputTag("muons"),
    NormChi2Param = cms.double(8.0),
    OuterRMaxParam = cms.double(99999.0),
    OuterRMinParam = cms.double(0.0),
    RecHitTime0 = cms.double(0.0),
    RecHitTimeWindow = cms.double(25.0),
    SALabel = cms.InputTag("standAloneMuons")
)


process.CosmicMuonSeed = cms.EDProducer("CosmicMuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    ForcePointDown = cms.bool(True),
    MaxCSCChi2 = cms.double(300.0),
    MaxDTChi2 = cms.double(300.0),
    MaxSeeds = cms.int32(1000)
)


process.CosmicMuonSeedEndCapsOnly = cms.EDProducer("CosmicMuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(False),
    ForcePointDown = cms.bool(True),
    MaxCSCChi2 = cms.double(300.0),
    MaxDTChi2 = cms.double(300.0),
    MaxSeeds = cms.int32(1000)
)


process.CosmicMuonSeedWitht0Correction = cms.EDProducer("CosmicMuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    DTRecSegmentLabel = cms.InputTag("dt4DSegmentsT0Seg"),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    ForcePointDown = cms.bool(True),
    MaxCSCChi2 = cms.double(300.0),
    MaxDTChi2 = cms.double(300.0),
    MaxSeeds = cms.int32(1000)
)


process.EcalHaloData = cms.EDProducer("EcalHaloDataProducer",
    AngleCutParam = cms.double(0.51),
    EBRecHitEnergyThresholdParam = cms.double(0.3),
    EBRecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EERecHitEnergyThresholdParam = cms.double(0.3),
    EERecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    ESRecHitEnergyThresholdParam = cms.double(0.3),
    ESRecHitLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    HBHERecHitLabel = cms.InputTag("hbhereco"),
    NHitsEcalThresholdParam = cms.int32(4),
    PhotonLabel = cms.InputTag(""),
    RoundnessCutParam = cms.double(0.41),
    SumEcalEnergyThresholdParam = cms.double(10.0),
    SuperClusterLabel = cms.InputTag("correctedHybridSuperClusters")
)


process.GlobalHaloData = cms.EDProducer("GlobalHaloDataProducer",
    CSCHaloDataLabel = cms.InputTag("CSCHaloData"),
    CSCRecHitLabel = cms.InputTag("csc2DRecHits"),
    CSCSegmentLabel = cms.InputTag("cscSegments"),
    CaloTowerEtThresholdParam = cms.double(0.3),
    EcalHaloDataLabel = cms.InputTag("EcalHaloData"),
    EcalMaxMatchingRadiusParam = cms.double(330.0),
    EcalMinMatchingRadiusParam = cms.double(110.0),
    HcalHaloDataLabel = cms.InputTag("HcalHaloData"),
    HcalMaxMatchingRadiusParam = cms.double(490.0),
    HcalMinMatchingRadiusParam = cms.double(110.0),
    IsHLT = cms.bool(False),
    MaxSegmentTheta = cms.double(0.7),
    MuonLabel = cms.InputTag("muons"),
    calotowerLabel = cms.InputTag("towerMaker"),
    dphicalosegm_thresh_eb = cms.double(0.04),
    dphicalosegm_thresh_ee = cms.double(0.04),
    dphicalosegm_thresh_hb = cms.double(0.15),
    dphicalosegm_thresh_he = cms.double(0.1),
    dtcalosegm_thresh_eb = cms.double(15.0),
    dtcalosegm_thresh_ee = cms.double(15.0),
    dtcalosegm_thresh_hb = cms.double(15.0),
    dtcalosegm_thresh_he = cms.double(15.0),
    metLabel = cms.InputTag("caloMet"),
    rcalominrsegm_highthresh_eb = cms.double(15.0),
    rcalominrsegm_highthresh_ee = cms.double(30.0),
    rcalominrsegm_highthresh_hb = cms.double(20.0),
    rcalominrsegm_highthresh_he = cms.double(30.0),
    rcalominrsegm_lowthresh_eb = cms.double(-30.0),
    rcalominrsegm_lowthresh_ee = cms.double(-30.0),
    rcalominrsegm_lowthresh_hb = cms.double(-100.0),
    rcalominrsegm_lowthresh_he = cms.double(-30.0),
    rh_et_threshforcscmatching_eb = cms.double(10.0),
    rh_et_threshforcscmatching_ee = cms.double(10.0),
    rh_et_threshforcscmatching_hb = cms.double(20.0),
    rh_et_threshforcscmatching_he = cms.double(20.0)
)


process.HcalHaloData = cms.EDProducer("HcalHaloDataProducer",
    EBRecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EERecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    HBHERecHitLabel = cms.InputTag("hbhereco"),
    HBRecHitEnergyThresholdParam = cms.double(0.5),
    HERecHitEnergyThresholdParam = cms.double(0.5),
    HFRecHitLabel = cms.InputTag("hfreco"),
    HORecHitLabel = cms.InputTag("horeco"),
    HcalMaxMatchingRadiusParam = cms.double(490.0),
    HcalMinMatchingRadiusParam = cms.double(110.0),
    NHitsHcalThresholdParam = cms.int32(4),
    SumHcalEnergyThresholdParam = cms.double(18),
    caloTowerCollName = cms.InputTag("towerMaker")
)


process.MEtoEDMConverter = cms.EDProducer("MEtoEDMConverter",
    Frequency = cms.untracked.int32(50),
    MEPathToSave = cms.untracked.string(''),
    Name = cms.untracked.string('MEtoEDMConverter'),
    Verbosity = cms.untracked.int32(0),
    deleteAfterCopy = cms.untracked.bool(True)
)


process.MeasurementTrackerEvent = cms.EDProducer("MeasurementTrackerEventProducer",
    inactivePixelDetectorLabels = cms.VInputTag(cms.InputTag("siPixelDigis")),
    inactiveStripDetectorLabels = cms.VInputTag(cms.InputTag("siStripDigis")),
    measurementTracker = cms.string(''),
    pixelClusterProducer = cms.string('siPixelClusters'),
    skipClusters = cms.InputTag(""),
    stripClusterProducer = cms.string('siStripClusters'),
    switchOffPixelsIfEmpty = cms.bool(True)
)


process.PhotonIDProd = cms.EDProducer("PhotonIDProducer",
    DoEcalIsoRelativeCut = cms.bool(True),
    DoEcalRecHitIsolationCut = cms.bool(True),
    DoEtaWidthCut = cms.bool(True),
    DoHadOverEMCut = cms.bool(True),
    DoHcalTowerIsolationCut = cms.bool(True),
    DoHollowConeNTrkCut = cms.bool(False),
    DoHollowConeTrackIsolationCut = cms.bool(True),
    DoR9Cut = cms.bool(False),
    DoSolidConeNTrkCut = cms.bool(False),
    DoSolidConeTrackIsolationCut = cms.bool(False),
    LooseEMEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LooseEMEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LooseEMEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LooseEMEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    LooseEMEtaWidthEB = cms.double(999999999),
    LooseEMEtaWidthEE = cms.double(999999999),
    LooseEMHadOverEMEB = cms.double(0.05),
    LooseEMHadOverEMEE = cms.double(0.05),
    LooseEMHcalTowerIsoOffsetEB = cms.double(2.2),
    LooseEMHcalTowerIsoOffsetEE = cms.double(2.2),
    LooseEMHcalTowerIsoSlopeEB = cms.double(0.0025),
    LooseEMHcalTowerIsoSlopeEE = cms.double(0.0025),
    LooseEMHollowNTrkEB = cms.int32(999999999),
    LooseEMHollowNTrkEE = cms.int32(999999999),
    LooseEMHollowTrkOffsetEB = cms.double(999999999),
    LooseEMHollowTrkOffsetEE = cms.double(999999999),
    LooseEMHollowTrkSlopeEB = cms.double(0.0),
    LooseEMHollowTrkSlopeEE = cms.double(0.0),
    LooseEMR9CutEB = cms.double(0.0),
    LooseEMR9CutEE = cms.double(0.0),
    LooseEMSolidNTrkEB = cms.int32(999999999),
    LooseEMSolidNTrkEE = cms.int32(999999999),
    LooseEMSolidTrkEB = cms.double(999999999),
    LooseEMSolidTrkEE = cms.double(999999999),
    LooseEMSolidTrkOffsetEB = cms.double(999999999),
    LooseEMSolidTrkOffsetEE = cms.double(999999999),
    LooseEMSolidTrkSlopeEB = cms.double(0.0),
    LooseEMSolidTrkSlopeEE = cms.double(0.0),
    LoosePhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LoosePhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LoosePhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LoosePhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    LoosePhotonEtaWidthEB = cms.double(999999999),
    LoosePhotonEtaWidthEE = cms.double(999999999),
    LoosePhotonHadOverEMEB = cms.double(0.05),
    LoosePhotonHadOverEMEE = cms.double(0.05),
    LoosePhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    LoosePhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    LoosePhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    LoosePhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    LoosePhotonHollowNTrkEB = cms.int32(999999999),
    LoosePhotonHollowNTrkEE = cms.int32(999999999),
    LoosePhotonHollowTrkOffsetEB = cms.double(3.5),
    LoosePhotonHollowTrkOffsetEE = cms.double(3.5),
    LoosePhotonHollowTrkSlopeEB = cms.double(0.001),
    LoosePhotonHollowTrkSlopeEE = cms.double(0.001),
    LoosePhotonR9CutEB = cms.double(0.0),
    LoosePhotonR9CutEE = cms.double(0.0),
    LoosePhotonSolidNTrkEB = cms.int32(999999999),
    LoosePhotonSolidNTrkEE = cms.int32(999999999),
    LoosePhotonSolidTrkEB = cms.double(999999999),
    LoosePhotonSolidTrkEE = cms.double(999999999),
    LoosePhotonSolidTrkOffsetEB = cms.double(999999999),
    LoosePhotonSolidTrkOffsetEE = cms.double(999999999),
    LoosePhotonSolidTrkSlopeEB = cms.double(0.0),
    LoosePhotonSolidTrkSlopeEE = cms.double(0.0),
    RequireFiducial = cms.bool(False),
    TightPhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    TightPhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    TightPhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    TightPhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    TightPhotonEtaWidthEB = cms.double(0.013),
    TightPhotonEtaWidthEE = cms.double(0.03),
    TightPhotonHadOverEMEB = cms.double(0.05),
    TightPhotonHadOverEMEE = cms.double(0.05),
    TightPhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    TightPhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    TightPhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    TightPhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    TightPhotonHollowNTrkEB = cms.int32(999999999),
    TightPhotonHollowNTrkEE = cms.int32(999999999),
    TightPhotonHollowTrkOffsetEB = cms.double(2.0),
    TightPhotonHollowTrkOffsetEE = cms.double(2.0),
    TightPhotonHollowTrkSlopeEB = cms.double(0.001),
    TightPhotonHollowTrkSlopeEE = cms.double(0.001),
    TightPhotonR9CutEB = cms.double(0.0),
    TightPhotonR9CutEE = cms.double(0.0),
    TightPhotonSolidNTrkEB = cms.int32(999999999),
    TightPhotonSolidNTrkEE = cms.int32(999999999),
    TightPhotonSolidTrkEB = cms.double(999999999),
    TightPhotonSolidTrkEE = cms.double(999999999),
    TightPhotonSolidTrkOffsetEB = cms.double(999999999),
    TightPhotonSolidTrkOffsetEE = cms.double(999999999),
    TightPhotonSolidTrkSlopeEB = cms.double(0.0),
    TightPhotonSolidTrkSlopeEE = cms.double(0.0),
    doCutBased = cms.bool(True),
    photonCutBasedIDLooseEMLabel = cms.string('PhotonCutBasedIDLooseEM'),
    photonCutBasedIDLooseLabel = cms.string('PhotonCutBasedIDLoose'),
    photonCutBasedIDTightLabel = cms.string('PhotonCutBasedIDTight'),
    photonLabel = cms.string(''),
    photonProducer = cms.string('photons')
)


process.TauRefProducer = cms.EDProducer("HLTTauRefProducer",
    Electrons = cms.untracked.PSet(
        ElectronCollection = cms.untracked.InputTag("gedGsfElectrons"),
        IdCollection = cms.untracked.InputTag("elecIDext"),
        InnerConeDR = cms.untracked.double(0.02),
        MaxIsoVar = cms.untracked.double(0.02),
        OuterConeDR = cms.untracked.double(0.6),
        TrackCollection = cms.untracked.InputTag("generalTracks"),
        doElectrons = cms.untracked.bool(True),
        doID = cms.untracked.bool(False),
        doTrackIso = cms.untracked.bool(True),
        lipMinTrack = cms.untracked.double(0.2),
        ptMin = cms.untracked.double(15.0),
        ptMinTrack = cms.untracked.double(1.5)
    ),
    EtaMax = cms.untracked.double(2.3),
    Jets = cms.untracked.PSet(
        JetCollection = cms.untracked.InputTag("ak4PFJetsCHS"),
        doJets = cms.untracked.bool(False),
        etMin = cms.untracked.double(15.0)
    ),
    MET = cms.untracked.PSet(
        METCollection = cms.untracked.InputTag("caloMet"),
        doMET = cms.untracked.bool(True),
        ptMin = cms.untracked.double(0.0)
    ),
    Muons = cms.untracked.PSet(
        MuonCollection = cms.untracked.InputTag("muons"),
        doMuons = cms.untracked.bool(True),
        ptMin = cms.untracked.double(15.0)
    ),
    PFTaus = cms.untracked.PSet(
        PFTauDiscriminators = cms.untracked.VInputTag(cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding"), cms.InputTag("hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits"), cms.InputTag("hpsPFTauDiscriminationByLooseMuonRejection2")),
        PFTauProducer = cms.untracked.InputTag("hpsPFTauProducer"),
        doPFTaus = cms.untracked.bool(True),
        ptMin = cms.untracked.double(15.0)
    ),
    Photons = cms.untracked.PSet(
        ECALIso = cms.untracked.double(3.0),
        PhotonCollection = cms.untracked.InputTag("gedPhotons"),
        doPhotons = cms.untracked.bool(False),
        etMin = cms.untracked.double(15.0)
    ),
    Towers = cms.untracked.PSet(
        TowerCollection = cms.untracked.InputTag("towerMaker"),
        doTowers = cms.untracked.bool(False),
        etMin = cms.untracked.double(10.0),
        towerIsolation = cms.untracked.double(5.0)
    )
)


process.ak4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.7),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ancientMuonSeed = cms.EDProducer("MuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    CSC_01 = cms.vdouble(0.166, 0.0, 0.0, 0.031, 0.0, 
        0.0),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    CSC_02 = cms.vdouble(0.612, -0.207, -0.0, 0.067, -0.001, 
        0.0),
    CSC_03 = cms.vdouble(0.787, -0.338, 0.029, 0.101, -0.008, 
        0.0),
    CSC_12 = cms.vdouble(-0.161, 0.254, -0.047, 0.042, -0.007, 
        0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    CSC_13 = cms.vdouble(0.901, -1.302, 0.533, 0.045, 0.005, 
        0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    CSC_14 = cms.vdouble(0.606, -0.181, -0.002, 0.111, -0.003, 
        0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    CSC_23 = cms.vdouble(-0.081, 0.113, -0.029, 0.015, 0.008, 
        0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    CSC_24 = cms.vdouble(0.004, 0.021, -0.002, 0.053, 0.0, 
        0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_34 = cms.vdouble(0.062, -0.067, 0.019, 0.021, 0.003, 
        0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
    DT_12 = cms.vdouble(0.183, 0.054, -0.087, 0.028, 0.002, 
        0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13 = cms.vdouble(0.315, 0.068, -0.127, 0.051, -0.002, 
        0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    DT_14 = cms.vdouble(0.359, 0.052, -0.107, 0.072, -0.004, 
        0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    DT_23 = cms.vdouble(0.13, 0.023, -0.057, 0.028, 0.004, 
        0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    DT_24 = cms.vdouble(0.176, 0.014, -0.051, 0.051, 0.003, 
        0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    DT_34 = cms.vdouble(0.044, 0.004, -0.013, 0.029, 0.003, 
        0.0),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    OL_1213 = cms.vdouble(0.96, -0.737, 0.0, 0.052, 0.0, 
        0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    OL_1222 = cms.vdouble(0.848, -0.591, 0.0, 0.062, 0.0, 
        0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    OL_1232 = cms.vdouble(0.184, 0.0, 0.0, 0.066, 0.0, 
        0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    OL_2213 = cms.vdouble(0.117, 0.0, 0.0, 0.044, 0.0, 
        0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_2222 = cms.vdouble(0.107, 0.0, 0.0, 0.04, 0.0, 
        0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    SMB_10 = cms.vdouble(1.387, -0.038, 0.0, 0.19, 0.0, 
        0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    SMB_11 = cms.vdouble(1.247, 0.72, -0.802, 0.229, -0.075, 
        0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SMB_12 = cms.vdouble(2.128, -0.956, 0.0, 0.199, 0.0, 
        0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SMB_20 = cms.vdouble(1.011, -0.052, 0.0, 0.188, 0.0, 
        0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    SMB_21 = cms.vdouble(1.043, -0.124, 0.0, 0.183, 0.0, 
        0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    SMB_22 = cms.vdouble(1.474, -0.758, 0.0, 0.185, 0.0, 
        0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    SMB_30 = cms.vdouble(0.505, -0.022, 0.0, 0.215, 0.0, 
        0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    SMB_31 = cms.vdouble(0.549, -0.145, 0.0, 0.207, 0.0, 
        0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    SMB_32 = cms.vdouble(0.67, -0.327, 0.0, 0.22, 0.0, 
        0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    SME_11 = cms.vdouble(3.295, -1.527, 0.112, 0.378, 0.02, 
        0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SME_12 = cms.vdouble(0.102, 0.599, 0.0, 0.38, 0.0, 
        0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    SME_13 = cms.vdouble(-1.286, 1.711, 0.0, 0.356, 0.0, 
        0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SME_21 = cms.vdouble(-0.529, 1.194, -0.358, 0.472, 0.086, 
        0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SME_22 = cms.vdouble(-1.207, 1.491, -0.251, 0.189, 0.243, 
        0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SME_31 = cms.vdouble(-1.594, 1.482, -0.317, 0.487, 0.097, 
        0.0),
    SME_32 = cms.vdouble(-0.901, 1.333, -0.47, 0.41, 0.073, 
        0.0),
    SME_41 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    SME_42 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    crackEtas = cms.vdouble(0.2, 1.6, 1.7),
    crackWindow = cms.double(0.04),
    deltaEtaCrackSearchWindow = cms.double(0.25),
    deltaEtaSearchWindow = cms.double(0.2),
    deltaPhiSearchWindow = cms.double(0.25),
    scaleDT = cms.bool(True)
)


process.beamhaloTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('BeamHaloNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('CkfTrajectoryBuilderBeamHalo')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('BeamHaloPropagatorAlong'),
        propagatorOppositeTISE = cms.string('BeamHaloPropagatorOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("beamhaloTrackerSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.beamhaloTrackerSeedingLayers = cms.EDProducer("SeedingLayersEDProducer",
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs')
    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(False)
    ),
    TEC1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    TEC2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    TEC3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    TEC4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    TEC5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    TEC6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    TID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(False)
    ),
    layerList = cms.vstring('FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'TID2_pos+TID3_pos', 
        'TID2_neg+TID3_neg', 
        'TEC1_neg+TEC2_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_neg+TEC3_neg', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_neg+TEC4_neg', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_neg+TEC5_neg', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_neg+TEC6_neg', 
        'TEC5_pos+TEC6_pos', 
        'TEC7_neg+TEC8_neg', 
        'TEC7_pos+TEC8_pos', 
        'TEC8_neg+TEC9_neg', 
        'TEC8_pos+TEC9_pos')
)


process.beamhaloTrackerSeeds = cms.EDProducer("CtfSpecialSeedGenerator",
    Charges = cms.vint32(-1, 1),
    CheckHitsAreOnDifferentLayers = cms.bool(False),
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    ErrorRescaling = cms.double(50.0),
    MaxNumberOfCosmicClusters = cms.uint32(10000),
    MaxNumberOfPixelClusters = cms.uint32(10000),
    OrderedHitsFactoryPSets = cms.VPSet(cms.PSet(
        ComponentName = cms.string('BeamHaloPairGenerator'),
        LayerSrc = cms.InputTag("beamhaloTrackerSeedingLayers"),
        NavigationDirection = cms.string('outsideIn'),
        PropagationDirection = cms.string('alongMomentum'),
        maxTheta = cms.double(0.1)
    ), 
        cms.PSet(
            ComponentName = cms.string('BeamHaloPairGenerator'),
            LayerSrc = cms.InputTag("beamhaloTrackerSeedingLayers"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('oppositeToMomentum'),
            maxTheta = cms.double(0.1)
        )),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducer'),
        RegionPSet = cms.PSet(
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            originXPos = cms.double(0.0),
            originYPos = cms.double(0.0),
            originZPos = cms.double(0.0),
            precise = cms.bool(True),
            ptMin = cms.double(0.9),
            useMultipleScattering = cms.bool(False)
        )
    ),
    SeedMomentum = cms.double(15.0),
    SeedsFromNegativeY = cms.bool(False),
    SeedsFromPositiveY = cms.bool(False),
    SetMomentum = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    UseScintillatorsConstraint = cms.bool(False),
    doClusterCheck = cms.bool(True),
    maxSeeds = cms.int32(10000),
    requireBOFF = cms.bool(False)
)


process.beamhaloTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('beamhalo'),
    Fitter = cms.string('KFFittingSmootherBH'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('BeamHaloNavigationSchool'),
    Propagator = cms.string('BeamHaloPropagatorAlong'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('beamhaloTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("beamhaloTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.bmtfDigis = cms.EDProducer("L1TRawToDigi",
    FWId = cms.uint32(1),
    FedIds = cms.vint32(1376, 1377),
    InputLabel = cms.InputTag("rawDataCollector"),
    Setup = cms.string('stage2::BMTFSetup'),
    lenAMC13Header = cms.untracked.int32(8),
    lenAMC13Trailer = cms.untracked.int32(8),
    lenAMCHeader = cms.untracked.int32(8),
    lenAMCTrailer = cms.untracked.int32(0),
    lenSlinkHeader = cms.untracked.int32(8),
    lenSlinkTrailer = cms.untracked.int32(8)
)


process.bunchSpacingProducer = cms.EDProducer("BunchSpacingProducer",
    bunchSpacingOverride = cms.uint32(50),
    overrideBunchSpacing = cms.bool(True)
)


process.caloMet = cms.EDProducer("CaloMETProducer",
    alias = cms.string('caloMet'),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.3),
    noHF = cms.bool(False),
    src = cms.InputTag("towerMaker")
)


process.caloMetBE = cms.EDProducer("CaloMETProducer",
    alias = cms.string('caloMetBE'),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.3),
    noHF = cms.bool(True),
    src = cms.InputTag("towerMaker")
)


process.caloMetBEFO = cms.EDProducer("CaloMETProducer",
    alias = cms.string('caloMetBEFO'),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0.3),
    noHF = cms.bool(False),
    src = cms.InputTag("towerMakerWithHO")
)


process.caloMetM = cms.EDProducer("MuonMET",
    metTypeInputTag = cms.InputTag("CaloMET"),
    muonMETDepositValueMapInputTag = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    muonsInputTag = cms.InputTag("muons"),
    uncorMETInputTag = cms.InputTag("caloMet")
)


process.caloStage1Digis = cms.EDProducer("L1TRawToDigi",
    FedIds = cms.vint32(1352),
    Setup = cms.string('stage1::CaloSetup')
)


process.caloStage1FinalDigis = cms.EDProducer("L1TPhysicalEtAdder",
    InputCollection = cms.InputTag("caloStage1Digis"),
    InputHFCountsCollection = cms.InputTag("caloStage1Digis","HFBitCounts"),
    InputHFSumsCollection = cms.InputTag("caloStage1Digis","HFRingSums"),
    InputIsoTauCollection = cms.InputTag("caloStage1Digis","isoTaus"),
    InputPreGtJetCollection = cms.InputTag("caloStage1Digis"),
    InputRlxTauCollection = cms.InputTag("caloStage1Digis","rlxTaus")
)


process.caloStage1LegacyFormatDigis = cms.EDProducer("L1TCaloUpgradeToGCTConverter",
    InputCollection = cms.InputTag("caloStage1Digis"),
    InputHFCountsCollection = cms.InputTag("caloStage1Digis","HFBitCounts"),
    InputHFSumsCollection = cms.InputTag("caloStage1Digis","HFRingSums"),
    InputIsoTauCollection = cms.InputTag("caloStage1Digis","isoTaus"),
    InputRlxTauCollection = cms.InputTag("caloStage1Digis","rlxTaus")
)


process.caloStage2Digis = cms.EDProducer("L1TRawToDigi",
    FedIds = cms.vint32(1360, 1366),
    MinFeds = cms.uint32(1),
    Setup = cms.string('stage2::CaloSetup')
)


process.castorDigis = cms.EDProducer("CastorRawToDigi",
    CastorCtdc = cms.bool(False),
    CastorFirstFED = cms.int32(690),
    ComplainEmptyData = cms.untracked.bool(False),
    ExceptionEmptyData = cms.untracked.bool(False),
    ExpectedOrbitMessageTime = cms.int32(-1),
    FEDs = cms.untracked.vint32(690, 691, 692, 693, 722),
    FilterDataQuality = cms.bool(True),
    InputLabel = cms.InputTag("rawDataCollector"),
    UnpackTTP = cms.bool(True),
    UnpackZDC = cms.bool(True),
    UseNominalOrbitMessageTime = cms.bool(True),
    ZDCFirstFED = cms.int32(693),
    firstSample = cms.int32(0),
    lastSample = cms.int32(9),
    silent = cms.untracked.bool(False)
)


process.ckfInOutTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('inOutEcalSeededConv'),
    ComponentName = cms.string('ckfInOutTracksFromConversions'),
    Fitter = cms.string('KFFittingSmootherForInOut'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('conversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('inOutTrackSCAssociationCollection'),
    src = cms.InputTag("conversionTrackCandidates","inOutTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection')
)


process.ckfOutInTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    AlgorithmName = cms.string('outInEcalSeededConv'),
    ComponentName = cms.string('ckfOutInTracksFromConversions'),
    Fitter = cms.string('KFFitterForOutIn'),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('alongMomElePropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('conversionTrackCandidates'),
    recoTrackSCAssociationCollection = cms.string('outInTrackSCAssociationCollection'),
    src = cms.InputTag("conversionTrackCandidates","outInTracksFromConversions"),
    trackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection')
)


process.ckfTrackCandidatesP5 = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("combinedP5SeedsForCTF"),
    useHitsSplitting = cms.bool(True)
)


process.ckfTrackCandidatesP5LHCNavigation = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("combinedP5SeedsForCTF"),
    useHitsSplitting = cms.bool(True)
)


process.cleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    HybridBarrelSeedThr = cms.double(1.0),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitSeverityToBeExcluded = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    clustershapecollection = cms.string(''),
    dynamicEThresh = cms.bool(False),
    dynamicPhiRoad = cms.bool(False),
    eThreshA = cms.double(0.003),
    eThreshB = cms.double(0.1),
    eseed = cms.double(0.35),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    excludeFlagged = cms.bool(True),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    recHitsCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    step = cms.int32(17),
    superclusterCollection = cms.string(''),
    useEtForXi = cms.bool(True),
    xi = cms.double(0.0)
)


process.combinatorialcosmicseedfinderP5 = cms.EDProducer("CtfSpecialSeedGenerator",
    Charges = cms.vint32(-1),
    CheckHitsAreOnDifferentLayers = cms.bool(False),
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    DontCountDetsAboveNClusters = cms.uint32(20),
    ErrorRescaling = cms.double(50.0),
    LowerScintillatorParameters = cms.PSet(
        GlobalX = cms.double(0.0),
        GlobalY = cms.double(-100.0),
        GlobalZ = cms.double(50.0),
        LenghtInZ = cms.double(100.0),
        WidthInX = cms.double(100.0)
    ),
    MaxNumberOfCosmicClusters = cms.uint32(300),
    MaxNumberOfPixelClusters = cms.uint32(300),
    OrderedHitsFactoryPSets = cms.VPSet(cms.PSet(
        ComponentName = cms.string('GenericTripletGenerator'),
        LayerSrc = cms.InputTag("combinatorialcosmicseedingtripletsP5"),
        NavigationDirection = cms.string('outsideIn'),
        PropagationDirection = cms.string('alongMomentum')
    ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTOBP5"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('alongMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECposP5"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('alongMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECposP5"),
            NavigationDirection = cms.string('insideOut'),
            PropagationDirection = cms.string('alongMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECnegP5"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('alongMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECnegP5"),
            NavigationDirection = cms.string('insideOut'),
            PropagationDirection = cms.string('alongMomentum')
        )),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducer'),
        RegionPSet = cms.PSet(
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            originXPos = cms.double(0.0),
            originYPos = cms.double(0.0),
            originZPos = cms.double(0.0),
            precise = cms.bool(True),
            ptMin = cms.double(0.9),
            useMultipleScattering = cms.bool(False)
        )
    ),
    SeedMomentum = cms.double(5.0),
    SeedsFromNegativeY = cms.bool(False),
    SeedsFromPositiveY = cms.bool(True),
    SetMomentum = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    UpperScintillatorParameters = cms.PSet(
        GlobalX = cms.double(0.0),
        GlobalY = cms.double(300.0),
        GlobalZ = cms.double(50.0),
        LenghtInZ = cms.double(100.0),
        WidthInX = cms.double(100.0)
    ),
    UseScintillatorsConstraint = cms.bool(False),
    doClusterCheck = cms.bool(True),
    maxSeeds = cms.int32(10000),
    requireBOFF = cms.bool(True)
)


process.combinatorialcosmicseedingpairsTECnegP5 = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_neg+TEC7_neg', 
        'TEC7_neg+TEC8_neg', 
        'TEC8_neg+TEC9_neg')
)


process.combinatorialcosmicseedingpairsTECposP5 = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_pos+TEC6_pos', 
        'TEC6_pos+TEC7_pos', 
        'TEC7_pos+TEC8_pos', 
        'TEC8_pos+TEC9_pos')
)


process.combinatorialcosmicseedingpairsTOBP5 = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(False),
        useSimpleRphiHitsCleaner = cms.bool(True)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    layerList = cms.vstring('TOB5+TOB6', 
        'TOB4+TOB5')
)


process.combinatorialcosmicseedingtripletsP5 = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(False),
        useSimpleRphiHitsCleaner = cms.bool(True)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    layerList = cms.vstring('TOB4+TOB5+TOB6', 
        'TOB3+TOB5+TOB6', 
        'TOB3+TOB4+TOB5', 
        'TOB2+TOB4+TOB5', 
        'TOB3+TOB4+TOB6', 
        'TOB2+TOB4+TOB6')
)


process.combinedP5SeedsForCTF = cms.EDProducer("SeedCombiner",
    PairCollection = cms.InputTag("combinatorialcosmicseedfinderP5"),
    TripletCollection = cms.InputTag("simpleCosmicBONSeeds"),
    seedCollections = cms.VInputTag(cms.InputTag("combinatorialcosmicseedfinderP5"), cms.InputTag("simpleCosmicBONSeeds"))
)


process.consecutiveHEs = cms.EDProducer("EventWithHistoryProducerFromL1ABC",
    l1ABCCollection = cms.InputTag("scalersRawToDigi")
)


process.conversionTrackCandidates = cms.EDProducer("ConversionTrackCandidateProducer",
    InOutRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    MeasurementTrackerName = cms.string(''),
    MissingHitPenalty = cms.double(20.0),
    OutInRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForConversions'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('TrajectoryBuilderForConversions')
    ),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('alongMomElePropagator'),
        propagatorOppositeTISE = cms.string('oppositeToMomElePropagator')
    ),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    bcBarrelCollection = cms.InputTag("cosmicBasicClusters","CosmicBarrelBasicClusters"),
    bcECut = cms.double(1.5),
    bcEndcapCollection = cms.InputTag("cosmicBasicClusters","CosmicEndcapBasicClusters"),
    bcEtCut = cms.double(1.5),
    ecalIsoCut_offset = cms.double(999999999),
    ecalIsoCut_slope = cms.double(0.0),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    fractionShared = cms.double(0.5),
    hOverEConeSize = cms.double(0.15),
    hcalTowers = cms.InputTag("towerMaker"),
    inOutTrackCandidateCollection = cms.string('inOutTracksFromConversions'),
    inOutTrackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    isoConeR = cms.double(0.4),
    isoEMin = cms.double(0.08),
    isoEtMin = cms.double(0.0),
    isoEtaSlice = cms.double(2.5),
    isoInnerConeR = cms.double(3.5),
    maxHOverE = cms.double(0.15),
    maxNumOfSeedsInOut = cms.int32(50),
    maxNumOfSeedsOutIn = cms.int32(50),
    minSCEt = cms.double(20.0),
    outInTrackCandidateCollection = cms.string('outInTracksFromConversions'),
    outInTrackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    scHybridBarrelProducer = cms.InputTag("cosmicSuperClusters","CosmicBarrelSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("cosmicSuperClusters","CosmicEndcapSuperClusters"),
    useEtCut = cms.bool(True),
    useHitsSplitting = cms.bool(False),
    useNumXstals = cms.bool(True),
    vetoClusteredHits = cms.bool(False)
)


process.conversions = cms.EDProducer("ConvertedPhotonProducer",
    AlgorithmName = cms.string('ecalSeeded'),
    MVA_weights_location = cms.string('RecoEgamma/EgammaTools/data/TMVAnalysis_Likelihood.weights.txt'),
    bcBarrelCollection = cms.InputTag("cosmicBasicClusters","CosmicBarrelBasicClusters"),
    bcEndcapCollection = cms.InputTag("cosmicBasicClusters","CosmicEndcapBasicClusters"),
    cleanedConvertedPhotonCollection = cms.string(''),
    conversionIOTrackProducer = cms.string('ckfInOutTracksFromConversions'),
    conversionOITrackProducer = cms.string('ckfOutInTracksFromConversions'),
    convertedPhotonCollection = cms.string('uncleanedConversions'),
    dRForConversionRecovery = cms.double(0.3),
    deltaCotCut = cms.double(0.05),
    generalTracksSrc = cms.InputTag("generalTracks"),
    hOverEConeSize = cms.double(0.15),
    hcalTowers = cms.InputTag("towerMaker"),
    inOutTrackCollection = cms.string(''),
    inOutTrackSCAssociation = cms.string('inOutTrackSCAssociationCollection'),
    maxDelta = cms.double(0.01),
    maxHOverE = cms.double(0.15),
    maxNbrOfIterations = cms.int32(40),
    maxNumOfCandidates = cms.int32(3),
    maxReducedChiSq = cms.double(225.0),
    minApproachDisCut = cms.double(0.0),
    minChiSqImprovement = cms.double(50.0),
    minSCEt = cms.double(20.0),
    outInTrackCollection = cms.string(''),
    outInTrackSCAssociation = cms.string('outInTrackSCAssociationCollection'),
    recoverOneTrackCase = cms.bool(False),
    risolveConversionAmbiguity = cms.bool(True),
    scHybridBarrelProducer = cms.InputTag("cosmicSuperClusters","CosmicBarrelSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("cosmicSuperClusters","CosmicEndcapSuperClusters")
)


process.correctedHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(True),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    hyb_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(8.0),
        brLinearLowThr = cms.double(1.1),
        fBremVec = cms.vdouble(-0.04382, 0.1169, 0.9267, -0.0009413, 1.419),
        fEtEtaVec = cms.vdouble(0, 1.00121, -0.63672, 0, 0, 
            0, 0.5655, 6.457, 0.5081, 8.0, 
            1.023, -0.00181)
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("hybridSuperClusters"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Hybrid')
)


process.cosmicBasicClusters = cms.EDProducer("CosmicClusterProducer",
    BarrelSecondThr = cms.double(4.99),
    BarrelSeedThr = cms.double(4.99),
    BarrelSingleThr = cms.double(14.99),
    BarrelSupThr = cms.double(2.0),
    EndcapSecondThr = cms.double(9.99),
    EndcapSeedThr = cms.double(9.99),
    EndcapSingleThr = cms.double(25.99),
    EndcapSupThr = cms.double(3.0),
    VerbosityLevel = cms.string('ERROR'),
    barrelClusterCollection = cms.string('CosmicBarrelBasicClusters'),
    barrelHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    barrelShapeAssociation = cms.string('CosmicBarrelShapeAssoc'),
    barrelUncalibHits = cms.InputTag("ecalFixedAlphaBetaFitUncalibRecHit","EcalUncalibRecHitsEB"),
    clustershapecollectionEB = cms.string('CosmicBarrelShape'),
    clustershapecollectionEE = cms.string('CosmicEndcapShape'),
    endcapClusterCollection = cms.string('CosmicEndcapBasicClusters'),
    endcapHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    endcapShapeAssociation = cms.string('CosmicEndcapShapeAssoc'),
    endcapUncalibHits = cms.InputTag("ecalFixedAlphaBetaFitUncalibRecHit","EcalUncalibRecHitsEE"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    )
)


process.cosmicCandidateFinderP5 = cms.EDProducer("CosmicTrackFinder",
    Chi2Cut = cms.double(30.0),
    GeometricStructure = cms.untracked.string('STANDARD'),
    HitProducer = cms.string('siStripRecHits'),
    MinHits = cms.int32(4),
    TTRHBuilder = cms.string('WithTrackAngle'),
    cosmicSeeds = cms.InputTag("cosmicseedfinderP5"),
    debug = cms.untracked.bool(True),
    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    pixelRecHits = cms.InputTag("siPixelRecHits"),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    stereorecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHit"),
    useHitsSplitting = cms.bool(True)
)


process.cosmicDCCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("cosmicDCSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.cosmicDCSeeds = cms.EDProducer("OutsideInMuonSeeder",
    cut = cms.string('pt > 2 && abs(eta)<1.2 && phi<0'),
    debug = cms.untracked.bool(False),
    errorRescaleFactor = cms.double(2.0),
    fromVertex = cms.bool(False),
    hitCollector = cms.string('hitCollectorForCosmicDCSeeds'),
    hitsToTry = cms.int32(3),
    layersToTry = cms.int32(3),
    maxEtaForTOB = cms.double(1.5),
    minEtaForTEC = cms.double(0.7),
    muonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    src = cms.InputTag("muonsFromCosmics"),
    trackerPropagator = cms.string('PropagatorWithMaterial')
)


process.cosmicDCTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("cosmicDCCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.cosmicMuons = cms.EDProducer("CosmicMuonProducer",
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeed'),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(2),
            MaxChi2 = cms.double(100.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        BuildTraversingMuon = cms.bool(False),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
        EnableCSCMeasurement = cms.bool(True),
        EnableDTMeasurement = cms.bool(True),
        EnableRPCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        ),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(0),
            MaxChi2 = cms.double(3000.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        Strict1Leg = cms.bool(False)
    )
)


process.cosmicMuons1Leg = cms.EDProducer("CosmicMuonProducer",
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeed'),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(2),
            MaxChi2 = cms.double(100.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        BuildTraversingMuon = cms.bool(True),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
        EnableCSCMeasurement = cms.bool(True),
        EnableDTMeasurement = cms.bool(True),
        EnableRPCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        ),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(0),
            MaxChi2 = cms.double(3000.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        Strict1Leg = cms.bool(False)
    )
)


process.cosmicMuonsEndCapsOnly = cms.EDProducer("CosmicMuonProducer",
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeedEndCapsOnly'),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(2),
            MaxChi2 = cms.double(100.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        BuildTraversingMuon = cms.bool(False),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
        EnableCSCMeasurement = cms.bool(True),
        EnableDTMeasurement = cms.bool(False),
        EnableRPCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(False),
            Endcap = cms.bool(True)
        ),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(0),
            MaxChi2 = cms.double(3000.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        Strict1Leg = cms.bool(False)
    )
)


process.cosmicMuonsNoRPC = cms.EDProducer("CosmicMuonProducer",
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeed'),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(2),
            MaxChi2 = cms.double(100.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        BuildTraversingMuon = cms.bool(False),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
        EnableCSCMeasurement = cms.bool(True),
        EnableDTMeasurement = cms.bool(True),
        EnableRPCMeasurement = cms.bool(False),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        ),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(0),
            MaxChi2 = cms.double(3000.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        Strict1Leg = cms.bool(False)
    )
)


process.cosmicMuonsWitht0Correction = cms.EDProducer("CosmicMuonProducer",
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeedWitht0Correction'),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(2),
            MaxChi2 = cms.double(100.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        BuildTraversingMuon = cms.bool(False),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        DTRecSegmentLabel = cms.InputTag("dt4DSegmentsT0Seg"),
        EnableCSCMeasurement = cms.bool(True),
        EnableDTMeasurement = cms.bool(True),
        EnableRPCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        ),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            ExcludeRPCFromFit = cms.bool(False),
            Granularity = cms.int32(0),
            MaxChi2 = cms.double(3000.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        Strict1Leg = cms.bool(False)
    )
)


process.cosmicSuperClusters = cms.EDProducer("Multi5x5SuperClusterProducer",
    VerbosityLevel = cms.string('ERROR'),
    barrelClusterTag = cms.InputTag("cosmicBasicClusters","CosmicBarrelBasicClusters"),
    barrelEtaSearchRoad = cms.double(0.2),
    barrelPhiSearchRoad = cms.double(0.55),
    barrelSuperclusterCollection = cms.string('CosmicBarrelSuperClusters'),
    bremRecoveryPset = cms.PSet(
        barrel = cms.PSet(
            cryMin = cms.int32(2),
            cryVec = cms.vint32(16, 13, 11, 10, 9, 
                8, 7, 6, 5, 4, 
                3),
            etVec = cms.vdouble(5.0, 10.0, 15.0, 20.0, 30.0, 
                40.0, 45.0, 55.0, 135.0, 195.0, 
                225.0)
        ),
        endcap = cms.PSet(
            a = cms.double(47.85),
            b = cms.double(108.8),
            c = cms.double(0.1201)
        )
    ),
    doBarrel = cms.bool(True),
    doEndcaps = cms.bool(True),
    dynamicPhiRoad = cms.bool(False),
    endcapClusterTag = cms.InputTag("cosmicBasicClusters","CosmicEndcapBasicClusters"),
    endcapEtaSearchRoad = cms.double(0.14),
    endcapPhiSearchRoad = cms.double(0.6),
    endcapSuperclusterCollection = cms.string('CosmicEndcapSuperClusters'),
    seedTransverseEnergyThreshold = cms.double(0.0)
)


process.cosmicTrackSplitter = cms.EDProducer("CosmicTrackSplitter",
    detsToIgnore = cms.vuint32(),
    dxyCut = cms.double(9999.0),
    dzCut = cms.double(9999.0),
    excludePixelHits = cms.bool(False),
    minimumHits = cms.uint32(6),
    replaceWithInactiveHits = cms.bool(False),
    stripAllInvalidHits = cms.bool(False),
    stripBackInvalidHits = cms.bool(True),
    stripFrontInvalidHits = cms.bool(True),
    tjTkAssociationMapTag = cms.InputTag("cosmictrackfinderCosmics"),
    tracks = cms.InputTag("cosmictrackfinderCosmics")
)


process.cosmicseedfinderP5 = cms.EDProducer("CosmicSeedGenerator",
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    DontCountDetsAboveNClusters = cms.uint32(20),
    GeometricStructure = cms.untracked.string('STANDARD'),
    HitsForSeeds = cms.untracked.string('pairs'),
    MaxNumberOfCosmicClusters = cms.uint32(300),
    MaxNumberOfPixelClusters = cms.uint32(300),
    NegativeYOnly = cms.bool(False),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    PositiveYOnly = cms.bool(False),
    SeedPt = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    doClusterCheck = cms.bool(True),
    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxSeeds = cms.int32(10000),
    originHalfLength = cms.double(90.0),
    originRadius = cms.double(150.0),
    originZPosition = cms.double(0.0),
    ptMin = cms.double(0.9),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    stereorecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHit")
)


process.cosmictrackfinderCosmics = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('cosmic'),
    Fitter = cms.string('RKFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("cosmicCandidateFinderP5"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.cosmictrackfinderP5 = cms.EDProducer("CosmicTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    chi2n_par = cms.double(10.0),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    max_eta = cms.double(2.0),
    max_z0 = cms.double(300.0),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_nHit = cms.uint32(5),
    min_nPixelHit = cms.uint32(0),
    min_pt = cms.double(1.0),
    qualityBit = cms.string(''),
    src = cms.InputTag("cosmictrackfinderCosmics")
)


process.csc2DRecHits = cms.EDProducer("CSCRecHitDProducer",
    CSCDebug = cms.untracked.bool(False),
    CSCNoOfTimeBinsForDynamicPedestal = cms.int32(2),
    CSCStripClusterChargeCut = cms.double(25.0),
    CSCStripClusterSize = cms.untracked.int32(3),
    CSCStripPeakThreshold = cms.double(10.0),
    CSCStripxtalksOffset = cms.double(0.03),
    CSCUseCalibrations = cms.bool(True),
    CSCUseGasGainCorrections = cms.bool(False),
    CSCUseReducedWireTimeWindow = cms.bool(False),
    CSCUseStaticPedestals = cms.bool(False),
    CSCUseTimingCorrections = cms.bool(True),
    CSCWireClusterDeltaT = cms.int32(1),
    CSCWireTimeWindowHigh = cms.int32(15),
    CSCWireTimeWindowLow = cms.int32(0),
    CSCstripWireDeltaTime = cms.int32(8),
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME41 = cms.double(0.03),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0),
    UseAverageTime = cms.bool(False),
    UseFivePoleFit = cms.bool(True),
    UseParabolaFit = cms.bool(False),
    XTasymmetry_ME12 = cms.double(0.015),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME1a = cms.double(0.023),
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME21 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME31 = cms.double(0.023),
    XTasymmetry_ME32 = cms.double(0.023),
    XTasymmetry_ME41 = cms.double(0.023),
    readBadChambers = cms.bool(True),
    readBadChannels = cms.bool(False),
    stripDigiTag = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
    wireDigiTag = cms.InputTag("muonCSCDigis","MuonCSCWireDigi")
)


process.cscSegments = cms.EDProducer("CSCSegmentProducer",
    algo_psets = cms.VPSet(cms.PSet(
        algo_name = cms.string('CSCSegAlgoSK'),
        algo_psets = cms.VPSet(cms.PSet(
            chi2Max = cms.double(99999.0),
            dPhiFineMax = cms.double(0.025),
            dPhiMax = cms.double(0.003),
            dRPhiFineMax = cms.double(8.0),
            dRPhiMax = cms.double(8.0),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True),
            wideSeg = cms.double(3.0)
        ), 
            cms.PSet(
                chi2Max = cms.double(99999.0),
                dPhiFineMax = cms.double(0.025),
                dPhiMax = cms.double(0.025),
                dRPhiFineMax = cms.double(3.0),
                dRPhiMax = cms.double(8.0),
                minLayersApart = cms.int32(2),
                verboseInfo = cms.untracked.bool(True),
                wideSeg = cms.double(3.0)
            )),
        chamber_types = cms.vstring('ME1/a', 
            'ME1/b', 
            'ME1/2', 
            'ME1/3', 
            'ME2/1', 
            'ME2/2', 
            'ME3/1', 
            'ME3/2', 
            'ME4/1', 
            'ME4/2'),
        parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
            1, 1, 1, 1, 1)
    ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoTC'),
            algo_psets = cms.VPSet(cms.PSet(
                SegmentSorting = cms.int32(1),
                chi2Max = cms.double(6000.0),
                chi2ndfProbMin = cms.double(0.0001),
                dPhiFineMax = cms.double(0.02),
                dPhiMax = cms.double(0.003),
                dRPhiFineMax = cms.double(6.0),
                dRPhiMax = cms.double(1.2),
                minLayersApart = cms.int32(2),
                verboseInfo = cms.untracked.bool(True)
            ), 
                cms.PSet(
                    SegmentSorting = cms.int32(1),
                    chi2Max = cms.double(6000.0),
                    chi2ndfProbMin = cms.double(0.0001),
                    dPhiFineMax = cms.double(0.013),
                    dPhiMax = cms.double(0.00198),
                    dRPhiFineMax = cms.double(3.0),
                    dRPhiMax = cms.double(0.6),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True)
                )),
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'),
            parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1)
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoDF'),
            algo_psets = cms.VPSet(cms.PSet(
                CSCSegmentDebug = cms.untracked.bool(False),
                Pruning = cms.untracked.bool(False),
                chi2Max = cms.double(5000.0),
                dPhiFineMax = cms.double(0.025),
                dRPhiFineMax = cms.double(8.0),
                dXclusBoxMax = cms.double(8.0),
                dYclusBoxMax = cms.double(8.0),
                maxDPhi = cms.double(999.0),
                maxDTheta = cms.double(999.0),
                maxRatioResidualPrune = cms.double(3.0),
                minHitsForPreClustering = cms.int32(10),
                minHitsPerSegment = cms.int32(3),
                minLayersApart = cms.int32(2),
                nHitsPerClusterIsShower = cms.int32(20),
                preClustering = cms.untracked.bool(False),
                tanPhiMax = cms.double(0.5),
                tanThetaMax = cms.double(1.2)
            ), 
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(12.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(12.0),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(10),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.8),
                    tanThetaMax = cms.double(2.0)
                ), 
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(8.0),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(30),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2)
                )),
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'),
            parameters_per_chamber_type = cms.vint32(3, 1, 2, 2, 1, 
                2, 1, 2, 1, 2)
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoST'),
            algo_psets = cms.VPSet(cms.PSet(
                BPMinImprovement = cms.double(10000.0),
                BrutePruning = cms.bool(True),
                CSCDebug = cms.untracked.bool(False),
                CorrectTheErrors = cms.bool(True),
                Covariance = cms.double(0.0),
                ForceCovariance = cms.bool(False),
                ForceCovarianceAll = cms.bool(False),
                NormChi2Cut2D = cms.double(20.0),
                NormChi2Cut3D = cms.double(10.0),
                Pruning = cms.bool(True),
                SeedBig = cms.double(0.0015),
                SeedSmall = cms.double(0.0002),
                curvePenalty = cms.double(2.0),
                curvePenaltyThreshold = cms.double(0.85),
                dPhiFineMax = cms.double(0.025),
                dRPhiFineMax = cms.double(8.0),
                dXclusBoxMax = cms.double(4.0),
                dYclusBoxMax = cms.double(8.0),
                hitDropLimit4Hits = cms.double(0.6),
                hitDropLimit5Hits = cms.double(0.8),
                hitDropLimit6Hits = cms.double(0.3333),
                maxDPhi = cms.double(999.0),
                maxDTheta = cms.double(999.0),
                maxRatioResidualPrune = cms.double(3),
                maxRecHitsInCluster = cms.int32(20),
                minHitsPerSegment = cms.int32(3),
                onlyBestSegment = cms.bool(False),
                preClustering = cms.bool(True),
                preClusteringUseChaining = cms.bool(True),
                prePrun = cms.bool(True),
                prePrunLimit = cms.double(3.17),
                tanPhiMax = cms.double(0.5),
                tanThetaMax = cms.double(1.2),
                useShowering = cms.bool(False),
                yweightPenalty = cms.double(1.5),
                yweightPenaltyThreshold = cms.double(1.0)
            ), 
                cms.PSet(
                    BPMinImprovement = cms.double(10000.0),
                    BrutePruning = cms.bool(True),
                    CSCDebug = cms.untracked.bool(False),
                    CorrectTheErrors = cms.bool(True),
                    Covariance = cms.double(0.0),
                    ForceCovariance = cms.bool(False),
                    ForceCovarianceAll = cms.bool(False),
                    NormChi2Cut2D = cms.double(20.0),
                    NormChi2Cut3D = cms.double(10.0),
                    Pruning = cms.bool(True),
                    SeedBig = cms.double(0.0015),
                    SeedSmall = cms.double(0.0002),
                    curvePenalty = cms.double(2.0),
                    curvePenaltyThreshold = cms.double(0.85),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(4.0),
                    dYclusBoxMax = cms.double(8.0),
                    hitDropLimit4Hits = cms.double(0.6),
                    hitDropLimit5Hits = cms.double(0.8),
                    hitDropLimit6Hits = cms.double(0.3333),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3),
                    maxRecHitsInCluster = cms.int32(24),
                    minHitsPerSegment = cms.int32(3),
                    onlyBestSegment = cms.bool(False),
                    preClustering = cms.bool(True),
                    preClusteringUseChaining = cms.bool(True),
                    prePrun = cms.bool(True),
                    prePrunLimit = cms.double(3.17),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2),
                    useShowering = cms.bool(False),
                    yweightPenalty = cms.double(1.5),
                    yweightPenaltyThreshold = cms.double(1.0)
                )),
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'),
            parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1)
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoRU'),
            algo_psets = cms.VPSet(cms.PSet(
                chi2Max = cms.double(100.0),
                chi2Norm_2D_ = cms.double(35),
                chi2_str = cms.double(50.0),
                dPhiIntMax = cms.double(0.005),
                dPhiMax = cms.double(0.006),
                dRIntMax = cms.double(2.0),
                dRMax = cms.double(1.5),
                doCollisions = cms.bool(True),
                minLayersApart = cms.int32(1),
                wideSeg = cms.double(3.0)
            ), 
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.004),
                    dPhiMax = cms.double(0.005),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.003),
                    dPhiMax = cms.double(0.004),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(60.0),
                    chi2Norm_2D_ = cms.double(20),
                    chi2_str = cms.double(30.0),
                    dPhiIntMax = cms.double(0.002),
                    dPhiMax = cms.double(0.003),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(180.0),
                    chi2Norm_2D_ = cms.double(60),
                    chi2_str = cms.double(80.0),
                    dPhiIntMax = cms.double(0.005),
                    dPhiMax = cms.double(0.007),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                ), 
                cms.PSet(
                    chi2Max = cms.double(100.0),
                    chi2Norm_2D_ = cms.double(35),
                    chi2_str = cms.double(50.0),
                    dPhiIntMax = cms.double(0.004),
                    dPhiMax = cms.double(0.006),
                    dRIntMax = cms.double(2.0),
                    dRMax = cms.double(1.5),
                    doCollisions = cms.bool(True),
                    minLayersApart = cms.int32(1),
                    wideSeg = cms.double(3.0)
                )),
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'),
            parameters_per_chamber_type = cms.vint32(1, 2, 3, 4, 5, 
                6, 5, 6, 5, 6)
        )),
    algo_type = cms.int32(4),
    inputObjects = cms.InputTag("csc2DRecHits")
)


process.csctfDigis = cms.EDProducer("CSCTFUnpacker",
    MaxBX = cms.int32(9),
    MinBX = cms.int32(3),
    mappingFile = cms.string(''),
    producer = cms.InputTag("rawDataCollector"),
    slot2sector = cms.vint32(0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0),
    swapME1strips = cms.bool(False)
)


process.ctfWithMaterialTracksCosmics = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidatesP5"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctfWithMaterialTracksP5 = cms.EDProducer("CosmicTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    chi2n_par = cms.double(10.0),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(False),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    max_eta = cms.double(2.0),
    max_z0 = cms.double(300.0),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_nHit = cms.uint32(5),
    min_nPixelHit = cms.uint32(0),
    min_pt = cms.double(1.0),
    qualityBit = cms.string(''),
    src = cms.InputTag("ctfWithMaterialTracksCosmics")
)


process.ctfWithMaterialTracksP5LHCNavigation = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidatesP5LHCNavigation"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctppsDiamondRawToDigi = cms.EDProducer("TotemVFATRawToDigi",
    RawToDigi = cms.PSet(
        BC_fraction = cms.untracked.double(0.6),
        BC_min = cms.untracked.uint32(10),
        EC_fraction = cms.untracked.double(0.6),
        EC_min = cms.untracked.uint32(10),
        printErrorSummary = cms.untracked.uint32(1),
        printUnknownFrameSummary = cms.untracked.uint32(0),
        testBCMostFrequent = cms.uint32(2),
        testCRC = cms.uint32(2),
        testECMostFrequent = cms.uint32(2),
        testFootprint = cms.uint32(2),
        testID = cms.uint32(2),
        verbosity = cms.untracked.uint32(0)
    ),
    RawUnpacking = cms.PSet(

    ),
    fedIds = cms.vuint32(),
    rawDataTag = cms.InputTag("rawDataCollector"),
    subSystem = cms.string('TimingDiamond')
)


process.dedxHarmonic2CTF = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('generic'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("ctfWithMaterialTracksP5")
)


process.dedxHarmonic2CTFP5LHC = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('generic'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation")
)


process.dedxHarmonic2CosmicTF = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('generic'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("cosmictrackfinderP5")
)


process.dedxHitInfoCTF = cms.EDProducer("DeDxHitInfoProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    calibrationPath = cms.string('file:Gains.root'),
    maxTrackEta = cms.double(5.0),
    minTrackHits = cms.uint32(0),
    minTrackPt = cms.double(15),
    shapeTest = cms.bool(True),
    tracks = cms.InputTag("ctfWithMaterialTracksP5"),
    useCalibration = cms.bool(False),
    usePixel = cms.bool(True),
    useStrip = cms.bool(True)
)


process.dedxHitInfoCTFP5LHC = cms.EDProducer("DeDxHitInfoProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    calibrationPath = cms.string('file:Gains.root'),
    maxTrackEta = cms.double(5.0),
    minTrackHits = cms.uint32(0),
    minTrackPt = cms.double(15),
    shapeTest = cms.bool(True),
    tracks = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation"),
    useCalibration = cms.bool(False),
    usePixel = cms.bool(True),
    useStrip = cms.bool(True)
)


process.dedxHitInfoCosmicTF = cms.EDProducer("DeDxHitInfoProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    calibrationPath = cms.string('file:Gains.root'),
    maxTrackEta = cms.double(5.0),
    minTrackHits = cms.uint32(0),
    minTrackPt = cms.double(15),
    shapeTest = cms.bool(True),
    tracks = cms.InputTag("cosmictrackfinderP5"),
    useCalibration = cms.bool(False),
    usePixel = cms.bool(True),
    useStrip = cms.bool(True)
)


process.dedxTruncated40CTF = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('truncated'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("ctfWithMaterialTracksP5")
)


process.dedxTruncated40CTFP5LHC = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('truncated'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation")
)


process.dedxTruncated40CosmicTF = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('truncated'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("cosmictrackfinderP5")
)


process.dt1DRecHits = cms.EDProducer("DTRecHitProducer",
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("muonDTDigis"),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(False),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(False)
    )
)


process.dt4DSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(100.0),
            AlphaMaxTheta = cms.double(100.0),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            intime_cut = cms.double(-1.0),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(False),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(False),
                    doWirePropCorrection = cms.bool(False),
                    tTrigLabel = cms.string('cosmics'),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(False)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits"),
    recHits2DLabel = cms.InputTag("dt2DSegments")
)


process.dt4DSegmentsT0Seg = cms.EDProducer("DTSegment4DT0Corrector",
    debug = cms.untracked.bool(False),
    hit_afterT0_resolution = cms.double(0.03),
    performT0_vdriftSegCorrection = cms.bool(True),
    perform_delta_rejecting = cms.bool(False),
    recAlgo = cms.string('DTLinearDriftAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        driftVelocity = cms.double(0.00543),
        hitResolution = cms.double(0.02),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        )
    ),
    recHits4DLabel = cms.InputTag("dt4DSegments")
)


process.dtDataIntegrityUnpacker = cms.EDProducer("DTUnpackingModule",
    dataType = cms.string('DDU'),
    dqmOnly = cms.bool(True),
    fedbyType = cms.bool(False),
    inputLabel = cms.InputTag("rawDataCollector"),
    readOutParameters = cms.PSet(
        debug = cms.untracked.bool(False),
        localDAQ = cms.untracked.bool(False),
        performDataIntegrityMonitor = cms.untracked.bool(True),
        rosParameters = cms.PSet(
            debug = cms.untracked.bool(False),
            localDAQ = cms.untracked.bool(False),
            performDataIntegrityMonitor = cms.untracked.bool(True),
            readDDUIDfromDDU = cms.untracked.bool(True),
            readingDDU = cms.untracked.bool(True),
            writeSC = cms.untracked.bool(True)
        )
    ),
    useStandardFEDid = cms.bool(True)
)


process.dttfDigis = cms.EDProducer("DTTFFEDReader",
    DTTF_FED_Source = cms.InputTag("rawDataCollector"),
    verbose = cms.untracked.bool(False)
)


process.ecalDetIdToBeRecovered = cms.EDProducer("EcalDetIdToBeRecoveredProducer",
    ebDetIdToBeRecovered = cms.string('ebDetId'),
    ebFEToBeRecovered = cms.string('ebFE'),
    ebIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    ebIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    ebIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    ebSrFlagCollection = cms.InputTag("ecalDigis"),
    eeDetIdToBeRecovered = cms.string('eeDetId'),
    eeFEToBeRecovered = cms.string('eeFE'),
    eeIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    eeIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    eeIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    eeSrFlagCollection = cms.InputTag("ecalDigis"),
    integrityBlockSizeErrors = cms.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
    integrityTTIdErrors = cms.InputTag("ecalDigis","EcalIntegrityTTIdErrors")
)


process.ecalDigis = cms.EDProducer("EcalRawToDigi",
    DoRegional = cms.bool(False),
    FEDs = cms.vint32(601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654),
    FedLabel = cms.InputTag("listfeds"),
    InputLabel = cms.InputTag("rawDataCollector"),
    eventPut = cms.bool(True),
    feIdCheck = cms.bool(True),
    feUnpacking = cms.bool(True),
    forceToKeepFRData = cms.bool(False),
    headerUnpacking = cms.bool(True),
    memUnpacking = cms.bool(True),
    numbTriggerTSamples = cms.int32(1),
    numbXtalTSamples = cms.int32(10),
    orderedDCCIdList = cms.vint32(1, 2, 3, 4, 5, 
        6, 7, 8, 9, 10, 
        11, 12, 13, 14, 15, 
        16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 
        26, 27, 28, 29, 30, 
        31, 32, 33, 34, 35, 
        36, 37, 38, 39, 40, 
        41, 42, 43, 44, 45, 
        46, 47, 48, 49, 50, 
        51, 52, 53, 54),
    orderedFedList = cms.vint32(601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654),
    silentMode = cms.untracked.bool(True),
    srpUnpacking = cms.bool(True),
    syncCheck = cms.bool(True),
    tccUnpacking = cms.bool(True)
)


process.ecalFixedAlphaBetaFitUncalibRecHit = cms.EDProducer("EcalUncalibRecHitProducer",
    EBdigiCollection = cms.InputTag("ecalDigis","ebDigis"),
    EBhitCollection = cms.string('EcalUncalibRecHitsEB'),
    EEdigiCollection = cms.InputTag("ecalDigis","eeDigis"),
    EEhitCollection = cms.string('EcalUncalibRecHitsEE'),
    algo = cms.string('EcalUncalibRecHitWorkerFixedAlphaBetaFit'),
    algoPSet = cms.PSet(
        AlphaBetaFilename = cms.untracked.string('NOFILE'),
        MinAmplBarrel = cms.double(8.0),
        MinAmplEndcap = cms.double(14.0),
        UseDynamicPedestal = cms.bool(True),
        alphaEB = cms.double(1.138),
        alphaEE = cms.double(1.89),
        betaEB = cms.double(1.655),
        betaEE = cms.double(1.4)
    )
)


process.ecalPreshowerDigis = cms.EDProducer("ESRawToDigi",
    ESdigiCollection = cms.string(''),
    InstanceES = cms.string(''),
    LookupTable = cms.FileInPath('EventFilter/ESDigiToRaw/data/ES_lookup_table.dat'),
    debugMode = cms.untracked.bool(False),
    sourceTag = cms.InputTag("rawDataCollector")
)


process.ecalPreshowerRecHit = cms.EDProducer("ESRecHitProducer",
    ESRecoAlgo = cms.int32(0),
    ESdigiCollection = cms.InputTag("ecalPreshowerDigis"),
    ESrechitCollection = cms.string('EcalRecHitsES'),
    algo = cms.string('ESRecHitWorker')
)


process.ecalRecHit = cms.EDProducer("EcalRecHitProducer",
    ChannelStatusToBeExcluded = cms.vstring('kDAC', 
        'kNoLaser', 
        'kNoisy', 
        'kNNoisy', 
        'kFixedG6', 
        'kFixedG1', 
        'kFixedG0', 
        'kNonRespondingIsolated', 
        'kDeadVFE', 
        'kDeadFE', 
        'kNoDataNoTP'),
    EBLaserMAX = cms.double(3.0),
    EBLaserMIN = cms.double(0.5),
    EBrechitCollection = cms.string('EcalRecHitsEB'),
    EBuncalibRecHitCollection = cms.InputTag("ecalFixedAlphaBetaFitUncalibRecHit","EcalUncalibRecHitsEB"),
    EELaserMAX = cms.double(8.0),
    EELaserMIN = cms.double(0.5),
    EErechitCollection = cms.string('EcalRecHitsEE'),
    EEuncalibRecHitCollection = cms.InputTag("ecalFixedAlphaBetaFitUncalibRecHit","EcalUncalibRecHitsEE"),
    algo = cms.string('EcalRecHitWorkerSimple'),
    algoRecover = cms.string('EcalRecHitWorkerRecover'),
    cleaningConfig = cms.PSet(
        cThreshold_barrel = cms.double(4),
        cThreshold_double = cms.double(10),
        cThreshold_endcap = cms.double(15),
        e4e1Threshold_barrel = cms.double(0.08),
        e4e1Threshold_endcap = cms.double(0.3),
        e4e1_a_barrel = cms.double(0.02),
        e4e1_a_endcap = cms.double(0.02),
        e4e1_b_barrel = cms.double(0.02),
        e4e1_b_endcap = cms.double(-0.0125),
        e6e2thresh = cms.double(0.04),
        ignoreOutOfTimeThresh = cms.double(1000000000.0),
        tightenCrack_e1_double = cms.double(2),
        tightenCrack_e1_single = cms.double(1),
        tightenCrack_e4e1_single = cms.double(2.5),
        tightenCrack_e6e2_double = cms.double(3)
    ),
    dbStatusToBeExcludedEB = cms.vint32(14, 78, 142),
    dbStatusToBeExcludedEE = cms.vint32(14, 78, 142),
    ebDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebDetId"),
    ebFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebFE"),
    eeDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeDetId"),
    eeFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeFE"),
    flagsMapDBReco = cms.PSet(
        kDead = cms.vstring('kNoDataNoTP'),
        kGood = cms.vstring('kOk', 
            'kDAC', 
            'kNoLaser', 
            'kNoisy'),
        kNeighboursRecovered = cms.vstring('kFixedG0', 
            'kNonRespondingIsolated', 
            'kDeadVFE'),
        kNoisy = cms.vstring('kNNoisy', 
            'kFixedG6', 
            'kFixedG1'),
        kTowerRecovered = cms.vstring('kDeadFE')
    ),
    killDeadChannels = cms.bool(True),
    laserCorrection = cms.bool(True),
    logWarningEtThreshold_EB_FE = cms.double(50),
    logWarningEtThreshold_EE_FE = cms.double(50),
    recoverEBFE = cms.bool(True),
    recoverEBIsolatedChannels = cms.bool(False),
    recoverEBVFE = cms.bool(False),
    recoverEEFE = cms.bool(True),
    recoverEEIsolatedChannels = cms.bool(False),
    recoverEEVFE = cms.bool(False),
    singleChannelRecoveryMethod = cms.string('NeuralNetworks'),
    singleChannelRecoveryThreshold = cms.double(8),
    skipTimeCalib = cms.bool(False),
    triggerPrimitiveDigiCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives")
)


process.ecalWeightUncalibRecHit = cms.EDProducer("EcalUncalibRecHitProducer",
    EBdigiCollection = cms.InputTag("ecalDigis","ebDigis"),
    EBhitCollection = cms.string('EcalUncalibRecHitsEB'),
    EEdigiCollection = cms.InputTag("ecalDigis","eeDigis"),
    EEhitCollection = cms.string('EcalUncalibRecHitsEE'),
    algo = cms.string('EcalUncalibRecHitWorkerWeights'),
    algoPSet = cms.PSet(

    )
)


process.emtfStage2Digis = cms.EDProducer("L1TRawToDigi",
    FWId = cms.uint32(0),
    FedIds = cms.vint32(1384, 1385),
    InputLabel = cms.InputTag("rawDataCollector"),
    MTF7 = cms.untracked.bool(True),
    Setup = cms.string('stage2::EMTFSetup'),
    debug = cms.untracked.bool(False)
)


process.fixedGridRhoFastjetAllCalo = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    maxRapidity = cms.double(5.0),
    pfCandidatesTag = cms.InputTag("towerMaker")
)


process.gctDigis = cms.EDProducer("GctRawToDigi",
    checkHeaders = cms.untracked.bool(False),
    gctFedId = cms.untracked.int32(745),
    hltMode = cms.bool(False),
    inputLabel = cms.InputTag("rawDataCollector"),
    numberOfGctSamplesToUnpack = cms.uint32(1),
    numberOfRctSamplesToUnpack = cms.uint32(1),
    unpackSharedRegions = cms.bool(False),
    unpackerVersion = cms.uint32(0),
    verbose = cms.untracked.bool(False)
)


process.glbTrackQual = cms.EDProducer("GlobalTrackQualityProducer",
    BaseLabel = cms.string('GLB'),
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    ),
    InputCollection = cms.InputTag("globalCosmicMuons"),
    InputLinksCollection = cms.InputTag("globalMuons"),
    MaxChi2 = cms.double(100000.0),
    RefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutDT = cms.double(30.0),
        Chi2CutGEM = cms.double(1.0),
        Chi2CutME0 = cms.double(1.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(10, 10),
        DYTupdator = cms.bool(True),
        DYTuseAPE = cms.bool(False),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        GEMRecHitLabel = cms.InputTag("gemRecHits"),
        HitThreshold = cms.int32(1),
        ME0RecHitLabel = cms.InputTag("me0Segments"),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(False),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        RefitDirection = cms.string('insideOut'),
        RefitFlag = cms.bool(True),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    nSigma = cms.double(3.0)
)


process.globalBeamHaloMuonEndCapslOnly = cms.EDProducer("GlobalCosmicMuonProducer",
    MuonCollectionLabel = cms.InputTag("cosmicMuonsEndCapsOnly"),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        SmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        TkTrackCollectionLabel = cms.InputTag("beamhaloTracks"),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    )
)


process.globalCosmicMuons = cms.EDProducer("GlobalCosmicMuonProducer",
    MuonCollectionLabel = cms.InputTag("cosmicMuons"),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        SmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        TkTrackCollectionLabel = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation"),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    )
)


process.globalCosmicMuons1Leg = cms.EDProducer("GlobalCosmicMuonProducer",
    MuonCollectionLabel = cms.InputTag("cosmicMuons1Leg"),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        SmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        TkTrackCollectionLabel = cms.InputTag("ctfWithMaterialTracksP5"),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    )
)


process.globalCosmicMuonsNoRPC = cms.EDProducer("GlobalCosmicMuonProducer",
    MuonCollectionLabel = cms.InputTag("cosmicMuonsNoRPC"),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        SmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        TkTrackCollectionLabel = cms.InputTag("ctfWithMaterialTracksP5"),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    )
)


process.globalCosmicMuonsWitht0Correction = cms.EDProducer("GlobalCosmicMuonProducer",
    MuonCollectionLabel = cms.InputTag("cosmicMuonsWitht0Correction"),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        SmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        TkTrackCollectionLabel = cms.InputTag("ctfWithMaterialTracksP5"),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    )
)


process.globalCosmicSplitMuons = cms.EDProducer("GlobalCosmicMuonProducer",
    MuonCollectionLabel = cms.InputTag("cosmicMuons"),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrajectoryBuilderParameters = cms.PSet(
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        SmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        TkTrackCollectionLabel = cms.InputTag("splittedTracksP5"),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    )
)


process.gmtStage2Digis = cms.EDProducer("L1TRawToDigi",
    FedIds = cms.vint32(1402),
    MinFeds = cms.uint32(1),
    Setup = cms.string('stage2::GMTSetup')
)


process.gtDigis = cms.EDProducer("L1GlobalTriggerRawToDigi",
    ActiveBoardsMask = cms.uint32(65535),
    DaqGtFedId = cms.untracked.int32(813),
    DaqGtInputTag = cms.InputTag("rawDataCollector"),
    UnpackBxInEvent = cms.int32(-1),
    Verbosity = cms.untracked.int32(0)
)


process.gtStage2Digis = cms.EDProducer("L1TRawToDigi",
    FedIds = cms.vint32(1404),
    MinFeds = cms.uint32(1),
    Setup = cms.string('stage2::GTSetup')
)


process.hbhereco = cms.EDProducer("HcalHitReconstructor",
    Subdetector = cms.string('HBHE'),
    applyPedConstraint = cms.bool(True),
    applyPulseJitter = cms.bool(False),
    applyTimeConstraint = cms.bool(True),
    applyTimeSlew = cms.bool(True),
    applyTimeSlewM3 = cms.bool(True),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(6.0),
    dataOOTCorrectionCategory = cms.string('Data'),
    dataOOTCorrectionName = cms.string('HBHE'),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    firstAuxTS = cms.int32(4),
    firstSample = cms.int32(0),
    fitTimes = cms.int32(1),
    flagParameters = cms.PSet(
        hitEnergyMinimum = cms.double(1.0),
        hitMultiplicityThreshold = cms.int32(17),
        nominalPedestal = cms.double(3.0),
        pulseShapeParameterSets = cms.VPSet(cms.PSet(
            pulseShapeParameters = cms.vdouble(0.0, 100.0, -50.0, 0.0, -15.0, 
                0.15)
        ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(100.0, 2000.0, -50.0, 0.0, -5.0, 
                    0.05)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(2000.0, 1000000.0, -50.0, 0.0, 95.0, 
                    0.0)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(-1000000.0, 1000000.0, 45.0, 0.1, 1000000.0, 
                    0.0)
            ))
    ),
    hscpParameters = cms.PSet(
        TimingEnergyThreshold = cms.double(30.0),
        fracLeaderMax = cms.double(0.7),
        fracLeaderMin = cms.double(0.4),
        outerMax = cms.double(0.1),
        outerMin = cms.double(0.0),
        r1Max = cms.double(1.0),
        r1Min = cms.double(0.15),
        r2Max = cms.double(0.5),
        r2Min = cms.double(0.1),
        slopeMax = cms.double(-0.6),
        slopeMin = cms.double(-1.5)
    ),
    mcOOTCorrectionCategory = cms.string('MC'),
    mcOOTCorrectionName = cms.string('HBHE'),
    meanPed = cms.double(0.0),
    meanTime = cms.double(0.0),
    noiseHPD = cms.double(1),
    noiseSiPM = cms.double(1),
    pedSigmaHPD = cms.double(0.5),
    pedSigmaSiPM = cms.double(0.00065),
    pedestalUpperLimit = cms.double(2.7),
    puCorrMethod = cms.int32(0),
    pulseJitter = cms.double(1.0),
    pulseShapeParameters = cms.PSet(
        LeftSlopeCut = cms.vdouble(5, 2.55, 2.55),
        LeftSlopeThreshold = cms.vdouble(250, 500, 100000),
        LinearCut = cms.vdouble(-3, -0.054, -0.054),
        LinearThreshold = cms.vdouble(20, 100, 100000),
        MinimumChargeThreshold = cms.double(20),
        MinimumTS4TS5Threshold = cms.double(100),
        R45MinusOneRange = cms.double(0.2),
        R45PlusOneRange = cms.double(0.2),
        RMS8MaxCut = cms.vdouble(-13.5, -11.5, -11.5),
        RMS8MaxThreshold = cms.vdouble(20, 100, 100000),
        RightSlopeCut = cms.vdouble(5, 4.15, 4.15),
        RightSlopeSmallCut = cms.vdouble(1.08, 1.16, 1.16),
        RightSlopeSmallThreshold = cms.vdouble(150, 200, 100000),
        RightSlopeThreshold = cms.vdouble(250, 400, 100000),
        TS3TS4ChargeThreshold = cms.double(70),
        TS3TS4UpperChargeThreshold = cms.double(20),
        TS4TS5ChargeThreshold = cms.double(70),
        TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.5, -0.4, -0.3, 
            0.1),
        TS4TS5LowerThreshold = cms.vdouble(100, 120, 160, 200, 300, 
            500),
        TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72),
        TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400),
        TS5TS6ChargeThreshold = cms.double(70),
        TS5TS6UpperChargeThreshold = cms.double(20),
        TriangleIgnoreSlow = cms.bool(False),
        TrianglePeakTS = cms.uint32(4),
        UseDualFit = cms.bool(True)
    ),
    recoParamsFromDB = cms.bool(False),
    respCorrM3 = cms.double(0.95),
    samplesToAdd = cms.int32(10),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(True),
    setNegativeFlags = cms.bool(True),
    setNoiseFlags = cms.bool(True),
    setPulseShapeFlags = cms.bool(True),
    setSaturationFlags = cms.bool(True),
    setTimingShapedCutsFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(False),
    timeMax = cms.double(12.5),
    timeMin = cms.double(-12.5),
    timeSigmaHPD = cms.double(5.0),
    timeSigmaSiPM = cms.double(2.5),
    timeSlewPars = cms.vdouble(12.2999, -2.19142, 0, 12.2999, -2.19142, 
        0, 12.2999, -2.19142, 0),
    timeSlewParsType = cms.int32(1),
    timingshapedcutsParameters = cms.PSet(
        ignorehighest = cms.bool(False),
        ignorelowest = cms.bool(True),
        tfilterEnvelope = cms.vdouble(50.0, -2.0, 4.25, 52.0, -2.0, 
            4.09, 54.0, -2.0, 3.95, 56.0, 
            -2.0, 3.82, 58.0, -2.0, 3.71, 
            60.0, -2.0, 3.6, 63.0, -2.0, 
            3.46, 66.0, -2.0, 3.33, 69.0, 
            -2.0, 3.22, 73.0, -2.0, 3.1, 
            77.0, -2.0, 2.99, 82.0, -2.0, 
            2.87, 88.0, -2.0, 2.75, 95.0, 
            -2.0, 2.64, 103.0, -2.0, 2.54, 
            113.0, -2.0, 2.44, 127.0, -2.0, 
            2.33, 146.0, -2.0, 2.23, 176.0, 
            -2.0, 2.13, 250.0, -2.0, 2.0),
        win_gain = cms.double(3.0),
        win_offset = cms.double(0.0)
    ),
    ts4Max = cms.vdouble(100.0, 45000.0),
    ts4Min = cms.double(0.0),
    ts4chi2 = cms.vdouble(15.0, 15.0),
    tsFromDB = cms.bool(False),
    useLeakCorrection = cms.bool(False)
)


process.hcalDigis = cms.EDProducer("HcalRawToDigi",
    ComplainEmptyData = cms.untracked.bool(False),
    ElectronicsMap = cms.string(''),
    ExpectedOrbitMessageTime = cms.untracked.int32(-1),
    FEDs = cms.untracked.vint32(),
    FilterDataQuality = cms.bool(True),
    HcalFirstFED = cms.untracked.int32(700),
    InputLabel = cms.InputTag("rawDataCollector"),
    UnpackCalib = cms.untracked.bool(True),
    UnpackTTP = cms.untracked.bool(True),
    UnpackUMNio = cms.untracked.bool(True),
    UnpackZDC = cms.untracked.bool(True),
    UnpackerMode = cms.untracked.int32(0),
    firstSample = cms.int32(0),
    lastSample = cms.int32(9),
    silent = cms.untracked.bool(True)
)


process.hcalnoise = cms.EDProducer("HcalNoiseInfoProducer",
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalRecHitFlagsToBeExcluded = cms.vint32(11, 12, 13, 14, 15, 
        27),
    TS4TS5EnergyThreshold = cms.double(50),
    TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.4, -0.2, -0.08, 
        0, 0.1),
    TS4TS5LowerThreshold = cms.vdouble(100, 120, 150, 200, 300, 
        400, 500),
    TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72, 0.72),
    TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400, 4000),
    calibdigiHBHEthreshold = cms.double(15),
    calibdigiHBHEtimeslices = cms.vint32(3, 4, 5, 6),
    calibdigiHFthreshold = cms.double(-999),
    calibdigiHFtimeslices = cms.vint32(0, 1, 2, 3, 4, 
        5, 6, 7, 8, 9),
    caloTowerCollName = cms.string('towerMaker'),
    digiCollName = cms.string('hcalDigis'),
    fillCaloTowers = cms.bool(True),
    fillDigis = cms.bool(True),
    fillRecHits = cms.bool(True),
    fillTracks = cms.bool(False),
    hlMaxHPDEMF = cms.double(-9999.0),
    hlMaxRBXEMF = cms.double(0.01),
    jetCollName = cms.string('ak4PFJets'),
    lMaxHighEHitTime = cms.double(9999.0),
    lMaxLowEHitTime = cms.double(9999.0),
    lMaxRatio = cms.double(999.0),
    lMinHPDHits = cms.int32(17),
    lMinHPDNoOtherHits = cms.int32(10),
    lMinHighEHitTime = cms.double(-9999.0),
    lMinLowEHitTime = cms.double(-9999.0),
    lMinRBXHits = cms.int32(999),
    lMinRatio = cms.double(-999.0),
    lMinZeros = cms.int32(10),
    lRBXRecHitR45Cuts = cms.vdouble(0.0, 1.0, 0.0, -0.5, 0.0, 
        0.0, 1.0, -0.5),
    maxCaloTowerIEta = cms.int32(20),
    maxNHF = cms.double(0.9),
    maxProblemRBXs = cms.int32(72),
    maxTrackEta = cms.double(2.0),
    maxjetindex = cms.int32(0),
    minEEMF = cms.double(50.0),
    minERatio = cms.double(50.0),
    minEZeros = cms.double(10.0),
    minHighHitE = cms.double(25.0),
    minLowHitE = cms.double(10.0),
    minR45HitE = cms.double(5.0),
    minRecHitE = cms.double(1.5),
    minTrackPt = cms.double(1.0),
    pMaxHPDEMF = cms.double(0.02),
    pMaxHighEHitTime = cms.double(5.0),
    pMaxLowEHitTime = cms.double(6.0),
    pMaxRBXEMF = cms.double(0.02),
    pMaxRatio = cms.double(0.85),
    pMinE = cms.double(40.0),
    pMinEEMF = cms.double(10.0),
    pMinERatio = cms.double(25.0),
    pMinEZeros = cms.double(5.0),
    pMinHPDHits = cms.int32(10),
    pMinHPDNoOtherHits = cms.int32(7),
    pMinHighEHitTime = cms.double(-4.0),
    pMinLowEHitTime = cms.double(-6.0),
    pMinRBXHits = cms.int32(20),
    pMinRBXRechitR45Count = cms.int32(1),
    pMinRBXRechitR45EnergyFraction = cms.double(0.1),
    pMinRBXRechitR45Fraction = cms.double(0.1),
    pMinRatio = cms.double(0.75),
    pMinZeros = cms.int32(4),
    recHitCollName = cms.string('hbhereco'),
    tMaxHighEHitTime = cms.double(6.0),
    tMaxLowEHitTime = cms.double(9999.0),
    tMaxRatio = cms.double(999.0),
    tMinHPDHits = cms.int32(16),
    tMinHPDNoOtherHits = cms.int32(9),
    tMinHighEHitTime = cms.double(-7.0),
    tMinLowEHitTime = cms.double(-9999.0),
    tMinRBXHits = cms.int32(50),
    tMinRatio = cms.double(-999.0),
    tMinZeros = cms.int32(8),
    tRBXRecHitR45Cuts = cms.vdouble(0.0, 1.0, 0.0, -0.2, 0.0, 
        0.0, 1.0, -0.2),
    trackCollName = cms.string('generalTracks')
)


process.hfreco = cms.EDProducer("HcalHitReconstructor",
    HFInWindowStat = cms.PSet(
        hflongEthresh = cms.double(40.0),
        hflongMaxWindowTime = cms.vdouble(10),
        hflongMinWindowTime = cms.vdouble(-10),
        hfshortEthresh = cms.double(40.0),
        hfshortMaxWindowTime = cms.vdouble(10),
        hfshortMinWindowTime = cms.vdouble(-12)
    ),
    PETstat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        longEnergyParams = cms.vdouble(43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62),
        long_R = cms.vdouble(0.98),
        long_R_29 = cms.vdouble(0.8),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        shortEnergyParams = cms.vdouble(35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093),
        short_R = cms.vdouble(0.8),
        short_R_29 = cms.vdouble(0.8)
    ),
    S8S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(True),
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        longEnergyParams = cms.vdouble(40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100),
        long_optimumSlope = cms.vdouble(0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        shortEnergyParams = cms.vdouble(40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100),
        short_optimumSlope = cms.vdouble(0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1)
    ),
    S9S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(False),
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        longEnergyParams = cms.vdouble(43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62),
        long_optimumSlope = cms.vdouble(-99999, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        shortEnergyParams = cms.vdouble(35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093),
        short_optimumSlope = cms.vdouble(-99999, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927)
    ),
    Subdetector = cms.string('HF'),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    dataOOTCorrectionCategory = cms.string('Data'),
    dataOOTCorrectionName = cms.string(''),
    digiLabel = cms.InputTag("hcalDigis"),
    digiTimeFromDB = cms.bool(False),
    digistat = cms.PSet(
        HFdigiflagCoef = cms.vdouble(0.93, -0.38275, -0.012667),
        HFdigiflagExpectedPeak = cms.int32(2),
        HFdigiflagFirstSample = cms.int32(1),
        HFdigiflagMinEthreshold = cms.double(40),
        HFdigiflagSamplesToAdd = cms.int32(3)
    ),
    dropZSmarkedPassed = cms.bool(True),
    firstAuxTS = cms.int32(1),
    firstSample = cms.int32(0),
    hfTimingTrustParameters = cms.PSet(
        hfTimingTrustLevel1 = cms.int32(1),
        hfTimingTrustLevel2 = cms.int32(4)
    ),
    mcOOTCorrectionCategory = cms.string('MC'),
    mcOOTCorrectionName = cms.string(''),
    puCorrMethod = cms.int32(0),
    recoParamsFromDB = cms.bool(False),
    samplesToAdd = cms.int32(10),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(False),
    setNegativeFlags = cms.bool(False),
    setNoiseFlags = cms.bool(True),
    setPulseShapeFlags = cms.bool(False),
    setSaturationFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(True),
    tsFromDB = cms.bool(False),
    useLeakCorrection = cms.bool(False)
)


process.hoCalibCosmicsProducer = cms.EDProducer("AlCaHOCalibProducer",
    CosmicData = cms.untracked.bool(True),
    RootFileName = cms.untracked.string('test.root'),
    debug = cms.untracked.bool(False),
    digiInput = cms.untracked.bool(False),
    hbheInput = cms.InputTag("hbhereco"),
    hbinfo = cms.untracked.bool(False),
    hoInput = cms.InputTag("horeco"),
    hotime = cms.untracked.bool(False),
    lumiTags = cms.InputTag("scalersRawToDigi"),
    m_scale = cms.untracked.double(4.0),
    muons = cms.untracked.InputTag("cosmicMuons"),
    plotOccupancy = cms.untracked.bool(False),
    sigma = cms.untracked.double(1.0),
    towerInput = cms.InputTag("towerMaker"),
    vertexTags = cms.InputTag("offlinePrimaryVertices")
)


process.horeco = cms.EDProducer("HcalHitReconstructor",
    Subdetector = cms.string('HO'),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    dataOOTCorrectionCategory = cms.string('Data'),
    dataOOTCorrectionName = cms.string(''),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    firstAuxTS = cms.int32(4),
    firstSample = cms.int32(0),
    mcOOTCorrectionCategory = cms.string('MC'),
    mcOOTCorrectionName = cms.string(''),
    puCorrMethod = cms.int32(0),
    recoParamsFromDB = cms.bool(False),
    samplesToAdd = cms.int32(10),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(True),
    setNegativeFlags = cms.bool(False),
    setNoiseFlags = cms.bool(True),
    setPulseShapeFlags = cms.bool(False),
    setSaturationFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(False),
    tsFromDB = cms.bool(False),
    useLeakCorrection = cms.bool(False)
)


process.hybridSuperClusters = cms.EDProducer("UnifiedSCCollectionProducer",
    bcCollection = cms.string('hybridBarrelBasicClusters'),
    bcCollectionUncleanOnly = cms.string('uncleanOnlyHybridBarrelBasicClusters'),
    cleanBcCollection = cms.InputTag("cleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    cleanScCollection = cms.InputTag("cleanedHybridSuperClusters"),
    scCollection = cms.string(''),
    scCollectionUncleanOnly = cms.string('uncleanOnlyHybridSuperClusters'),
    uncleanBcCollection = cms.InputTag("uncleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    uncleanScCollection = cms.InputTag("uncleanedHybridSuperClusters")
)


process.iterativeCone15CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('IterativeCone'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.15),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.iterativeCone5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('IterativeCone'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.5),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.kt4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('Kt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.kt6CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(True),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('Kt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.6),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.l1extraParticles = cms.EDProducer("L1ExtraParticlesProd",
    centralBxOnly = cms.bool(True),
    centralJetSource = cms.InputTag("caloStage1LegacyFormatDigis","cenJets"),
    etHadSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    etMissSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    etTotalSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    forwardJetSource = cms.InputTag("caloStage1LegacyFormatDigis","forJets"),
    hfRingBitCountsSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    hfRingEtSumsSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    htMissSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    ignoreHtMiss = cms.bool(False),
    isoTauJetSource = cms.InputTag("caloStage1LegacyFormatDigis","isoTauJets"),
    isolatedEmSource = cms.InputTag("caloStage1LegacyFormatDigis","isoEm"),
    muonSource = cms.InputTag("gtDigis"),
    nonIsolatedEmSource = cms.InputTag("caloStage1LegacyFormatDigis","nonIsoEm"),
    produceCaloParticles = cms.bool(True),
    produceMuonParticles = cms.bool(True),
    tauJetSource = cms.InputTag("caloStage1LegacyFormatDigis","tauJets")
)


process.lhcSTAMuons = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(True),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(5.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(True),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("standAloneMuons"),
    inputCollectionTypes = cms.vstring('outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.logErrorHarvester = cms.EDProducer("LogErrorHarvester")


process.lumiProducer = cms.EDProducer("LumiProducer",
    connect = cms.string('frontier://LumiProd/CMS_LUMI_PROD'),
    lumiversion = cms.untracked.string(''),
    ncacheEntries = cms.untracked.uint32(5)
)


process.muIsoDepositCalByAssociatorTowers = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    inputTags = cms.VInputTag(cms.InputTag("muons","ecal"), cms.InputTag("muons","hcal"), cms.InputTag("muons","ho"))
)


process.muIsoDepositJets = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("muons","jets"))
)


process.muIsoDepositTk = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("muons","tracker"))
)


process.muonCSCDigis = cms.EDProducer("CSCDCCUnpacker",
    Debug = cms.untracked.bool(False),
    ErrorMask = cms.uint32(0),
    ExaminerMask = cms.uint32(535557110),
    FormatedEventDump = cms.untracked.bool(False),
    InputObjects = cms.InputTag("rawDataCollector"),
    PrintEventNumber = cms.untracked.bool(False),
    SuppressZeroLCT = cms.untracked.bool(True),
    UnpackStatusDigis = cms.bool(False),
    UseExaminer = cms.bool(True),
    UseFormatStatus = cms.bool(True),
    UseSelectiveUnpacking = cms.bool(True),
    VisualFEDInspect = cms.untracked.bool(False),
    VisualFEDShort = cms.untracked.bool(False),
    runDQM = cms.untracked.bool(False)
)


process.muonDTDigis = cms.EDProducer("DTUnpackingModule",
    dataType = cms.string('DDU'),
    dqmOnly = cms.bool(False),
    inputLabel = cms.InputTag("rawDataCollector"),
    maxFEDid = cms.untracked.int32(779),
    minFEDid = cms.untracked.int32(770),
    readOutParameters = cms.PSet(
        debug = cms.untracked.bool(False),
        localDAQ = cms.untracked.bool(False),
        performDataIntegrityMonitor = cms.untracked.bool(False),
        rosParameters = cms.PSet(
            debug = cms.untracked.bool(False),
            localDAQ = cms.untracked.bool(False),
            performDataIntegrityMonitor = cms.untracked.bool(False),
            readDDUIDfromDDU = cms.untracked.bool(True),
            readingDDU = cms.untracked.bool(True),
            writeSC = cms.untracked.bool(True)
        )
    ),
    useStandardFEDid = cms.bool(True)
)


process.muonMETValueMapProducer = cms.EDProducer("MuonMETValueMapProducer",
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useGEM = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useME0 = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    ),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    isAlsoTkMu = cms.bool(True),
    maxEta = cms.double(2.5),
    maxNormChi2 = cms.double(10.0),
    maxd0 = cms.double(0.2),
    minPt = cms.double(10.0),
    minnHits = cms.int32(11),
    minnValidStaHits = cms.int32(1),
    muonInputTag = cms.InputTag("muons"),
    towerEtThreshold = cms.double(0.3),
    useHO = cms.bool(False),
    useRecHits = cms.bool(False),
    useTrackAssociatorPositions = cms.bool(True)
)


process.muonRPCDigis = cms.EDProducer("RPCUnpackingModule",
    InputLabel = cms.InputTag("rawDataCollector"),
    doSynchro = cms.bool(True)
)


process.muons = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(True),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9999),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(9999),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(True),
    fillGlobalTrackRefits = cms.bool(True),
    fillIsolation = cms.bool(True),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("ctfWithMaterialTracksP5LHCNavigation", "globalCosmicMuons", "cosmicMuons", "tevMuons:firstHit", "tevMuons:picky", 
        "tevMuons:dyt"),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks', 
        'tev firstHit', 
        'tev picky', 
        'tev dyt'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.muons1Leg = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(0.5),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9999),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(9999),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("ctfWithMaterialTracksP5", "globalCosmicMuons1Leg", "cosmicMuons1Leg"),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.muonsBeamHaloEndCapsOnly = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(True),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(5.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("ctfWithMaterialTracksP5")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(True),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("beamhaloTracks", "globalBeamHaloMuonEndCapslOnly", "cosmicMuonsEndCapsOnly"),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.muonsFromCosmics = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(0.5),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9999),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(9999),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("cosmicMuons")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("cosmicMuons"),
    inputCollectionTypes = cms.vstring('outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.muonsNoRPC = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(True),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(5.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("ctfWithMaterialTracksP5")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(True),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("ctfWithMaterialTracksP5", "globalCosmicMuonsNoRPC", "cosmicMuonsNoRPC"),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.muonsWitht0Correction = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(True),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(5.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(True),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegmentsT0Seg"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("ctfWithMaterialTracksP5")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(True),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("ctfWithMaterialTracksP5", "globalCosmicMuonsWitht0Correction", "cosmicMuonsWitht0Correction"),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.offlineBeamSpot = cms.EDProducer("BeamSpotProducer")


process.offlinePrimaryVertices = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkGapClusParameters = cms.PSet(
            zSeparation = cms.double(0.1)
        ),
        algorithm = cms.string('gap')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Significance = cms.double(5.0),
        maxNormalizedChi2 = cms.double(5.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(7),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("ctfWithMaterialTracksP5"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(cms.PSet(
        algorithm = cms.string('AdaptiveVertexFitter'),
        label = cms.string(''),
        maxDistanceToBeam = cms.double(1.0),
        minNdof = cms.double(0.0),
        useBeamConstraint = cms.bool(False)
    ))
)


process.photonCore = cms.EDProducer("PhotonCoreProducer",
    conversionProducer = cms.InputTag(""),
    minSCEt = cms.double(0.0),
    photonCoreCollection = cms.string(''),
    pixelSeedProducer = cms.InputTag("electronMergedSeeds"),
    risolveConversionAmbiguity = cms.bool(True),
    scHybridBarrelProducer = cms.InputTag("cosmicSuperClusters","CosmicBarrelSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("cosmicSuperClusters","CosmicEndcapSuperClusters")
)


process.photons = cms.EDProducer("PhotonProducer",
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromEcalEnergy'),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("generalTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.5),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minR9Endcap = cms.double(0.95),
    minSCEtBarrel = cms.double(0.0),
    minSCEtEndcap = cms.double(0.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    photonCoreProducer = cms.InputTag("photonCore"),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(False)
)


process.regionalCosmicCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("regionalCosmicTrackerSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.regionalCosmicTrackerSeedingLayers = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        maxRing = cms.int32(7),
        minRing = cms.int32(6),
        useRingSlector = cms.bool(False)
    ),
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        )
    ),
    layerList = cms.vstring('TOB6+TOB5', 
        'TOB6+TOB4', 
        'TOB6+TOB3', 
        'TOB5+TOB4', 
        'TOB5+TOB3', 
        'TOB4+TOB3', 
        'TEC1_neg+TOB6', 
        'TEC1_neg+TOB5', 
        'TEC1_neg+TOB4', 
        'TEC1_pos+TOB6', 
        'TEC1_pos+TOB5', 
        'TEC1_pos+TOB4')
)


process.regionalCosmicTrackerSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(10000),
        MaxNumberOfPixelClusters = cms.uint32(10000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(False)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('GenericPairGenerator'),
        LayerSrc = cms.InputTag("regionalCosmicTrackerSeedingLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        CollectionsPSet = cms.PSet(
            recoL2MuonsCollection = cms.InputTag(""),
            recoMuonsCollection = cms.InputTag(""),
            recoTrackMuonsCollection = cms.InputTag("cosmicMuons")
        ),
        ComponentName = cms.string('CosmicRegionalSeedGenerator'),
        RegionInJetsCheckPSet = cms.PSet(
            deltaRExclusionSize = cms.double(0.3),
            doJetsExclusionCheck = cms.bool(True),
            jetsPtMin = cms.double(5),
            recoCaloJetsCollection = cms.InputTag("ak4CaloJets")
        ),
        RegionPSet = cms.PSet(
            deltaEtaRegion = cms.double(0.1),
            deltaPhiRegion = cms.double(0.1),
            measurementTrackerName = cms.string(''),
            precise = cms.bool(True),
            ptMin = cms.double(1.0),
            rVertex = cms.double(5),
            zVertex = cms.double(5)
        ),
        ToolsPSet = cms.PSet(
            regionBase = cms.string('seedOnCosmicMuon'),
            thePropagatorName = cms.string('AnalyticalPropagator')
        )
    ),
    RegionInJetsCheckPSet = cms.PSet(
        doJetsExclusionCheck = cms.bool(False)
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('CosmicSeedCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        maxseeds = cms.int32(10000),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.regionalCosmicTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("regionalCosmicCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.rpcRecHits = cms.EDProducer("RPCRecHitProducer",
    deadSource = cms.string('File'),
    deadvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCDeadVec.dat'),
    maskSource = cms.string('File'),
    maskvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCMaskVec.dat'),
    recAlgo = cms.string('RPCRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    ),
    rpcDigiLabel = cms.InputTag("muonRPCDigis")
)


process.scalersRawToDigi = cms.EDProducer("ScalersRawToDigi",
    scalersInputTag = cms.InputTag("rawDataCollector")
)


process.siPixelClusters = cms.EDProducer("SiPixelClusterProducer",
    ChannelThreshold = cms.int32(1000),
    ClusterThreshold = cms.double(4000.0),
    MissCalibrate = cms.untracked.bool(True),
    SeedThreshold = cms.int32(1000),
    SplitClusters = cms.bool(False),
    VCaltoElectronGain = cms.int32(65),
    VCaltoElectronOffset = cms.int32(-414),
    maxNumberOfClusters = cms.int32(-1),
    payloadType = cms.string('Offline'),
    src = cms.InputTag("siPixelDigis")
)


process.siPixelDigis = cms.EDProducer("SiPixelRawToDigi",
    CablingMapLabel = cms.string(''),
    ErrorList = cms.vint32(29),
    IncludeErrors = cms.bool(True),
    InputLabel = cms.InputTag("rawDataCollector"),
    Regions = cms.PSet(

    ),
    Timing = cms.untracked.bool(False),
    UsePhase1 = cms.bool(False),
    UsePilotBlade = cms.bool(False),
    UseQualityInfo = cms.bool(False),
    UserErrorList = cms.vint32(40)
)


process.siPixelRecHits = cms.EDProducer("SiPixelRecHitConverter",
    CPE = cms.string('PixelCPEGeneric'),
    VerboseLevel = cms.untracked.int32(0),
    src = cms.InputTag("siPixelClusters")
)


process.siStripClusters = cms.EDProducer("SiStripClusterizer",
    Clusterizer = cms.PSet(
        Algorithm = cms.string('ThreeThresholdAlgorithm'),
        ChannelThreshold = cms.double(2.0),
        ClusterThreshold = cms.double(5.0),
        MaxAdjacentBad = cms.uint32(0),
        MaxSequentialBad = cms.uint32(1),
        MaxSequentialHoles = cms.uint32(0),
        QualityLabel = cms.string(''),
        RemoveApvShots = cms.bool(True),
        SeedThreshold = cms.double(3.0),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        )
    ),
    DigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","ZeroSuppressed"), cms.InputTag("siStripZeroSuppression","VirginRaw"), cms.InputTag("siStripZeroSuppression","ProcessedRaw"), cms.InputTag("siStripZeroSuppression","ScopeMode"))
)


process.siStripDigis = cms.EDProducer("SiStripRawToDigiModule",
    AppendedBytes = cms.int32(0),
    DoAPVEmulatorCheck = cms.bool(False),
    DoAllCorruptBufferChecks = cms.bool(False),
    ErrorThreshold = cms.uint32(7174),
    LegacyUnpacker = cms.bool(False),
    MarkModulesOnMissingFeds = cms.bool(True),
    ProductLabel = cms.InputTag("rawDataCollector"),
    TriggerFedId = cms.int32(0),
    UnpackBadChannels = cms.bool(False),
    UnpackCommonModeValues = cms.bool(False),
    UseDaqRegister = cms.bool(False),
    UseFedKey = cms.bool(False)
)


process.siStripMatchedRecHits = cms.EDProducer("SiStripRecHitConverter",
    ClusterProducer = cms.InputTag("siStripClusters"),
    MaskBadAPVFibers = cms.bool(False),
    Matcher = cms.ESInputTag("SiStripRecHitMatcherESProducer","StandardMatcher"),
    StripCPE = cms.ESInputTag("StripCPEfromTrackAngleESProducer","StripCPEfromTrackAngle"),
    VerbosityLevel = cms.untracked.int32(1),
    matchedRecHits = cms.string('matchedRecHit'),
    rphiRecHits = cms.string('rphiRecHit'),
    siStripQualityLabel = cms.ESInputTag(""),
    stereoRecHits = cms.string('stereoRecHit'),
    useSiStripQuality = cms.bool(False)
)


process.siStripZeroSuppression = cms.EDProducer("SiStripZeroSuppression",
    Algorithms = cms.PSet(
        APVInspectMode = cms.string('BaselineFollower'),
        APVRestoreMode = cms.string('BaselineFollower'),
        ApplyBaselineCleaner = cms.bool(True),
        ApplyBaselineRejection = cms.bool(True),
        CleaningSequence = cms.uint32(1),
        CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
        CutToAvoidSignal = cms.double(2.0),
        DeltaCMThreshold = cms.uint32(20),
        Deviation = cms.uint32(25),
        ForceNoRestore = cms.bool(False),
        Fraction = cms.double(0.2),
        Iterations = cms.int32(3),
        MeanCM = cms.int32(0),
        PedestalSubtractionFedMode = cms.bool(False),
        SelfSelectRestoreAlgo = cms.bool(False),
        SiStripFedZeroSuppressionMode = cms.uint32(4),
        TruncateInSuppressor = cms.bool(True),
        consecThreshold = cms.uint32(5),
        distortionThreshold = cms.uint32(20),
        doAPVRestore = cms.bool(True),
        filteredBaselineDerivativeSumSquare = cms.double(30),
        filteredBaselineMax = cms.double(6),
        hitStripThreshold = cms.uint32(40),
        minStripsToFit = cms.uint32(4),
        nSaturatedStrip = cms.uint32(2),
        nSigmaNoiseDerTh = cms.uint32(4),
        nSmooth = cms.uint32(9),
        restoreThreshold = cms.double(0.5),
        slopeX = cms.int32(3),
        slopeY = cms.int32(4),
        useCMMeanMap = cms.bool(False),
        useRealMeanCM = cms.bool(False)
    ),
    DigisToMergeVR = cms.InputTag("siStripVRDigis","VirginRaw"),
    DigisToMergeZS = cms.InputTag("siStripDigis","ZeroSuppressed"),
    RawDigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","VirginRaw"), cms.InputTag("siStripDigis","ProcessedRaw"), cms.InputTag("siStripDigis","ScopeMode")),
    fixCM = cms.bool(False),
    mergeCollections = cms.bool(False),
    produceBaselinePoints = cms.bool(False),
    produceCalculatedBaseline = cms.bool(False),
    produceRawDigis = cms.bool(True),
    storeCM = cms.bool(True),
    storeInZScollBadAPV = cms.bool(True)
)


process.simpleCosmicBONSeedingLayers = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(False),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    layerList = cms.vstring('TOB4+TOB5+TOB6', 
        'TOB3+TOB5+TOB6', 
        'TOB3+TOB4+TOB5', 
        'TOB3+TOB4+TOB6', 
        'TOB2+TOB4+TOB5', 
        'TOB2+TOB3+TOB5', 
        'TEC7_pos+TEC8_pos+TEC9_pos', 
        'TEC6_pos+TEC7_pos+TEC8_pos', 
        'TEC5_pos+TEC6_pos+TEC7_pos', 
        'TEC4_pos+TEC5_pos+TEC6_pos', 
        'TEC3_pos+TEC4_pos+TEC5_pos', 
        'TEC2_pos+TEC3_pos+TEC4_pos', 
        'TEC1_pos+TEC2_pos+TEC3_pos', 
        'TEC7_neg+TEC8_neg+TEC9_neg', 
        'TEC6_neg+TEC7_neg+TEC8_neg', 
        'TEC5_neg+TEC6_neg+TEC7_neg', 
        'TEC4_neg+TEC5_neg+TEC6_neg', 
        'TEC3_neg+TEC4_neg+TEC5_neg', 
        'TEC2_neg+TEC3_neg+TEC4_neg', 
        'TEC1_neg+TEC2_neg+TEC3_neg', 
        'TEC6_pos+TEC8_pos+TEC9_pos', 
        'TEC5_pos+TEC7_pos+TEC8_pos', 
        'TEC4_pos+TEC6_pos+TEC7_pos', 
        'TEC3_pos+TEC5_pos+TEC6_pos', 
        'TEC2_pos+TEC4_pos+TEC5_pos', 
        'TEC1_pos+TEC3_pos+TEC4_pos', 
        'TEC6_pos+TEC7_pos+TEC9_pos', 
        'TEC5_pos+TEC6_pos+TEC8_pos', 
        'TEC4_pos+TEC5_pos+TEC7_pos', 
        'TEC3_pos+TEC4_pos+TEC6_pos', 
        'TEC2_pos+TEC3_pos+TEC5_pos', 
        'TEC1_pos+TEC2_pos+TEC4_pos', 
        'TEC6_neg+TEC8_neg+TEC9_neg', 
        'TEC5_neg+TEC7_neg+TEC8_neg', 
        'TEC4_neg+TEC6_neg+TEC7_neg', 
        'TEC3_neg+TEC5_neg+TEC6_neg', 
        'TEC2_neg+TEC4_neg+TEC5_neg', 
        'TEC1_neg+TEC3_neg+TEC4_neg', 
        'TEC6_neg+TEC7_neg+TEC9_neg', 
        'TEC5_neg+TEC6_neg+TEC8_neg', 
        'TEC4_neg+TEC5_neg+TEC7_neg', 
        'TEC3_neg+TEC4_neg+TEC6_neg', 
        'TEC2_neg+TEC3_neg+TEC5_neg', 
        'TEC1_neg+TEC2_neg+TEC4_neg', 
        'TOB6+TEC1_pos+TEC2_pos', 
        'TOB6+TEC1_neg+TEC2_neg', 
        'TOB6+TOB5+TEC1_pos', 
        'TOB6+TOB5+TEC1_neg')
)


process.simpleCosmicBONSeeds = cms.EDProducer("SimpleCosmicBONSeeder",
    ClusterChargeCheck = cms.PSet(
        Thresholds = cms.PSet(
            TEC = cms.int32(0),
            TIB = cms.int32(0),
            TID = cms.int32(0),
            TOB = cms.int32(0)
        ),
        checkCharge = cms.bool(False),
        matchedRecHitsUseAnd = cms.bool(True)
    ),
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        DontCountDetsAboveNClusters = cms.uint32(20),
        MaxNumberOfCosmicClusters = cms.uint32(300),
        MaxNumberOfPixelClusters = cms.uint32(300),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(True)
    ),
    HitsPerModuleCheck = cms.PSet(
        Thresholds = cms.PSet(
            TEC = cms.int32(20),
            TIB = cms.int32(20),
            TID = cms.int32(20),
            TOB = cms.int32(20)
        ),
        checkHitsPerModule = cms.bool(True)
    ),
    NegativeYOnly = cms.bool(False),
    PositiveYOnly = cms.bool(False),
    RegionPSet = cms.PSet(
        originHalfLength = cms.double(90.0),
        originRadius = cms.double(150.0),
        originZPosition = cms.double(0.0),
        pMin = cms.double(1.0),
        ptMin = cms.double(0.5)
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TripletsDebugLevel = cms.untracked.uint32(0),
    TripletsSrc = cms.InputTag("simpleCosmicBONSeedingLayers"),
    helixDebugLevel = cms.untracked.uint32(0),
    maxSeeds = cms.int32(20000),
    maxTriplets = cms.int32(50000),
    minimumGoodHitsInSeed = cms.int32(3),
    rescaleError = cms.double(1.0),
    seedDebugLevel = cms.untracked.uint32(0),
    seedOnMiddle = cms.bool(False),
    writeTriplets = cms.bool(False)
)


process.sisCone5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('SISCone'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxInputs = cms.uint32(1000),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.5),
    radiusPU = cms.double(0.5),
    restrictInputs = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.sisCone7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('SISCone'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxInputs = cms.uint32(1000),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    rParam = cms.double(0.7),
    radiusPU = cms.double(0.5),
    restrictInputs = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.splitMuons = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(True),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useGEM = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useME0 = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(2.8),
            HitsMin = cms.int32(3),
            PruneCut = cms.double(5.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            RPChits = cms.InputTag("rpcRecHits"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        GEMSegmentCollectionLabel = cms.InputTag("gemSegments"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        ME0SegmentCollectionLabel = cms.InputTag("me0Segments"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useGEM = cms.bool(False),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useME0 = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(0.5),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("splittedTracksP5")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(True),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("splittedTracksP5", "globalCosmicSplitMuons", "cosmicMuons"),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.splittedTracksP5 = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('cosmic'),
    Fitter = cms.string('RKFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("cosmicTrackSplitter"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.standAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    InputObjects = cms.InputTag("ancientMuonSeed"),
    MuonTrajectoryBuilder = cms.string('Exhaustive'),
    STATrajBuilderParameters = cms.PSet(
        BWFilterParameters = cms.PSet(
            BWSeedType = cms.string('fromGenerator'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableGEMMeasurement = cms.bool(False),
            EnableME0Measurement = cms.bool(False),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('outsideIn'),
            GEMRecSegmentLabel = cms.InputTag("gemRecHits"),
            ME0RecSegmentLabel = cms.InputTag("me0Segments"),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        DoBackwardFilter = cms.bool(True),
        DoRefit = cms.bool(False),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableGEMMeasurement = cms.bool(False),
            EnableME0Measurement = cms.bool(False),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('insideOut'),
            GEMRecSegmentLabel = cms.InputTag("gemRecHits"),
            ME0RecSegmentLabel = cms.InputTag("me0Segments"),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        NavigationType = cms.string('Standard'),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            ForceAllIterations = cms.bool(False),
            MaxFractionOfLostHits = cms.double(0.05),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        ),
        SeedPosition = cms.string('in'),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RescaleError = cms.double(100.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.tcdsDigis = cms.EDProducer("TcdsRawToDigi",
    InputLabel = cms.InputTag("rawDataCollector")
)


process.tevMuons = cms.EDProducer("TevMuonProducer",
    MuonCollectionLabel = cms.InputTag("globalCosmicMuons"),
    RefitIndex = cms.vint32(1, 2, 3, 4),
    Refits = cms.vstring('default', 
        'firstHit', 
        'picky', 
        'dyt'),
    RefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutDT = cms.double(30.0),
        Chi2CutGEM = cms.double(1.0),
        Chi2CutME0 = cms.double(1.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(10, 10),
        DYTupdator = cms.bool(True),
        DYTuseAPE = cms.bool(False),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        GEMRecHitLabel = cms.InputTag("gemRecHits"),
        HitThreshold = cms.int32(1),
        ME0RecHitLabel = cms.InputTag("me0Segments"),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(True),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        RefitDirection = cms.string('insideOut'),
        RefitFlag = cms.bool(True),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.totemRPRawToDigi = cms.EDProducer("TotemVFATRawToDigi",
    RawToDigi = cms.PSet(
        BC_fraction = cms.untracked.double(0.6),
        BC_min = cms.untracked.uint32(10),
        EC_fraction = cms.untracked.double(0.6),
        EC_min = cms.untracked.uint32(10),
        printErrorSummary = cms.untracked.uint32(1),
        printUnknownFrameSummary = cms.untracked.uint32(0),
        testBCMostFrequent = cms.uint32(2),
        testCRC = cms.uint32(2),
        testECMostFrequent = cms.uint32(2),
        testFootprint = cms.uint32(2),
        testID = cms.uint32(2),
        verbosity = cms.untracked.uint32(0)
    ),
    RawUnpacking = cms.PSet(

    ),
    fedIds = cms.vuint32(),
    rawDataTag = cms.InputTag("rawDataCollector"),
    subSystem = cms.string('TrackingStrip')
)


process.totemTriggerRawToDigi = cms.EDProducer("TotemTriggerRawToDigi",
    fedId = cms.uint32(0),
    rawDataTag = cms.InputTag("rawDataCollector")
)


process.towerMaker = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.6),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.8),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.8),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalPhase = cms.int32(0),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(False),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco")
)


process.towerMakerWithHO = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.7),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.8),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.8),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalPhase = cms.int32(0),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(True),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco")
)


process.uncleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    HybridBarrelSeedThr = cms.double(1.0),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitSeverityToBeExcluded = cms.vstring(),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    clustershapecollection = cms.string(''),
    dynamicEThresh = cms.bool(False),
    dynamicPhiRoad = cms.bool(False),
    eThreshA = cms.double(0.003),
    eThreshB = cms.double(0.1),
    eseed = cms.double(0.35),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    excludeFlagged = cms.bool(False),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    recHitsCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    step = cms.int32(17),
    superclusterCollection = cms.string(''),
    useEtForXi = cms.bool(True),
    xi = cms.double(0.0)
)


process.uncleanedOnlyCorrectedHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(True),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    hyb_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(8.0),
        brLinearLowThr = cms.double(1.1),
        fBremVec = cms.vdouble(-0.04382, 0.1169, 0.9267, -0.0009413, 1.419),
        fEtEtaVec = cms.vdouble(0, 1.00121, -0.63672, 0, 0, 
            0, 0.5655, 6.457, 0.5081, 8.0, 
            1.023, -0.00181)
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Hybrid')
)


process.zdcreco = cms.EDProducer("ZdcHitReconstructor",
    AuxTSvec = cms.vint32(4, 5, 6, 7),
    Subdetector = cms.string('ZDC'),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(10.0),
    digiLabelQIE10ZDC = cms.InputTag("hcalDigis","ZDC"),
    digiLabelcastor = cms.InputTag("castorDigis"),
    digiLabelhcal = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    lowGainFrac = cms.double(8.15),
    lowGainOffset = cms.int32(1),
    recoMethod = cms.int32(2),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(True),
    setNoiseFlags = cms.bool(True),
    setSaturationFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(False)
)


process.ALCARECODtCalibCosmicsHLTFilter = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('MuAlcaDtCalibCosmics'),
    throw = cms.bool(False)
)


process.ALCARECOHcalCalHOCosmicHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('HcalCalHOCosmics'),
    throw = cms.bool(False)
)


process.ALCARECOMuAlGlobalCosmics = cms.EDFilter("AlignmentMuonSelectorModule",
    applyBasicCuts = cms.bool(True),
    applyMassPairFilter = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMaxGB = cms.double(9999999.0),
    chi2nMaxSA = cms.double(9999999.0),
    chi2nMaxTO = cms.double(9999999.0),
    etaMax = cms.double(100.0),
    etaMin = cms.double(-100.0),
    filter = cms.bool(True),
    maxMassPair = cms.double(90.0),
    minMassPair = cms.double(89.0),
    minMultiplicity = cms.int32(1),
    nHighestPt = cms.int32(2),
    nHitMaxGB = cms.double(9999999.0),
    nHitMaxSA = cms.double(9999999.0),
    nHitMaxTO = cms.double(9999999.0),
    nHitMinGB = cms.double(0.0),
    nHitMinSA = cms.double(0.0),
    nHitMinTO = cms.double(0.0),
    pMax = cms.double(999999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999999.0),
    ptMin = cms.double(10.0),
    src = cms.InputTag("muons")
)


process.ALCARECOMuAlGlobalCosmicsDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(False),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('DT0', 
        'DTp', 
        'DTm', 
        'CSCp', 
        'CSCm')
)


process.ALCARECOMuAlGlobalCosmicsHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('MuAlGlobalCosmics'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlCosmicsCTF0T = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(99.0),
    etaMin = cms.double(-99.0),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(1),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(7),
    nHitMin2D = cms.uint32(2),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(99999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("ctfWithMaterialTracksP5"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlCosmicsCosmicTF0T = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(99.0),
    etaMin = cms.double(-99.0),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(1),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(7),
    nHitMin2D = cms.uint32(2),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(99999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("cosmictrackfinderP5"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlCosmicsRegional0T = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(99.0),
    etaMin = cms.double(-99.0),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(1),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(7),
    nHitMin2D = cms.uint32(2),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(99999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("regionalCosmicTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOMuAlGlobalCosmicsTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('ALCARECOMuAlGlobalCosmics') ),
        ("BSFolderName" , cms.string('AlCaReco/MuAlGlobalCosmics/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/MuAlGlobalCosmics') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(5) ),
        ("TkSizeMax" , cms.double(5) ),
        ("TkSizeMin" , cms.double(0) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOMuAlGlobalCosmics","GlobalMuon") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(30) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
    ] +
    [
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.ALCARECOTkAlCosmicsCTF0TTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlCosmicsCTF0T'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlCosmics0T'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("ctfWithMaterialTracksP5"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCTF0T"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(True)
)


process.ALCARECOTkAlCosmicsCTF0TTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('ALCARECOTkAlCosmicsCTF0T') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlCosmicsCTF0T/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlCosmics0T') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlCosmicsCTF0T") ),
        ("TrackPtBin" , cms.int32(500) ),
        ("TrackPtMax" , cms.double(500) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
    ] +
    [
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.ALCARECOTkAlCosmicsCosmicTF0TTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlCosmicsCosmicTF0T'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlCosmics0T'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("cosmictrackfinderP5"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCosmicTF0T"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(True)
)


process.ALCARECOTkAlCosmicsCosmicTF0TTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('ALCARECOTkAlCosmicsCosmicTF0T') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlCosmicsCosmicTF0T/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlCosmics0T') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlCosmicsCosmicTF0T") ),
        ("TrackPtBin" , cms.int32(500) ),
        ("TrackPtMax" , cms.double(500) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
    ] +
    [
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.ALCARECOTkAlCosmicsRegional0TTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlCosmicsRegional0T'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlCosmics0T'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("cosmictrackfinderP5"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsRegional0T"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(True)
)


process.ALCARECOTkAlCosmicsRegional0TTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('ALCARECOTkAlCosmicsRegional0T') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlCosmicsRegional0T/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlCosmics0T') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlCosmicsRegional0T") ),
        ("TrackPtBin" , cms.int32(500) ),
        ("TrackPtMax" , cms.double(500) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
    ] +
    [
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.AnalyzeSUSYDQM = cms.EDAnalyzer("SUSYDQMAnalyzer",
    CaloJetCollectionLabel = cms.InputTag("ak4CaloJets"),
    CaloMETCollectionLabel = cms.InputTag("caloMet"),
    JetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(False),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_lowptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_L1Jet6U')
    ),
    PFJetCollectionLabel = cms.InputTag("ak4PFJets"),
    PFMETCollectionLabel = cms.InputTag("pfMet"),
    folderName = cms.string('JetMET/SUSYDQM/'),
    maxAbsEta = cms.double(2.4),
    maxNJets = cms.double(10),
    ptThreshold = cms.double(20.0)
)


process.B2GDQM = cms.EDAnalyzer("B2GDQM",
    PFJetCorService = cms.string('ak4PFL1FastL2L3'),
    allHadDeltaPhiCut = cms.double(1.57079632679),
    allHadPtCut = cms.double(400.0),
    allHadRapidityCut = cms.double(1.0),
    cmsTagLabel = cms.InputTag("cmsTopTagPFJetsCHS"),
    elecSelect = cms.string('pt > 45.0 & abs(eta)<2.5 & abs(gsfTrack.d0)<1 & abs(gsfTrack.dz)<20'),
    electronSrc = cms.InputTag("gedGsfElectrons"),
    jetLabels = cms.VInputTag("ak4PFJets", "ak4PFJetsCHS", "ak8PFJetsCHS", "ak8PFJetsCHSSoftDrop", "cmsTopTagPFJetsCHS"),
    jetPtMins = cms.vdouble(50.0, 50.0, 50.0, 50.0, 100.0),
    muonSelect = cms.string('pt > 45.0 & abs(eta)<2.1 & isGlobalMuon & abs(globalTrack.d0)<1 & abs(globalTrack.dz)<20'),
    muonSrc = cms.InputTag("muons"),
    pfMETCollection = cms.InputTag("pfMet"),
    semiE_HadJetPtCut = cms.double(400.0),
    semiE_LepJetPtCut = cms.double(30.0),
    semiE_dRMin = cms.double(0.5),
    semiE_dphiHadCut = cms.double(1.57079632679),
    semiE_ptRel = cms.double(25.0),
    semiMu_HadJetPtCut = cms.double(400.0),
    semiMu_LepJetPtCut = cms.double(30.0),
    semiMu_dRMin = cms.double(0.5),
    semiMu_dphiHadCut = cms.double(1.57079632679),
    semiMu_ptRel = cms.double(25.0),
    triggerResultsCollection = cms.InputTag("TriggerResults","","HLT")
)


process.DQMMessageLogger = cms.EDAnalyzer("DQMMessageLogger",
    Categories = cms.vstring(),
    Directory = cms.string('MessageLogger')
)


process.DTDataIntegrityTask = cms.EDAnalyzer("DTDataIntegrityTask",
    dtDDULabel = cms.InputTag("dtDataIntegrityUnpacker"),
    dtROS25Label = cms.InputTag("dtDataIntegrityUnpacker"),
    fedIntegrityFolder = cms.untracked.string('DT/FEDIntegrity'),
    getSCInfo = cms.untracked.bool(True),
    processingMode = cms.untracked.string('Offline')
)


process.DiElectronDQM = cms.EDAnalyzer("TopDiLeptonOfflineDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. && abs(y)<1. && abs(z)<20. && tracksSize>3 && !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('elecs:step0'),
        max = cms.int32(2),
        min = cms.int32(2),
        select = cms.string("pt>20 & abs(eta)<2.5 && gsfElectronRef.gsfTrack.hitPattern().numberOfHits(\'MISSING_INNER_HITS\') <= 0 && (gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15"),
        src = cms.InputTag("pfIsolatedElectronsEI")
    ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            min = cms.int32(2),
            select = cms.string('pt>30. & abs(eta)<2.4'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopDiElectronDQM/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
            select = cms.string('pt>20. && abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>30. & abs(eta)<2.4 ')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(76.0),
            upperEdge = cms.double(106.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2'),
            select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && muonRef.pt > 20. && abs(muonRef.eta)<2.4')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("caloMet", "tcMet", "pfMet"),
            muons = cms.InputTag("pfIsolatedMuonsEI")
        )
    )
)


process.DiMuonDQM = cms.EDAnalyzer("TopDiLeptonOfflineDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. && abs(y)<1. && abs(z)<20. && tracksSize>3 && !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('muons:step0'),
        max = cms.int32(2),
        min = cms.int32(2),
        select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && muonRef.pt > 20. && abs(muonRef.eta)<2.4'),
        src = cms.InputTag("pfIsolatedMuonsEI")
    ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            min = cms.int32(2),
            select = cms.string('pt>30. & abs(eta)<2.4 '),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopDiMuonDQM/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
            select = cms.string('pt>20. && abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>30. & abs(eta)<2.4 ')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(76.0),
            upperEdge = cms.double(106.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2'),
            select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && muonRef.pt > 20. && abs(muonRef.eta)<2.4')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("caloMet", "tcMet", "pfMet"),
            muons = cms.InputTag("pfIsolatedMuonsEI")
        )
    )
)


process.ElecMuonDQM = cms.EDAnalyzer("TopDiLeptonOfflineDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. && abs(y)<1. && abs(z)<20. && tracksSize>3 && !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('muons:step0'),
        max = cms.int32(1),
        min = cms.int32(1),
        select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && (muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2 && muonRef.pt > 20. && abs(muonRef.eta)<2.4'),
        src = cms.InputTag("pfIsolatedMuonsEI")
    ), 
        cms.PSet(
            label = cms.string('elecs:step1'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string('pt>20 & abs(eta)<2.5 && (gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
            src = cms.InputTag("pfIsolatedElectronsEI")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step2'),
            min = cms.int32(2),
            select = cms.string('pt>30. & abs(eta)<2.4 '),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopElecMuonDQM/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
            select = cms.string('pt>10. && abs(eta)<2.4 && abs(gsfElectronRef.gsfTrack.d0)<1. && abs(gsfElectronRef.gsfTrack.dz)<20.')
        ),
        jetExtras = cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>30. & abs(eta)<2.4 ')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(76.0),
            upperEdge = cms.double(106.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2'),
            select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && muonRef.pt > 10. && abs(muonRef.eta)<2.4')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("caloMet", "tcMet", "pfMet"),
            muons = cms.InputTag("pfIsolatedMuonsEI")
        )
    )
)


process.ExoticaDQM = cms.EDAnalyzer("ExoticaDQM",
    DiJetPFJetCollection = cms.VInputTag("ak4PFJetsCHS", "ak8PFJetsCHS"),
    HltPaths = cms.vstring('HLT_Mu', 
        'HLT_Ele', 
        'HLT_Photon', 
        'HLT_PFHT', 
        'HLT_HT', 
        'HLT_PFMET', 
        'HLT_MET', 
        'HLT_'),
    JetIDParams = cms.PSet(
        ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        hbheRecHitsColl = cms.InputTag("hbhereco"),
        hfRecHitsColl = cms.InputTag("hfreco"),
        hoRecHitsColl = cms.InputTag("horeco"),
        useRecHits = cms.bool(True)
    ),
    TriggerResults = cms.InputTag("TriggerResults","","HLT"),
    caloMETCollection = cms.InputTag("caloMetM"),
    dielectron_Electron1_pt_cut = cms.double(50.0),
    dielectron_Electron2_pt_cut = cms.double(50.0),
    dijet_PFJet1_pt_cut = cms.double(30.0),
    dijet_PFJet2_pt_cut = cms.double(30.0),
    dimuon_Muon1_pt_cut = cms.double(50.0),
    dimuon_Muon2_pt_cut = cms.double(50.0),
    diphoton_Photon1_pt_cut = cms.double(20.0),
    diphoton_Photon2_pt_cut = cms.double(20.0),
    dispFermion_eta_cut = cms.double(2.4),
    dispFermion_pt_cut = cms.double(1.0),
    displacedMuonCollection = cms.InputTag("displacedGlobalMuons"),
    displacedSAMuonCollection = cms.InputTag("displacedStandAloneMuons"),
    electronCollection = cms.InputTag("gedGsfElectrons"),
    genParticleCollection = cms.InputTag("genParticles"),
    jetCorrector = cms.InputTag("ak4PFL1FastL2L3Corrector"),
    monoelectron_Electron_met_cut = cms.double(100.0),
    monoelectron_Electron_pt_cut = cms.double(80.0),
    monojet_PFJet_met_cut = cms.double(100.0),
    monojet_PFJet_pt_cut = cms.double(80.0),
    monomuon_Muon_met_cut = cms.double(100.0),
    monomuon_Muon_pt_cut = cms.double(80.0),
    monophoton_Photon_met_cut = cms.double(100.0),
    monophoton_Photon_pt_cut = cms.double(80.0),
    muonCollection = cms.InputTag("muons"),
    pfJetCollection = cms.InputTag("ak4PFJetsCHS"),
    pfMETCollection = cms.InputTag("pfMet"),
    photonCollection = cms.InputTag("gedPhotons"),
    trackCollection = cms.InputTag("generalTracks"),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.HiggsDQM = cms.EDAnalyzer("HiggsDQM",
    PtThrMu1 = cms.untracked.double(3.0),
    PtThrMu2 = cms.untracked.double(3.0),
    caloJetCollection = cms.InputTag("ak4CaloJets"),
    caloMETCollection = cms.InputTag("caloMetM"),
    elecTriggerPathToPass = cms.string('HLT_Ele10_LW_L1R'),
    electronCollection = cms.InputTag("gedGsfElectrons"),
    genParticleCollection = cms.InputTag("genParticles"),
    muonCollection = cms.InputTag("muons"),
    muonTriggerPathToPass = cms.string('HLT_Mu9'),
    pfMETCollection = cms.InputTag("pfMet"),
    triggerResultsCollection = cms.InputTag("TriggerResults","","HLT")
)


process.LocalRecoLogMessageMon = cms.EDAnalyzer("LogMessageMonitor",
    BXlumiSetup = cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ),
    LogFolderName = cms.string('Tracking/MessageLog'),
    OutputFileName = cms.string('MonitorTrack.root'),
    OutputMEsInRootFile = cms.bool(False),
    categories = cms.vstring('SiPixelRawToDigi', 
        'TooManyErrors', 
        'TooManyClusters'),
    doPUmonitoring = cms.bool(False),
    doWarningsPlots = cms.bool(False),
    genericTriggerEventPSet = cms.PSet(
        andOr = cms.bool(False),
        andOrDcs = cms.bool(False),
        dcsInputTag = cms.InputTag("scalersRawToDigi"),
        dcsPartitions = cms.vint32(24, 25, 26, 27, 28, 
            29),
        errorReplyDcs = cms.bool(True)
    ),
    modules = cms.vstring('siPixelDigis', 
        'siStripDigis', 
        'siPixelClusters', 
        'siStripClusters'),
    pluginsMonName = cms.string('LocalReco')
)


process.MonitorTrackEfficiencySTACosmicMuons = cms.EDAnalyzer("TrackEfficiencyMonitor",
    AlgoName = cms.string('STA'),
    FolderName = cms.string('Muons/cosmicMuons'),
    OutputFileName = cms.string('MonitorTrackEfficiency.root'),
    OutputMEsInRootFile = cms.bool(False),
    STATrackCollection = cms.InputTag("cosmicMuons"),
    TKTrackCollection = cms.InputTag("ctfWithMaterialTracksP5"),
    deltaXBin = cms.int32(50),
    deltaXMax = cms.double(100),
    deltaXMin = cms.double(-100),
    deltaYBin = cms.int32(50),
    deltaYMax = cms.double(100),
    deltaYMin = cms.double(-100),
    isBFieldOff = cms.bool(False),
    muonCompatibleLayersBin = cms.int32(10),
    muonCompatibleLayersMax = cms.double(30),
    muonCompatibleLayersMin = cms.double(0),
    muonD0Bin = cms.int32(50),
    muonD0Max = cms.double(100),
    muonD0Min = cms.double(-100),
    muonEtaBin = cms.int32(50),
    muonEtaMax = cms.double(3.2),
    muonEtaMin = cms.double(-3.2),
    muonPhiBin = cms.int32(50),
    muonPhiMax = cms.double(0.0),
    muonPhiMin = cms.double(-3.2),
    muonXBin = cms.int32(50),
    muonXMax = cms.double(100),
    muonXMin = cms.double(-100),
    muonYBin = cms.int32(50),
    muonYMax = cms.double(100),
    muonYMin = cms.double(-100),
    muonZBin = cms.int32(50),
    muonZMax = cms.double(500),
    muonZMin = cms.double(-500),
    signDeltaXBin = cms.int32(50),
    signDeltaXMax = cms.double(5),
    signDeltaXMin = cms.double(-5),
    signDeltaYBin = cms.int32(50),
    signDeltaYMax = cms.double(5),
    signDeltaYMin = cms.double(-5),
    theMaxZ = cms.double(110.0),
    theRadius = cms.double(85.0),
    trackCompatibleLayersBin = cms.int32(10),
    trackCompatibleLayersMax = cms.double(30),
    trackCompatibleLayersMin = cms.double(0),
    trackD0Bin = cms.int32(50),
    trackD0Max = cms.double(100),
    trackD0Min = cms.double(-100),
    trackEfficiency = cms.bool(True),
    trackEtaBin = cms.int32(50),
    trackEtaMax = cms.double(3.2),
    trackEtaMin = cms.double(-3.2),
    trackPhiBin = cms.int32(50),
    trackPhiMax = cms.double(0.0),
    trackPhiMin = cms.double(-3.2),
    trackXBin = cms.int32(50),
    trackXMax = cms.double(100),
    trackXMin = cms.double(-100),
    trackYBin = cms.int32(50),
    trackYMax = cms.double(100),
    trackYMin = cms.double(-100),
    trackZBin = cms.int32(50),
    trackZMax = cms.double(500),
    trackZMin = cms.double(-500)
)


process.MonitorTrackEfficiencyTkTracks = cms.EDAnalyzer("TrackEfficiencyMonitor",
    AlgoName = cms.string('CTF'),
    FolderName = cms.string('Muons/TKTrack'),
    OutputFileName = cms.string('MonitorTrackEfficiency.root'),
    OutputMEsInRootFile = cms.bool(False),
    STATrackCollection = cms.InputTag("cosmicMuons"),
    TKTrackCollection = cms.InputTag("ctfWithMaterialTracksP5"),
    deltaXBin = cms.int32(50),
    deltaXMax = cms.double(100),
    deltaXMin = cms.double(-100),
    deltaYBin = cms.int32(50),
    deltaYMax = cms.double(100),
    deltaYMin = cms.double(-100),
    isBFieldOff = cms.bool(False),
    muonCompatibleLayersBin = cms.int32(10),
    muonCompatibleLayersMax = cms.double(30),
    muonCompatibleLayersMin = cms.double(0),
    muonD0Bin = cms.int32(50),
    muonD0Max = cms.double(100),
    muonD0Min = cms.double(-100),
    muonEtaBin = cms.int32(50),
    muonEtaMax = cms.double(3.2),
    muonEtaMin = cms.double(-3.2),
    muonPhiBin = cms.int32(50),
    muonPhiMax = cms.double(0.0),
    muonPhiMin = cms.double(-3.2),
    muonXBin = cms.int32(50),
    muonXMax = cms.double(100),
    muonXMin = cms.double(-100),
    muonYBin = cms.int32(50),
    muonYMax = cms.double(100),
    muonYMin = cms.double(-100),
    muonZBin = cms.int32(50),
    muonZMax = cms.double(500),
    muonZMin = cms.double(-500),
    signDeltaXBin = cms.int32(50),
    signDeltaXMax = cms.double(5),
    signDeltaXMin = cms.double(-5),
    signDeltaYBin = cms.int32(50),
    signDeltaYMax = cms.double(5),
    signDeltaYMin = cms.double(-5),
    theMaxZ = cms.double(110.0),
    theRadius = cms.double(85.0),
    trackCompatibleLayersBin = cms.int32(10),
    trackCompatibleLayersMax = cms.double(30),
    trackCompatibleLayersMin = cms.double(0),
    trackD0Bin = cms.int32(50),
    trackD0Max = cms.double(100),
    trackD0Min = cms.double(-100),
    trackEfficiency = cms.bool(False),
    trackEtaBin = cms.int32(50),
    trackEtaMax = cms.double(3.2),
    trackEtaMin = cms.double(-3.2),
    trackPhiBin = cms.int32(50),
    trackPhiMax = cms.double(0.0),
    trackPhiMin = cms.double(-3.2),
    trackXBin = cms.int32(50),
    trackXMax = cms.double(100),
    trackXMin = cms.double(-100),
    trackYBin = cms.int32(50),
    trackYMax = cms.double(100),
    trackYMin = cms.double(-100),
    trackZBin = cms.int32(50),
    trackZMax = cms.double(500),
    trackZMin = cms.double(-500)
)


process.MonitorTrackGLBCosmicMuons = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('glb') ),
        ("BSFolderName" , cms.string('Muons/globalCosmicMuons/BeamSpotParameters') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('Muons/globalCosmicMuons') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(100) ),
        ("TkSizeMax" , cms.double(99.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("globalCosmicMuons") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
    ] +
    [
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.MonitorTrackLHCStandAloneMuonsBarrelOnly = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('sta') ),
        ("BSFolderName" , cms.string('Muons/standAloneMuonsUpdatedAtVtx/BeamSpotParameters') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(250) ),
        ("Chi2Max" , cms.double(500.0) ),
        ("Chi2Min" , cms.double(0.0) ),
        ("Chi2NDFBin" , cms.int32(200) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(100) ),
        ("EtaMax" , cms.double(3.0) ),
        ("EtaMin" , cms.double(-3.0) ),
        ("FolderName" , cms.string('Muons/standAloneMuonsBarrelOnly') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(20) ),
        ("MeanLayMax" , cms.double(19.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClus2DPxBin" , cms.int32(20) ),
        ("NClus2DPxMax" , cms.double(1999.5) ),
        ("NClus2DPxMin" , cms.double(-0.5) ),
        ("NClus2DStrBin" , cms.int32(50) ),
        ("NClus2DStrMax" , cms.double(14999.5) ),
        ("NClus2DStrMin" , cms.double(-0.5) ),
        ("NClus2DTotBin" , cms.int32(50) ),
        ("NClus2DTotMax" , cms.double(14999.5) ),
        ("NClus2DTotMin" , cms.double(-0.5) ),
        ("NClusPxBin" , cms.int32(50) ),
        ("NClusPxMax" , cms.double(1999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(150) ),
        ("NClusStrMax" , cms.double(14999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(20) ),
        ("NTrk2DMax" , cms.double(199.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('monitortrackparameters_stamuons.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBHitBin" , cms.int32(10) ),
        ("PXBHitMax" , cms.double(9.5) ),
        ("PXBHitMin" , cms.double(-0.5) ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFHitBin" , cms.int32(10) ),
        ("PXFHitMax" , cms.double(9.5) ),
        ("PXFHitMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(36) ),
        ("PhiMax" , cms.double(3.2) ),
        ("PhiMin" , cms.double(-3.2) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(120) ),
        ("RecHitMax" , cms.double(120.0) ),
        ("RecHitMin" , cms.double(0.0) ),
        ("RecLayBin" , cms.int32(120) ),
        ("RecLayMax" , cms.double(120.0) ),
        ("RecLayMin" , cms.double(0.0) ),
        ("RecLostBin" , cms.int32(120) ),
        ("RecLostMax" , cms.double(20) ),
        ("RecLostMin" , cms.double(0.0) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(200) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("combinedP5SeedsForCTF") ),
        ("TCDxyBin" , cms.int32(200) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(200) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("ckfTrackCandidatesP5") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECHitBin" , cms.int32(25) ),
        ("TECHitMax" , cms.double(24.5) ),
        ("TECHitMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBHitBin" , cms.int32(15) ),
        ("TIBHitMax" , cms.double(14.5) ),
        ("TIBHitMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDHitBin" , cms.int32(15) ),
        ("TIDHitMax" , cms.double(14.5) ),
        ("TIDHitMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBHitBin" , cms.int32(15) ),
        ("TOBHitMax" , cms.double(14.5) ),
        ("TOBHitMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(100) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(20) ),
        ("TkSeedSizeMax" , cms.double(19.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(11) ),
        ("TkSizeMax" , cms.double(10.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(1000) ),
        ("TrackPMax" , cms.double(1000) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("lhcStandAloneMuonsBarrelOnly") ),
        ("TrackPtBin" , cms.int32(1000) ),
        ("TrackPtMax" , cms.double(1000) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(1000) ),
        ("TrackPxMax" , cms.double(500.0) ),
        ("TrackPxMin" , cms.double(-500.0) ),
        ("TrackPyBin" , cms.int32(1000) ),
        ("TrackPyMax" , cms.double(500.0) ),
        ("TrackPyMin" , cms.double(-500.0) ),
        ("TrackPzBin" , cms.int32(1000) ),
        ("TrackPzMax" , cms.double(500.0) ),
        ("TrackPzMin" , cms.double(-500.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(20) ),
        ("VXMax" , cms.double(20.0) ),
        ("VXMin" , cms.double(-20.0) ),
        ("VYBin" , cms.int32(20) ),
        ("VYMax" , cms.double(20.0) ),
        ("VYMin" , cms.double(-20.0) ),
        ("VZBin" , cms.int32(50) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(100.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-100.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(3.0) ),
        ("X0Min" , cms.double(-3.0) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(3.0) ),
        ("Y0Min" , cms.double(-3.0) ),
        ("Z0Bin" , cms.int32(60) ),
        ("Z0Max" , cms.double(30.0) ),
        ("Z0Min" , cms.double(-30.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
    ] +
    [
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(100) ),
        ("etaErrMax" , cms.double(0.5) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(100) ),
        ("pErrMax" , cms.double(10.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(100) ),
        ("phiErrMax" , cms.double(1.0) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(100) ),
        ("ptErrMax" , cms.double(10.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(100) ),
        ("pxErrMax" , cms.double(10.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(100) ),
        ("pyErrMax" , cms.double(10.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(100) ),
        ("pzErrMax" , cms.double(10.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.MonitorTrackLHCStandAloneMuonsEndCapsOnly = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('sta') ),
        ("BSFolderName" , cms.string('Muons/standAloneMuonsUpdatedAtVtx/BeamSpotParameters') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(250) ),
        ("Chi2Max" , cms.double(500.0) ),
        ("Chi2Min" , cms.double(0.0) ),
        ("Chi2NDFBin" , cms.int32(200) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(100) ),
        ("EtaMax" , cms.double(3.0) ),
        ("EtaMin" , cms.double(-3.0) ),
        ("FolderName" , cms.string('Muons/standAloneMuonsEndCapsOnly') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(20) ),
        ("MeanLayMax" , cms.double(19.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClus2DPxBin" , cms.int32(20) ),
        ("NClus2DPxMax" , cms.double(1999.5) ),
        ("NClus2DPxMin" , cms.double(-0.5) ),
        ("NClus2DStrBin" , cms.int32(50) ),
        ("NClus2DStrMax" , cms.double(14999.5) ),
        ("NClus2DStrMin" , cms.double(-0.5) ),
        ("NClus2DTotBin" , cms.int32(50) ),
        ("NClus2DTotMax" , cms.double(14999.5) ),
        ("NClus2DTotMin" , cms.double(-0.5) ),
        ("NClusPxBin" , cms.int32(50) ),
        ("NClusPxMax" , cms.double(1999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(150) ),
        ("NClusStrMax" , cms.double(14999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(20) ),
        ("NTrk2DMax" , cms.double(199.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('monitortrackparameters_stamuons.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBHitBin" , cms.int32(10) ),
        ("PXBHitMax" , cms.double(9.5) ),
        ("PXBHitMin" , cms.double(-0.5) ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFHitBin" , cms.int32(10) ),
        ("PXFHitMax" , cms.double(9.5) ),
        ("PXFHitMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(36) ),
        ("PhiMax" , cms.double(3.2) ),
        ("PhiMin" , cms.double(-3.2) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(120) ),
        ("RecHitMax" , cms.double(120.0) ),
        ("RecHitMin" , cms.double(0.0) ),
        ("RecLayBin" , cms.int32(120) ),
        ("RecLayMax" , cms.double(120.0) ),
        ("RecLayMin" , cms.double(0.0) ),
        ("RecLostBin" , cms.int32(120) ),
        ("RecLostMax" , cms.double(20) ),
        ("RecLostMin" , cms.double(0.0) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(200) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("combinedP5SeedsForCTF") ),
        ("TCDxyBin" , cms.int32(200) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(200) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("ckfTrackCandidatesP5") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECHitBin" , cms.int32(25) ),
        ("TECHitMax" , cms.double(24.5) ),
        ("TECHitMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBHitBin" , cms.int32(15) ),
        ("TIBHitMax" , cms.double(14.5) ),
        ("TIBHitMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDHitBin" , cms.int32(15) ),
        ("TIDHitMax" , cms.double(14.5) ),
        ("TIDHitMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBHitBin" , cms.int32(15) ),
        ("TOBHitMax" , cms.double(14.5) ),
        ("TOBHitMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(100) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(20) ),
        ("TkSeedSizeMax" , cms.double(19.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(11) ),
        ("TkSizeMax" , cms.double(10.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(1000) ),
        ("TrackPMax" , cms.double(1000) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("lhcStandAloneMuonsEndCapsOnly") ),
        ("TrackPtBin" , cms.int32(1000) ),
        ("TrackPtMax" , cms.double(1000) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(1000) ),
        ("TrackPxMax" , cms.double(500.0) ),
        ("TrackPxMin" , cms.double(-500.0) ),
        ("TrackPyBin" , cms.int32(1000) ),
        ("TrackPyMax" , cms.double(500.0) ),
        ("TrackPyMin" , cms.double(-500.0) ),
        ("TrackPzBin" , cms.int32(1000) ),
        ("TrackPzMax" , cms.double(500.0) ),
        ("TrackPzMin" , cms.double(-500.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(20) ),
        ("VXMax" , cms.double(20.0) ),
        ("VXMin" , cms.double(-20.0) ),
        ("VYBin" , cms.int32(20) ),
        ("VYMax" , cms.double(20.0) ),
        ("VYMin" , cms.double(-20.0) ),
        ("VZBin" , cms.int32(50) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(100.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-100.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(3.0) ),
        ("X0Min" , cms.double(-3.0) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(3.0) ),
        ("Y0Min" , cms.double(-3.0) ),
        ("Z0Bin" , cms.int32(60) ),
        ("Z0Max" , cms.double(30.0) ),
        ("Z0Min" , cms.double(-30.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
    ] +
    [
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(100) ),
        ("etaErrMax" , cms.double(0.5) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(100) ),
        ("pErrMax" , cms.double(10.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(100) ),
        ("phiErrMax" , cms.double(1.0) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(100) ),
        ("ptErrMax" , cms.double(10.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(100) ),
        ("pxErrMax" , cms.double(10.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(100) ),
        ("pyErrMax" , cms.double(10.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(100) ),
        ("pzErrMax" , cms.double(10.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.MonitorTrackResiduals_ckf = cms.EDAnalyzer("MonitorTrackResiduals",
    Mod_On = cms.bool(False),
    OutputFileName = cms.string('test_monitortracks.root'),
    OutputMEsInRootFile = cms.bool(False),
    ResetAfterRun = cms.bool(True),
    TH1NormResModules = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(5.0),
        xmin = cms.double(-5.0)
    ),
    TH1ResModules = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(0.05),
        xmin = cms.double(-0.05)
    ),
    Tracks = cms.InputTag("ctfWithMaterialTracksP5"),
    genericTriggerEventPSet = cms.PSet(

    ),
    trajectoryInput = cms.string('ctfWithMaterialTracksP5')
)


process.MonitorTrackSTACosmicMuons = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('sta') ),
        ("BSFolderName" , cms.string('Muons/standAloneMuonsUpdatedAtVtx/BeamSpotParameters') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(250) ),
        ("Chi2Max" , cms.double(500.0) ),
        ("Chi2Min" , cms.double(0.0) ),
        ("Chi2NDFBin" , cms.int32(200) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(100) ),
        ("EtaMax" , cms.double(3.0) ),
        ("EtaMin" , cms.double(-3.0) ),
        ("FolderName" , cms.string('Muons/cosmicMuons') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(20) ),
        ("MeanLayMax" , cms.double(19.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClus2DPxBin" , cms.int32(20) ),
        ("NClus2DPxMax" , cms.double(1999.5) ),
        ("NClus2DPxMin" , cms.double(-0.5) ),
        ("NClus2DStrBin" , cms.int32(50) ),
        ("NClus2DStrMax" , cms.double(14999.5) ),
        ("NClus2DStrMin" , cms.double(-0.5) ),
        ("NClus2DTotBin" , cms.int32(50) ),
        ("NClus2DTotMax" , cms.double(14999.5) ),
        ("NClus2DTotMin" , cms.double(-0.5) ),
        ("NClusPxBin" , cms.int32(50) ),
        ("NClusPxMax" , cms.double(1999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(150) ),
        ("NClusStrMax" , cms.double(14999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(20) ),
        ("NTrk2DMax" , cms.double(199.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('monitortrackparameters_stamuons.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBHitBin" , cms.int32(10) ),
        ("PXBHitMax" , cms.double(9.5) ),
        ("PXBHitMin" , cms.double(-0.5) ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFHitBin" , cms.int32(10) ),
        ("PXFHitMax" , cms.double(9.5) ),
        ("PXFHitMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(36) ),
        ("PhiMax" , cms.double(3.2) ),
        ("PhiMin" , cms.double(-3.2) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(120) ),
        ("RecHitMax" , cms.double(120.0) ),
        ("RecHitMin" , cms.double(0.0) ),
        ("RecLayBin" , cms.int32(120) ),
        ("RecLayMax" , cms.double(120.0) ),
        ("RecLayMin" , cms.double(0.0) ),
        ("RecLostBin" , cms.int32(120) ),
        ("RecLostMax" , cms.double(20) ),
        ("RecLostMin" , cms.double(0.0) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(200) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("combinedP5SeedsForCTF") ),
        ("TCDxyBin" , cms.int32(200) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(200) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("ckfTrackCandidatesP5") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECHitBin" , cms.int32(25) ),
        ("TECHitMax" , cms.double(24.5) ),
        ("TECHitMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBHitBin" , cms.int32(15) ),
        ("TIBHitMax" , cms.double(14.5) ),
        ("TIBHitMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDHitBin" , cms.int32(15) ),
        ("TIDHitMax" , cms.double(14.5) ),
        ("TIDHitMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBHitBin" , cms.int32(15) ),
        ("TOBHitMax" , cms.double(14.5) ),
        ("TOBHitMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(100) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(20) ),
        ("TkSeedSizeMax" , cms.double(19.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(11) ),
        ("TkSizeMax" , cms.double(10.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(1000) ),
        ("TrackPMax" , cms.double(1000) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("cosmicMuons") ),
        ("TrackPtBin" , cms.int32(1000) ),
        ("TrackPtMax" , cms.double(1000) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(1000) ),
        ("TrackPxMax" , cms.double(500.0) ),
        ("TrackPxMin" , cms.double(-500.0) ),
        ("TrackPyBin" , cms.int32(1000) ),
        ("TrackPyMax" , cms.double(500.0) ),
        ("TrackPyMin" , cms.double(-500.0) ),
        ("TrackPzBin" , cms.int32(1000) ),
        ("TrackPzMax" , cms.double(500.0) ),
        ("TrackPzMin" , cms.double(-500.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(20) ),
        ("VXMax" , cms.double(20.0) ),
        ("VXMin" , cms.double(-20.0) ),
        ("VYBin" , cms.int32(20) ),
        ("VYMax" , cms.double(20.0) ),
        ("VYMin" , cms.double(-20.0) ),
        ("VZBin" , cms.int32(50) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(100.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-100.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(3.0) ),
        ("X0Min" , cms.double(-3.0) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(3.0) ),
        ("Y0Min" , cms.double(-3.0) ),
        ("Z0Bin" , cms.int32(60) ),
        ("Z0Max" , cms.double(30.0) ),
        ("Z0Min" , cms.double(-30.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
    ] +
    [
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(100) ),
        ("etaErrMax" , cms.double(0.5) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(100) ),
        ("pErrMax" , cms.double(10.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(100) ),
        ("phiErrMax" , cms.double(1.0) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(100) ),
        ("ptErrMax" , cms.double(10.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(100) ),
        ("pxErrMax" , cms.double(10.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(100) ),
        ("pyErrMax" , cms.double(10.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(100) ),
        ("pzErrMax" , cms.double(10.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.MonitorTrackSTACosmicMuons1LegBarrel = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('sta') ),
        ("BSFolderName" , cms.string('Muons/standAloneMuonsUpdatedAtVtx/BeamSpotParameters') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(250) ),
        ("Chi2Max" , cms.double(500.0) ),
        ("Chi2Min" , cms.double(0.0) ),
        ("Chi2NDFBin" , cms.int32(200) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(100) ),
        ("EtaMax" , cms.double(3.0) ),
        ("EtaMin" , cms.double(-3.0) ),
        ("FolderName" , cms.string('Muons/cosmicMuons1LegBarrelOnly') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(20) ),
        ("MeanLayMax" , cms.double(19.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClus2DPxBin" , cms.int32(20) ),
        ("NClus2DPxMax" , cms.double(1999.5) ),
        ("NClus2DPxMin" , cms.double(-0.5) ),
        ("NClus2DStrBin" , cms.int32(50) ),
        ("NClus2DStrMax" , cms.double(14999.5) ),
        ("NClus2DStrMin" , cms.double(-0.5) ),
        ("NClus2DTotBin" , cms.int32(50) ),
        ("NClus2DTotMax" , cms.double(14999.5) ),
        ("NClus2DTotMin" , cms.double(-0.5) ),
        ("NClusPxBin" , cms.int32(50) ),
        ("NClusPxMax" , cms.double(1999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(150) ),
        ("NClusStrMax" , cms.double(14999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(20) ),
        ("NTrk2DMax" , cms.double(199.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('monitortrackparameters_stamuons.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBHitBin" , cms.int32(10) ),
        ("PXBHitMax" , cms.double(9.5) ),
        ("PXBHitMin" , cms.double(-0.5) ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFHitBin" , cms.int32(10) ),
        ("PXFHitMax" , cms.double(9.5) ),
        ("PXFHitMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(36) ),
        ("PhiMax" , cms.double(3.2) ),
        ("PhiMin" , cms.double(-3.2) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(120) ),
        ("RecHitMax" , cms.double(120.0) ),
        ("RecHitMin" , cms.double(0.0) ),
        ("RecLayBin" , cms.int32(120) ),
        ("RecLayMax" , cms.double(120.0) ),
        ("RecLayMin" , cms.double(0.0) ),
        ("RecLostBin" , cms.int32(120) ),
        ("RecLostMax" , cms.double(20) ),
        ("RecLostMin" , cms.double(0.0) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(200) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("combinedP5SeedsForCTF") ),
        ("TCDxyBin" , cms.int32(200) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(200) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("ckfTrackCandidatesP5") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECHitBin" , cms.int32(25) ),
        ("TECHitMax" , cms.double(24.5) ),
        ("TECHitMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBHitBin" , cms.int32(15) ),
        ("TIBHitMax" , cms.double(14.5) ),
        ("TIBHitMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDHitBin" , cms.int32(15) ),
        ("TIDHitMax" , cms.double(14.5) ),
        ("TIDHitMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBHitBin" , cms.int32(15) ),
        ("TOBHitMax" , cms.double(14.5) ),
        ("TOBHitMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(100) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(20) ),
        ("TkSeedSizeMax" , cms.double(19.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(11) ),
        ("TkSizeMax" , cms.double(10.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(1000) ),
        ("TrackPMax" , cms.double(1000) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("cosmicMuons1LegBarrelOnly") ),
        ("TrackPtBin" , cms.int32(1000) ),
        ("TrackPtMax" , cms.double(1000) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(1000) ),
        ("TrackPxMax" , cms.double(500.0) ),
        ("TrackPxMin" , cms.double(-500.0) ),
        ("TrackPyBin" , cms.int32(1000) ),
        ("TrackPyMax" , cms.double(500.0) ),
        ("TrackPyMin" , cms.double(-500.0) ),
        ("TrackPzBin" , cms.int32(1000) ),
        ("TrackPzMax" , cms.double(500.0) ),
        ("TrackPzMin" , cms.double(-500.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(20) ),
        ("VXMax" , cms.double(20.0) ),
        ("VXMin" , cms.double(-20.0) ),
        ("VYBin" , cms.int32(20) ),
        ("VYMax" , cms.double(20.0) ),
        ("VYMin" , cms.double(-20.0) ),
        ("VZBin" , cms.int32(50) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(100.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-100.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(3.0) ),
        ("X0Min" , cms.double(-3.0) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(3.0) ),
        ("Y0Min" , cms.double(-3.0) ),
        ("Z0Bin" , cms.int32(60) ),
        ("Z0Max" , cms.double(30.0) ),
        ("Z0Min" , cms.double(-30.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
    ] +
    [
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(100) ),
        ("etaErrMax" , cms.double(0.5) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(100) ),
        ("pErrMax" , cms.double(10.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(100) ),
        ("phiErrMax" , cms.double(1.0) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(100) ),
        ("ptErrMax" , cms.double(10.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(100) ),
        ("pxErrMax" , cms.double(10.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(100) ),
        ("pyErrMax" , cms.double(10.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(100) ),
        ("pzErrMax" , cms.double(10.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.MonitorTrackSTACosmicMuonsBarrel = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('sta') ),
        ("BSFolderName" , cms.string('Muons/standAloneMuonsUpdatedAtVtx/BeamSpotParameters') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(250) ),
        ("Chi2Max" , cms.double(500.0) ),
        ("Chi2Min" , cms.double(0.0) ),
        ("Chi2NDFBin" , cms.int32(200) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(100) ),
        ("EtaMax" , cms.double(3.0) ),
        ("EtaMin" , cms.double(-3.0) ),
        ("FolderName" , cms.string('Muons/cosmicMuonsBarrelOnly') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(20) ),
        ("MeanLayMax" , cms.double(19.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClus2DPxBin" , cms.int32(20) ),
        ("NClus2DPxMax" , cms.double(1999.5) ),
        ("NClus2DPxMin" , cms.double(-0.5) ),
        ("NClus2DStrBin" , cms.int32(50) ),
        ("NClus2DStrMax" , cms.double(14999.5) ),
        ("NClus2DStrMin" , cms.double(-0.5) ),
        ("NClus2DTotBin" , cms.int32(50) ),
        ("NClus2DTotMax" , cms.double(14999.5) ),
        ("NClus2DTotMin" , cms.double(-0.5) ),
        ("NClusPxBin" , cms.int32(50) ),
        ("NClusPxMax" , cms.double(1999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(150) ),
        ("NClusStrMax" , cms.double(14999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(20) ),
        ("NTrk2DMax" , cms.double(199.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('monitortrackparameters_stamuons.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBHitBin" , cms.int32(10) ),
        ("PXBHitMax" , cms.double(9.5) ),
        ("PXBHitMin" , cms.double(-0.5) ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFHitBin" , cms.int32(10) ),
        ("PXFHitMax" , cms.double(9.5) ),
        ("PXFHitMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(36) ),
        ("PhiMax" , cms.double(3.2) ),
        ("PhiMin" , cms.double(-3.2) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(120) ),
        ("RecHitMax" , cms.double(120.0) ),
        ("RecHitMin" , cms.double(0.0) ),
        ("RecLayBin" , cms.int32(120) ),
        ("RecLayMax" , cms.double(120.0) ),
        ("RecLayMin" , cms.double(0.0) ),
        ("RecLostBin" , cms.int32(120) ),
        ("RecLostMax" , cms.double(20) ),
        ("RecLostMin" , cms.double(0.0) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(200) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("combinedP5SeedsForCTF") ),
        ("TCDxyBin" , cms.int32(200) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(200) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("ckfTrackCandidatesP5") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECHitBin" , cms.int32(25) ),
        ("TECHitMax" , cms.double(24.5) ),
        ("TECHitMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBHitBin" , cms.int32(15) ),
        ("TIBHitMax" , cms.double(14.5) ),
        ("TIBHitMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDHitBin" , cms.int32(15) ),
        ("TIDHitMax" , cms.double(14.5) ),
        ("TIDHitMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBHitBin" , cms.int32(15) ),
        ("TOBHitMax" , cms.double(14.5) ),
        ("TOBHitMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(100) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(20) ),
        ("TkSeedSizeMax" , cms.double(19.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(11) ),
        ("TkSizeMax" , cms.double(10.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(1000) ),
        ("TrackPMax" , cms.double(1000) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("cosmicMuonsBarrelOnly") ),
        ("TrackPtBin" , cms.int32(1000) ),
        ("TrackPtMax" , cms.double(1000) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(1000) ),
        ("TrackPxMax" , cms.double(500.0) ),
        ("TrackPxMin" , cms.double(-500.0) ),
        ("TrackPyBin" , cms.int32(1000) ),
        ("TrackPyMax" , cms.double(500.0) ),
        ("TrackPyMin" , cms.double(-500.0) ),
        ("TrackPzBin" , cms.int32(1000) ),
        ("TrackPzMax" , cms.double(500.0) ),
        ("TrackPzMin" , cms.double(-500.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(20) ),
        ("VXMax" , cms.double(20.0) ),
        ("VXMin" , cms.double(-20.0) ),
        ("VYBin" , cms.int32(20) ),
        ("VYMax" , cms.double(20.0) ),
        ("VYMin" , cms.double(-20.0) ),
        ("VZBin" , cms.int32(50) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(100.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-100.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(3.0) ),
        ("X0Min" , cms.double(-3.0) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(3.0) ),
        ("Y0Min" , cms.double(-3.0) ),
        ("Z0Bin" , cms.int32(60) ),
        ("Z0Max" , cms.double(30.0) ),
        ("Z0Min" , cms.double(-30.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
    ] +
    [
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(100) ),
        ("etaErrMax" , cms.double(0.5) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(100) ),
        ("pErrMax" , cms.double(10.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(100) ),
        ("phiErrMax" , cms.double(1.0) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(100) ),
        ("ptErrMax" , cms.double(10.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(100) ),
        ("pxErrMax" , cms.double(10.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(100) ),
        ("pyErrMax" , cms.double(10.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(100) ),
        ("pzErrMax" , cms.double(10.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.MonitorTrackSTACosmicMuonsEndCaps = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('sta') ),
        ("BSFolderName" , cms.string('Muons/standAloneMuonsUpdatedAtVtx/BeamSpotParameters') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(250) ),
        ("Chi2Max" , cms.double(500.0) ),
        ("Chi2Min" , cms.double(0.0) ),
        ("Chi2NDFBin" , cms.int32(200) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(100) ),
        ("EtaMax" , cms.double(3.0) ),
        ("EtaMin" , cms.double(-3.0) ),
        ("FolderName" , cms.string('Muons/cosmicMuonsEndCapsOnly') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(20) ),
        ("MeanLayMax" , cms.double(19.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClus2DPxBin" , cms.int32(20) ),
        ("NClus2DPxMax" , cms.double(1999.5) ),
        ("NClus2DPxMin" , cms.double(-0.5) ),
        ("NClus2DStrBin" , cms.int32(50) ),
        ("NClus2DStrMax" , cms.double(14999.5) ),
        ("NClus2DStrMin" , cms.double(-0.5) ),
        ("NClus2DTotBin" , cms.int32(50) ),
        ("NClus2DTotMax" , cms.double(14999.5) ),
        ("NClus2DTotMin" , cms.double(-0.5) ),
        ("NClusPxBin" , cms.int32(50) ),
        ("NClusPxMax" , cms.double(1999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(150) ),
        ("NClusStrMax" , cms.double(14999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(20) ),
        ("NTrk2DMax" , cms.double(199.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('monitortrackparameters_stamuons.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBHitBin" , cms.int32(10) ),
        ("PXBHitMax" , cms.double(9.5) ),
        ("PXBHitMin" , cms.double(-0.5) ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFHitBin" , cms.int32(10) ),
        ("PXFHitMax" , cms.double(9.5) ),
        ("PXFHitMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(36) ),
        ("PhiMax" , cms.double(3.2) ),
        ("PhiMin" , cms.double(-3.2) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(120) ),
        ("RecHitMax" , cms.double(120.0) ),
        ("RecHitMin" , cms.double(0.0) ),
        ("RecLayBin" , cms.int32(120) ),
        ("RecLayMax" , cms.double(120.0) ),
        ("RecLayMin" , cms.double(0.0) ),
        ("RecLostBin" , cms.int32(120) ),
        ("RecLostMax" , cms.double(20) ),
        ("RecLostMin" , cms.double(0.0) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(200) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("combinedP5SeedsForCTF") ),
        ("TCDxyBin" , cms.int32(200) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(200) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("ckfTrackCandidatesP5") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECHitBin" , cms.int32(25) ),
        ("TECHitMax" , cms.double(24.5) ),
        ("TECHitMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBHitBin" , cms.int32(15) ),
        ("TIBHitMax" , cms.double(14.5) ),
        ("TIBHitMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDHitBin" , cms.int32(15) ),
        ("TIDHitMax" , cms.double(14.5) ),
        ("TIDHitMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBHitBin" , cms.int32(15) ),
        ("TOBHitMax" , cms.double(14.5) ),
        ("TOBHitMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(100) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(20) ),
        ("TkSeedSizeMax" , cms.double(19.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(11) ),
        ("TkSizeMax" , cms.double(10.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(1000) ),
        ("TrackPMax" , cms.double(1000) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("cosmicMuonsEndCapsOnly") ),
        ("TrackPtBin" , cms.int32(1000) ),
        ("TrackPtMax" , cms.double(1000) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(1000) ),
        ("TrackPxMax" , cms.double(500.0) ),
        ("TrackPxMin" , cms.double(-500.0) ),
        ("TrackPyBin" , cms.int32(1000) ),
        ("TrackPyMax" , cms.double(500.0) ),
        ("TrackPyMin" , cms.double(-500.0) ),
        ("TrackPzBin" , cms.int32(1000) ),
        ("TrackPzMax" , cms.double(500.0) ),
        ("TrackPzMin" , cms.double(-500.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(20) ),
        ("VXMax" , cms.double(20.0) ),
        ("VXMin" , cms.double(-20.0) ),
        ("VYBin" , cms.int32(20) ),
        ("VYMax" , cms.double(20.0) ),
        ("VYMin" , cms.double(-20.0) ),
        ("VZBin" , cms.int32(50) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(100.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-100.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(3.0) ),
        ("X0Min" , cms.double(-3.0) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(3.0) ),
        ("Y0Min" , cms.double(-3.0) ),
        ("Z0Bin" , cms.int32(60) ),
        ("Z0Max" , cms.double(30.0) ),
        ("Z0Min" , cms.double(-30.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
    ] +
    [
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(100) ),
        ("etaErrMax" , cms.double(0.5) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(100) ),
        ("pErrMax" , cms.double(10.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(100) ),
        ("phiErrMax" , cms.double(1.0) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(100) ),
        ("ptErrMax" , cms.double(10.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(100) ),
        ("pxErrMax" , cms.double(10.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(100) ),
        ("pyErrMax" , cms.double(10.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(100) ),
        ("pzErrMax" , cms.double(10.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.MonitorTrackSTACosmicMuonsNoDriftBarrel = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('sta') ),
        ("BSFolderName" , cms.string('Muons/standAloneMuonsUpdatedAtVtx/BeamSpotParameters') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(250) ),
        ("Chi2Max" , cms.double(500.0) ),
        ("Chi2Min" , cms.double(0.0) ),
        ("Chi2NDFBin" , cms.int32(200) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(100) ),
        ("EtaMax" , cms.double(3.0) ),
        ("EtaMin" , cms.double(-3.0) ),
        ("FolderName" , cms.string('Muons/cosmicMuonsNoDriftBarrelOnly') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(20) ),
        ("MeanLayMax" , cms.double(19.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClus2DPxBin" , cms.int32(20) ),
        ("NClus2DPxMax" , cms.double(1999.5) ),
        ("NClus2DPxMin" , cms.double(-0.5) ),
        ("NClus2DStrBin" , cms.int32(50) ),
        ("NClus2DStrMax" , cms.double(14999.5) ),
        ("NClus2DStrMin" , cms.double(-0.5) ),
        ("NClus2DTotBin" , cms.int32(50) ),
        ("NClus2DTotMax" , cms.double(14999.5) ),
        ("NClus2DTotMin" , cms.double(-0.5) ),
        ("NClusPxBin" , cms.int32(50) ),
        ("NClusPxMax" , cms.double(1999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(150) ),
        ("NClusStrMax" , cms.double(14999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(20) ),
        ("NTrk2DMax" , cms.double(199.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('monitortrackparameters_stamuons.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBHitBin" , cms.int32(10) ),
        ("PXBHitMax" , cms.double(9.5) ),
        ("PXBHitMin" , cms.double(-0.5) ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFHitBin" , cms.int32(10) ),
        ("PXFHitMax" , cms.double(9.5) ),
        ("PXFHitMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(36) ),
        ("PhiMax" , cms.double(3.2) ),
        ("PhiMin" , cms.double(-3.2) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(120) ),
        ("RecHitMax" , cms.double(120.0) ),
        ("RecHitMin" , cms.double(0.0) ),
        ("RecLayBin" , cms.int32(120) ),
        ("RecLayMax" , cms.double(120.0) ),
        ("RecLayMin" , cms.double(0.0) ),
        ("RecLostBin" , cms.int32(120) ),
        ("RecLostMax" , cms.double(20) ),
        ("RecLostMin" , cms.double(0.0) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(200) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("combinedP5SeedsForCTF") ),
        ("TCDxyBin" , cms.int32(200) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(200) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("ckfTrackCandidatesP5") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECHitBin" , cms.int32(25) ),
        ("TECHitMax" , cms.double(24.5) ),
        ("TECHitMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBHitBin" , cms.int32(15) ),
        ("TIBHitMax" , cms.double(14.5) ),
        ("TIBHitMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDHitBin" , cms.int32(15) ),
        ("TIDHitMax" , cms.double(14.5) ),
        ("TIDHitMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBHitBin" , cms.int32(15) ),
        ("TOBHitMax" , cms.double(14.5) ),
        ("TOBHitMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(100) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(20) ),
        ("TkSeedSizeMax" , cms.double(19.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(11) ),
        ("TkSizeMax" , cms.double(10.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(1000) ),
        ("TrackPMax" , cms.double(1000) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("cosmicMuonsNoDriftBarrelOnly") ),
        ("TrackPtBin" , cms.int32(1000) ),
        ("TrackPtMax" , cms.double(1000) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(1000) ),
        ("TrackPxMax" , cms.double(500.0) ),
        ("TrackPxMin" , cms.double(-500.0) ),
        ("TrackPyBin" , cms.int32(1000) ),
        ("TrackPyMax" , cms.double(500.0) ),
        ("TrackPyMin" , cms.double(-500.0) ),
        ("TrackPzBin" , cms.int32(1000) ),
        ("TrackPzMax" , cms.double(500.0) ),
        ("TrackPzMin" , cms.double(-500.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(20) ),
        ("VXMax" , cms.double(20.0) ),
        ("VXMin" , cms.double(-20.0) ),
        ("VYBin" , cms.int32(20) ),
        ("VYMax" , cms.double(20.0) ),
        ("VYMin" , cms.double(-20.0) ),
        ("VZBin" , cms.int32(50) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(100.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-100.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(3.0) ),
        ("X0Min" , cms.double(-3.0) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(3.0) ),
        ("Y0Min" , cms.double(-3.0) ),
        ("Z0Bin" , cms.int32(60) ),
        ("Z0Max" , cms.double(30.0) ),
        ("Z0Min" , cms.double(-30.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
    ] +
    [
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(100) ),
        ("etaErrMax" , cms.double(0.5) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(100) ),
        ("pErrMax" , cms.double(10.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(100) ),
        ("phiErrMax" , cms.double(1.0) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(100) ),
        ("ptErrMax" , cms.double(10.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(100) ),
        ("pxErrMax" , cms.double(10.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(100) ),
        ("pyErrMax" , cms.double(10.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(100) ),
        ("pzErrMax" , cms.double(10.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.MonitorTrackTKCosmicMuons = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('ctf') ),
        ("BSFolderName" , cms.string('Muons/TKTrack/BeamSpotParameters') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('Muons/TKTrack') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(100) ),
        ("TkSizeMax" , cms.double(99.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ctfWithMaterialTracksP5") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
    ] +
    [
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.SiPixelClusterSource = cms.EDAnalyzer("SiPixelClusterSource",
    TopFolderName = cms.string('Pixel'),
    bigEventSize = cms.untracked.int32(180),
    bladeOn = cms.untracked.bool(True),
    digisrc = cms.InputTag("siPixelDigis"),
    diskOn = cms.untracked.bool(True),
    isPIB = cms.untracked.bool(False),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_Cluster.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    smileyOn = cms.untracked.bool(True),
    src = cms.InputTag("siPixelClusters"),
    twoDimOn = cms.untracked.bool(False)
)


process.SiPixelDigiSource = cms.EDAnalyzer("SiPixelDigiSource",
    TopFolderName = cms.string('Pixel'),
    bigEventSize = cms.untracked.int32(2600),
    bladeOn = cms.untracked.bool(True),
    diskOn = cms.untracked.bool(True),
    hiRes = cms.untracked.bool(False),
    isPIB = cms.untracked.bool(False),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_Digi.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    src = cms.InputTag("siPixelDigis"),
    twoDimModOn = cms.untracked.bool(False),
    twoDimOn = cms.untracked.bool(False),
    twoDimOnlyLayDisk = cms.untracked.bool(False)
)


process.SiPixelHLTSource = cms.EDAnalyzer("SiPixelHLTSource",
    DirName = cms.untracked.string('Pixel/FEDIntegrity/'),
    ErrorInput = cms.InputTag("siPixelDigis"),
    RawInput = cms.InputTag("rawDataCollector"),
    outputFile = cms.string('Pixel_DQM_HLT.root'),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False)
)


process.SiPixelRawDataErrorSource = cms.EDAnalyzer("SiPixelRawDataErrorSource",
    TopFolderName = cms.string('Pixel'),
    bladeOn = cms.untracked.bool(True),
    isPIB = cms.untracked.bool(False),
    ladOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_Error.root'),
    reducedSet = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    src = cms.InputTag("siPixelDigis")
)


process.SiPixelRecHitSource = cms.EDAnalyzer("SiPixelRecHitSource",
    TopFolderName = cms.string('Pixel'),
    bladeOn = cms.untracked.bool(True),
    diskOn = cms.untracked.bool(True),
    isPIB = cms.untracked.bool(False),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_RecHits.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    src = cms.InputTag("siPixelRecHits"),
    twoDimOn = cms.untracked.bool(False)
)


process.SiPixelTrackResidualSource_Cosmics = cms.EDAnalyzer("SiPixelTrackResidualSource",
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    PtMinRes = cms.untracked.double(4.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TopFolderName = cms.string('Pixel'),
    TrackCandidateLabel = cms.string(''),
    TrackCandidateProducer = cms.string('ckfTrackCandidatesP5'),
    bladeOn = cms.untracked.bool(True),
    clustersrc = cms.InputTag("siPixelClusters"),
    debug = cms.untracked.bool(False),
    digisrc = cms.InputTag("siPixelDigis"),
    diskOn = cms.untracked.bool(True),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_TrackResidual.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    src = cms.InputTag("siPixelTrackResiduals"),
    tracksrc = cms.InputTag("ctfWithMaterialTracksP5"),
    trajectoryInput = cms.InputTag("ctfWithMaterialTracksP5")
)


process.SiStripMonitorCluster = cms.EDAnalyzer("SiStripMonitorCluster",
    ApvPhaseProducer = cms.InputTag("APVPhases"),
    BPTXfilter = cms.PSet(

    ),
    ClusWidthVsAmpTH2 = cms.PSet(
        Nbinsx = cms.int32(2000),
        Nbinsy = cms.int32(100),
        globalswitchon = cms.bool(True),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(2000.0),
        xmin = cms.double(0.0),
        ymax = cms.double(100.0),
        ymin = cms.double(0.0)
    ),
    ClusterChTkHistoMap_On = cms.bool(True),
    ClusterConditions = cms.PSet(
        On = cms.bool(True),
        maxStoN = cms.double(10000.0),
        maxWidth = cms.double(10000.0),
        minStoN = cms.double(0.0),
        minWidth = cms.double(0.0)
    ),
    ClusterHisto = cms.bool(True),
    ClusterLabel = cms.string(''),
    ClusterProducerPix = cms.InputTag("siPixelClusters"),
    ClusterProducerStrip = cms.InputTag("siStripClusters"),
    CreateTrendMEs = cms.bool(False),
    HistoryProducer = cms.InputTag("consecutiveHEs"),
    Mod_On = cms.bool(False),
    MultiplicityRegions = cms.PSet(
        MaxClus = cms.double(26000),
        MinPix = cms.double(50),
        dk0 = cms.double(40),
        k0 = cms.double(0.097),
        q0 = cms.double(300)
    ),
    NclusVsCycleTimeProf2D = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(90),
        globalswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(23592960),
        ymin = cms.double(0.0)
    ),
    NumberOfClusterPerLayerTrendVarTH2 = cms.PSet(
        Nbinsx = cms.int32(1000),
        Nbinsy = cms.int32(11),
        globalswitchon = cms.bool(True),
        xmax = cms.double(150.0),
        xmin = cms.double(0.0),
        ymax = cms.double(11.5),
        ymin = cms.double(0.5)
    ),
    NumberOfClusterPerRingVsTrendVarTH2 = cms.PSet(
        Nbinsx = cms.int32(1000),
        Nbinsy = cms.int32(9),
        globalswitchon = cms.bool(True),
        xmax = cms.double(150.0),
        xmin = cms.double(0.0),
        ymax = cms.double(9.5),
        ymin = cms.double(0.5)
    ),
    PixelDCSfilter = cms.PSet(

    ),
    ResetMEsEachRun = cms.bool(False),
    SelectAllDetectors = cms.bool(False),
    ShowControlView = cms.bool(False),
    ShowMechanicalStructureView = cms.bool(True),
    ShowReadoutView = cms.bool(False),
    StripDCSfilter = cms.PSet(

    ),
    StripQualityLabel = cms.string(''),
    TH1ABx_CSCP = cms.PSet(
        Nbinsx = cms.int32(3565),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(3564),
        xmin = cms.double(0.0)
    ),
    TH1ClusterCharge = cms.PSet(
        Nbinx = cms.int32(200),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(799.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterDigiPos = cms.PSet(
        Nbinx = cms.int32(768),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterNoise = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterPos = cms.PSet(
        Nbinx = cms.int32(768),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoN = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNVsPos = cms.PSet(
        Nbinx = cms.int32(768),
        Nbiny = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(299.5),
        ymin = cms.double(-0.5)
    ),
    TH1ClusterWidth = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(19.5),
        xmin = cms.double(-0.5)
    ),
    TH1DBxCycleGlobal = cms.PSet(
        Nbinsx = cms.int32(800),
        globalswitchon = cms.bool(True),
        xmax = cms.double(800.5),
        xmin = cms.double(0.5)
    ),
    TH1DBxGlobal = cms.PSet(
        Nbinsx = cms.int32(800),
        globalswitchon = cms.bool(True),
        xmax = cms.double(800.5),
        xmin = cms.double(0.5)
    ),
    TH1MainDiagonalPosition = cms.PSet(
        Nbinsx = cms.int32(100),
        globalswitchon = cms.bool(False),
        xmax = cms.double(2.0),
        xmin = cms.double(0.0)
    ),
    TH1ModuleLocalOccupancy = cms.PSet(
        Nbinx = cms.int32(51),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(1.01),
        xmin = cms.double(-0.01)
    ),
    TH1MultiplicityRegions = cms.PSet(
        Nbinx = cms.int32(5),
        globalswitchon = cms.bool(False),
        xmax = cms.double(5.5),
        xmin = cms.double(0.5)
    ),
    TH1NClusPx = cms.PSet(
        Nbinsx = cms.int32(100),
        xmax = cms.double(999.5),
        xmin = cms.double(-0.5)
    ),
    TH1NClusStrip = cms.PSet(
        Nbinsx = cms.int32(100),
        xmax = cms.double(1999.5),
        xmin = cms.double(-0.5)
    ),
    TH1NrOfClusterizedStrips = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(99.5),
        xmin = cms.double(-0.5)
    ),
    TH1StripNoise2ApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        globalswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5)
    ),
    TH1StripNoise3ApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        globalswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5)
    ),
    TH1TotalNumberOfClusters = cms.PSet(
        Nbinx = cms.int32(100),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(1999.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClusters = cms.PSet(
        Nbinx = cms.int32(11),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(10.5),
        xmin = cms.double(-0.5)
    ),
    TH2ApvCycleVsDBxGlobal = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        globalswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(800.5),
        ymin = cms.double(0.5)
    ),
    TH2CStripVsCpixel = cms.PSet(
        Nbinsx = cms.int32(150),
        Nbinsy = cms.int32(50),
        globalswitchon = cms.bool(False),
        xmax = cms.double(74999.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(14999.5),
        ymin = cms.double(-0.5)
    ),
    TH2ClustersApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(200),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        yfactor = cms.double(0.2),
        ymin = cms.double(0.0)
    ),
    TH2MainDiagonalPosition = cms.PSet(
        Nbinsx = cms.int32(3565),
        Nbinsy = cms.int32(100),
        globalswitchon = cms.bool(False),
        xmax = cms.double(3564),
        xmin = cms.double(0),
        ymax = cms.double(2.0),
        ymin = cms.double(0.0)
    ),
    TProf2ApvCycleVsDBx = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(800.5),
        ymin = cms.double(0.5),
        zmax = cms.double(0.0),
        zmin = cms.double(0.0)
    ),
    TProfClusterWidth = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(-0.5)
    ),
    TProfClustersApvCycle = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(200),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfClustersVsDBxCycle = cms.PSet(
        Nbins = cms.int32(800),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(800.5),
        xmin = cms.double(0.5),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfMainDiagonalPosition = cms.PSet(
        Nbinsx = cms.int32(3565),
        Nbinsy = cms.int32(100),
        globalswitchon = cms.bool(False),
        xmax = cms.double(3564),
        xmin = cms.double(0),
        ymax = cms.double(2.0),
        ymin = cms.double(0.0)
    ),
    TProfNClusPixel = cms.PSet(
        Nbinsx = cms.int32(3565),
        Nbinsy = cms.int32(200),
        globalswitchon = cms.bool(True),
        xmax = cms.double(3564),
        xmin = cms.double(0),
        ymax = cms.double(199999.5),
        ymin = cms.double(-0.5)
    ),
    TProfNClusStrip = cms.PSet(
        Nbinsx = cms.int32(3565),
        Nbinsy = cms.int32(200),
        globalswitchon = cms.bool(True),
        xmax = cms.double(3564),
        xmin = cms.double(0),
        ymax = cms.double(99999.5),
        ymin = cms.double(-0.5)
    ),
    TProfNumberOfCluster = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(-0.5)
    ),
    TProfTotalNumberOfClusters = cms.PSet(
        subdetswitchon = cms.bool(True)
    ),
    TkHistoMap_On = cms.bool(True),
    TopFolderName = cms.string('SiStrip'),
    TrendVsLS = cms.bool(True),
    Trending = cms.PSet(
        Nbins = cms.int32(600),
        xaxis = cms.string('Event Time in Seconds'),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0)
    ),
    TrendingLS = cms.PSet(
        Nbins = cms.int32(2400),
        xaxis = cms.string('Lumisection'),
        xmax = cms.double(150),
        xmin = cms.double(0.0)
    ),
    UseDCSFiltering = cms.bool(True)
)


process.SiStripMonitorDigi = cms.EDAnalyzer("SiStripMonitorDigi",
    ApvPhaseProducer = cms.InputTag("APVPhases"),
    CalculateStripOccupancy = cms.bool(False),
    CreateTrendMEs = cms.bool(False),
    DigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","ZeroSuppressed"), cms.InputTag("siStripZeroSuppression","VirginRaw"), cms.InputTag("siStripZeroSuppression","ProcessedRaw"), cms.InputTag("siStripZeroSuppression","ScopeMode")),
    HistoryProducer = cms.InputTag("consecutiveHEs"),
    Mod_On = cms.bool(False),
    ResetMEsEachRun = cms.bool(False),
    SelectAllDetectors = cms.bool(False),
    ShowControlView = cms.bool(False),
    ShowMechanicalStructureView = cms.bool(True),
    ShowReadoutView = cms.bool(False),
    TH1ADCsCoolestStrip = cms.PSet(
        Nbinx = cms.int32(60),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ADCsHottestStrip = cms.PSet(
        Nbinx = cms.int32(60),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ApvNumApvShots = cms.PSet(
        Nbins = cms.int32(6),
        globalswitchon = cms.bool(False),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(6.5),
        xmin = cms.double(0.5)
    ),
    TH1ChargeMedianApvShots = cms.PSet(
        Nbins = cms.int32(256),
        globalswitchon = cms.bool(True),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(256.5),
        xmin = cms.double(0.5)
    ),
    TH1DigiADCs = cms.PSet(
        Nbinx = cms.int32(64),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(255.5),
        xmin = cms.double(-0.5)
    ),
    TH1NApvShots = cms.PSet(
        Nbins = cms.int32(201),
        globalswitchon = cms.bool(True),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(200.5),
        xmin = cms.double(-0.5)
    ),
    TH1NStripsApvShots = cms.PSet(
        Nbins = cms.int32(64),
        globalswitchon = cms.bool(False),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(128.5),
        xmin = cms.double(64.5)
    ),
    TH1NumberOfDigis = cms.PSet(
        Nbinx = cms.int32(50),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(999.5),
        xmin = cms.double(-0.5)
    ),
    TH1NumberOfDigisPerStrip = cms.PSet(
        Nbinx = cms.int32(768),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5)
    ),
    TH1StripOccupancy = cms.PSet(
        Nbinx = cms.int32(51),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(1.01),
        xmin = cms.double(-0.01)
    ),
    TH2DigiApvCycle = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(200),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        yfactor = cms.double(0.2),
        ymin = cms.double(0.0)
    ),
    TProfDigiADC = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(0.0)
    ),
    TProfDigiApvCycle = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(200),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfGlobalNShots = cms.PSet(
        globalswitchon = cms.bool(True)
    ),
    TProfNShotsVsTime = cms.PSet(
        Nbins = cms.int32(600),
        globalswitchon = cms.bool(False),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfNumberOfDigi = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(-0.5)
    ),
    TProfTotalNumberOfDigis = cms.PSet(
        Nbins = cms.int32(360),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfTotalNumberOfDigisVsLS = cms.PSet(
        subdetswitchon = cms.bool(False)
    ),
    TkHistoMapMedianChargeApvShots_On = cms.bool(False),
    TkHistoMapNApvShots_On = cms.bool(True),
    TkHistoMapNStripApvShots_On = cms.bool(False),
    TkHistoMap_On = cms.bool(True),
    TopFolderName = cms.string('SiStrip'),
    TotalNumberOfDigisFailure = cms.PSet(
        Nbins = cms.int32(2500),
        ignoreFirstNLumisections = cms.int32(20),
        integrateNLumisections = cms.int32(3),
        subdetswitchon = cms.bool(False)
    ),
    Trending = cms.PSet(
        Nbins = cms.int32(600),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0),
        ymax = cms.double(10000.0),
        ymin = cms.double(0.0)
    ),
    UseDCSFiltering = cms.bool(True)
)


process.SiStripMonitorTrack_ckf = cms.EDAnalyzer("SiStripMonitorTrack",
    AlgoName = cms.string('GenTk'),
    ClusterConditions = cms.PSet(
        On = cms.bool(False),
        maxStoN = cms.double(2000.0),
        maxWidth = cms.double(200.0),
        minStoN = cms.double(0.0),
        minWidth = cms.double(0.0)
    ),
    Cluster_src = cms.InputTag("siStripClusters"),
    HistoFlag_On = cms.bool(False),
    Mod_On = cms.bool(False),
    ModulesToBeExcluded = cms.vuint32(),
    OffHisto_On = cms.bool(True),
    RawDigiLabel = cms.string('VirginRaw'),
    RawDigiProducer = cms.string('simSiStripDigis'),
    RawDigis_On = cms.bool(False),
    TH1ClusterCharge = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(999.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterChargeCorr = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(399.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterChargePerCM = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(False),
        ringView = cms.bool(True),
        xmax = cms.double(9999.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterEstimatorCC = cms.PSet(
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1),
        xmin = cms.double(-0.1)
    ),
    TH1ClusterNoise = cms.PSet(
        Nbinx = cms.int32(20),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterPos = cms.PSet(
        layerView = cms.bool(True),
        ringView = cms.bool(False)
    ),
    TH1ClusterStoN = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNCorr = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(99.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNCorrMod = cms.PSet(
        Nbinx = cms.int32(50),
        xmax = cms.double(199.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterSymmEtaCC = cms.PSet(
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1),
        xmin = cms.double(-0.1)
    ),
    TH1ClusterWidth = cms.PSet(
        Nbinx = cms.int32(20),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(19.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterWidthCC = cms.PSet(
        Nbinx = cms.int32(10),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClustersOff = cms.PSet(
        Nbinx = cms.int32(150),
        xmax = cms.double(1999.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClustersOn = cms.PSet(
        Nbinx = cms.int32(150),
        xmax = cms.double(2999.5),
        xmin = cms.double(-0.5)
    ),
    TProfileClusterPGV = cms.PSet(
        Nbinx = cms.int32(20),
        Nbiny = cms.int32(20),
        xmax = cms.double(10.0),
        xmin = cms.double(-10.0),
        ymax = cms.double(1.2),
        ymin = cms.double(-0.1)
    ),
    TkHistoMap_On = cms.bool(True),
    TopFolderName = cms.string('SiStrip'),
    TrackLabel = cms.string(''),
    TrackProducer = cms.string('ctfWithMaterialTracksP5'),
    TrajectoryInEvent = cms.bool(True),
    Trend_On = cms.bool(False),
    Trending = cms.PSet(
        Nbins = cms.int32(2400),
        xmax = cms.double(150),
        xmin = cms.double(0.0)
    ),
    UseDCSFiltering = cms.bool(True),
    clchCMoriginTkHmap_On = cms.bool(False),
    genericTriggerEventPSet = cms.PSet(

    )
)


process.TrackEffMon_ckf = cms.EDAnalyzer("TrackEfficiencyMonitor",
    AlgoName = cms.string('CKFTk'),
    FolderName = cms.string('Tracking/TrackParameters/TrackEfficiency'),
    OutputFileName = cms.string('MonitorTrackEfficiency.root'),
    OutputMEsInRootFile = cms.bool(False),
    STATrackCollection = cms.InputTag("cosmicMuons"),
    TKTrackCollection = cms.InputTag("ctfWithMaterialTracksP5"),
    deltaXBin = cms.int32(50),
    deltaXMax = cms.double(100),
    deltaXMin = cms.double(-100),
    deltaYBin = cms.int32(50),
    deltaYMax = cms.double(100),
    deltaYMin = cms.double(-100),
    isBFieldOff = cms.bool(False),
    muonCompatibleLayersBin = cms.int32(10),
    muonCompatibleLayersMax = cms.double(30),
    muonCompatibleLayersMin = cms.double(0),
    muonD0Bin = cms.int32(50),
    muonD0Max = cms.double(100),
    muonD0Min = cms.double(-100),
    muonEtaBin = cms.int32(50),
    muonEtaMax = cms.double(3.2),
    muonEtaMin = cms.double(-3.2),
    muonPhiBin = cms.int32(50),
    muonPhiMax = cms.double(0.0),
    muonPhiMin = cms.double(-3.2),
    muonXBin = cms.int32(50),
    muonXMax = cms.double(100),
    muonXMin = cms.double(-100),
    muonYBin = cms.int32(50),
    muonYMax = cms.double(100),
    muonYMin = cms.double(-100),
    muonZBin = cms.int32(50),
    muonZMax = cms.double(500),
    muonZMin = cms.double(-500),
    signDeltaXBin = cms.int32(50),
    signDeltaXMax = cms.double(5),
    signDeltaXMin = cms.double(-5),
    signDeltaYBin = cms.int32(50),
    signDeltaYMax = cms.double(5),
    signDeltaYMin = cms.double(-5),
    theMaxZ = cms.double(110.0),
    theRadius = cms.double(85.0),
    trackCompatibleLayersBin = cms.int32(10),
    trackCompatibleLayersMax = cms.double(30),
    trackCompatibleLayersMin = cms.double(0),
    trackD0Bin = cms.int32(50),
    trackD0Max = cms.double(100),
    trackD0Min = cms.double(-100),
    trackEfficiency = cms.bool(True),
    trackEtaBin = cms.int32(50),
    trackEtaMax = cms.double(3.2),
    trackEtaMin = cms.double(-3.2),
    trackPhiBin = cms.int32(50),
    trackPhiMax = cms.double(0.0),
    trackPhiMin = cms.double(-3.2),
    trackXBin = cms.int32(50),
    trackXMax = cms.double(100),
    trackXMin = cms.double(-100),
    trackYBin = cms.int32(50),
    trackYMax = cms.double(100),
    trackYMin = cms.double(-100),
    trackZBin = cms.int32(50),
    trackZMax = cms.double(500),
    trackZMin = cms.double(-500)
)


process.TrackMon_ckf = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('CKFTk') ),
        ("BSFolderName" , cms.string('Tracking/ParametersVsBeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(500.0) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('Tracking/TrackParameters') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(35) ),
        ("RecLayMax" , cms.double(34.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("combinedP5SeedsForCTF") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("ckfTrackCandidatesP5") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(20) ),
        ("TkSeedSizeMax" , cms.double(19.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(25) ),
        ("TkSizeMax" , cms.double(24.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ctfWithMaterialTracksP5") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(30.0) ),
        ("TrackPtMin" , cms.double(-0.5) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
    ] +
    [
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(True) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.TrackMon_cosmicTk = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AbsDxyBin" , cms.int32(120) ),
        ("AbsDxyMax" , cms.double(60.0) ),
        ("AbsDxyMin" , cms.double(0.0) ),
        ("AlgoName" , cms.string('CosmicTk') ),
        ("BSFolderName" , cms.string('Tracking/ParametersVsBeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(500.0) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('Tracking/TrackParameters') ),
        ("GoodPVtxBin" , cms.int32(200) ),
        ("GoodPVtxMax" , cms.double(200.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LUMIBin" , cms.int32(4000) ),
        ("LUMIMax" , cms.double(20000.0) ),
        ("LUMIMin" , cms.double(0.0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(35) ),
        ("RecLayMax" , cms.double(34.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("combinedP5SeedsForCTF") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("ckfTrackCandidatesP5") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(20) ),
        ("TkSeedSizeMax" , cms.double(19.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(25) ),
        ("TkSizeMax" , cms.double(24.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("cosmictrackfinderP5") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(30.0) ),
        ("TrackPtMin" , cms.double(-0.5) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doEffFromHitPatternVsBX" , cms.bool(False) ),
        ("doEffFromHitPatternVsLUMI" , cms.bool(False) ),
        ("doEffFromHitPatternVsPU" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBX" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPlotsVsLUMI" , cms.bool(False) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitVsPtVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
    ] +
    [
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(True) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doStopSource" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("genericTriggerEventPSet" , cms.PSet(

    ) ),
        ("minNumberOfPixelsPerCluster" , cms.int32(2) ),
        ("minPixelClusterCharge" , cms.double(15000.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("pixelCluster4lumi" , cms.InputTag("siPixelClustersPreSplitting") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pvNDOF" , cms.int32(4) ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("scal" , cms.InputTag("scalersRawToDigi") ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ("useBPixLayer1" , cms.bool(False) ),
        ]
    )
)


process.TrackSplitMonitor = cms.EDAnalyzer("TrackSplittingMonitor",
    FolderName = cms.string('Tracking/TrackParameters/SplitTracks'),
    d0Cut = cms.double(12.0),
    dcurvBin = cms.int32(100),
    dcurvMax = cms.double(0.005),
    dcurvMin = cms.double(-0.005),
    ddxyBin = cms.int32(100),
    ddxyMax = cms.double(200.0),
    ddxyMin = cms.double(-200.0),
    ddzBin = cms.int32(100),
    ddzMax = cms.double(400.0),
    ddzMin = cms.double(-400.0),
    dphiBin = cms.int32(100),
    dphiMax = cms.double(0.01),
    dphiMin = cms.double(-0.01),
    dptBin = cms.int32(100),
    dptMax = cms.double(5.0),
    dptMin = cms.double(-5.0),
    dthetaBin = cms.int32(100),
    dthetaMax = cms.double(0.01),
    dthetaMin = cms.double(-0.01),
    dzCut = cms.double(25.0),
    ifPlotMuons = cms.bool(True),
    norchiCut = cms.double(100.0),
    normBin = cms.int32(100),
    normMax = cms.double(5.0),
    normMin = cms.double(-5.0),
    pixelHitsPerLeg = cms.int32(1),
    ptCut = cms.double(4.0),
    splitMuonCollection = cms.InputTag("splitMuons"),
    splitTrackCollection = cms.InputTag("splittedTracksP5"),
    totalHitsPerLeg = cms.int32(6)
)


process.allAnalyzer = cms.EDAnalyzer("HLTMuonOfflineAnalyzer",
    binParams = cms.untracked.PSet(
        NVertex = cms.untracked.vdouble(20, 1, 50),
        charge = cms.untracked.vdouble(2, -2.0, 2.0),
        d0 = cms.untracked.vdouble(10, -0.5, 0.5),
        deltaR = cms.untracked.vdouble(20, 0.0, 0.05),
        eta = cms.untracked.vdouble(20, -2.4, 2.4),
        etaCoarse = cms.untracked.vdouble(-2.4, -2.1, -1.6, -1.2, -0.8, 
            0.0, 0.8, 1.2, 1.6, 2.1, 
            2.4),
        jpsiMass = cms.untracked.vdouble(60, 0.0, 6.0),
        phi = cms.untracked.vdouble(20, -3.14, 3.14),
        phiCoarse = cms.untracked.vdouble(10, -3.14, 3.14),
        pt = cms.untracked.vdouble(0.0, 2.0, 4.0, 6.0, 8.0, 
            10.0, 20.0, 30.0, 40.0, 100.0, 
            200.0, 400.0),
        ptCoarse = cms.untracked.vdouble(10.0, 20.0, 40.0, 60.0, 80.0, 
            100.0, 200.0),
        resolutionEta = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionPhi = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionRel = cms.untracked.vdouble(40, -0.3, 0.3),
        z0 = cms.untracked.vdouble(10, -15.0, 15.0),
        zMass = cms.untracked.vdouble(50, 65.0, 115.0)
    ),
    destination = cms.untracked.string('HLT/Muon/DistributionsAll'),
    hltPathsToCheck = cms.vstring('HLT_Mu45_eta2p1_v1', 
        'HLT_Mu50_v', 
        'HLT_IsoMu24_v', 
        'HLT_IsoTkMu24_v', 
        'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
        'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v', 
        'HLT_IsoMu20_eta2p1_v', 
        'HLT_IsoTkMu20_eta2p1_v', 
        'HLT_IsoMu24_eta2p1_v', 
        'HLT_IsoTkMu24_eta2p1_v', 
        'HLT_IsoMu27_v', 
        'HLT_IsoTkMu27_v', 
        'HLT_IsoMu20_v', 
        'HLT_IsoTkMu20_v', 
        'HLT_IsoMu22_v', 
        'HLT_IsoTkMu22_v', 
        'HLT_IsoMu22_eta2p1_v', 
        'HLT_IsoTkMu22_eta2p1_v', 
        'HLT_IsoMu18_v', 
        'HLT_IsoTkMu18_v', 
        'HLT_PAL1DoubleMuOpen_v', 
        'HLT_PAL1DoubleMuOpen_OS_v', 
        'HLT_PAL1DoubleMuOpen_SS_v', 
        'HLT_PAL1DoubleMu0_v', 
        'HLT_PAL1DoubleMu0_HighQ_v', 
        'HLT_PAL1DoubleMu0_MGT1_v', 
        'HLT_PAL1DoubleMu10_v', 
        'HLT_PAL2DoubleMu0_v', 
        'HLT_PAL2DoubleMu10_v', 
        'HLT_PAL3DoubleMu0_v', 
        'HLT_PAL3DoubleMu0_HIon_v', 
        'HLT_PAL3DoubleMu10_v', 
        'HLT_PAL2Mu12_v', 
        'HLT_PAL2Mu15_v', 
        'HLT_PAL3Mu3_v', 
        'HLT_PAL3Mu5_v', 
        'HLT_PAL3Mu7_v', 
        'HLT_PAL3Mu12_v', 
        'HLT_PAL3Mu15_v', 
        'HLT_PASingleMuOpen_PixelTrackGt0_FullTrackLt10_v', 
        'HLT_PASingleMuOpen_PixelTrackGt0_FullTrackLt15_v', 
        'HLT_PASingleMuOpen_PixelTrackGt0Lt10_v', 
        'HLT_PASingleMuOpen_PixelTrackGt0Lt15_v', 
        'HLT_PASingleMuOpen_HFOneTowerVeto_SingleTrack_v', 
        'HLT_PASingleMuOpen_HFOneTowerVeto_v', 
        'HLT_PASingleMuOpen_HFTwoTowerVeto_SingleTrack_v', 
        'HLT_PASingleMuOpen_HFTwoTowerVeto_v', 
        'HLT_PADoubleMuOpen_HFOneTowerVeto_SingleTrack_v', 
        'HLT_PADoubleMuOpen_HFOneTowerVeto_v', 
        'HLT_PADoubleMuOpen_HFTwoTowerVeto_SingleTrack_v', 
        'HLT_PADoubleMuOpen_HFTwoTowerVeto_v'),
    hltProcessName = cms.string('HLT'),
    inputTags = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        offlinePVs = cms.InputTag("offlinePrimaryVertices"),
        recoMuon = cms.InputTag("muons"),
        triggerResults = cms.InputTag("TriggerResults"),
        triggerSummary = cms.InputTag("hltTriggerSummaryAOD")
    ),
    plotCuts = cms.PSet(
        L1DeltaR = cms.untracked.double(0.3),
        L2DeltaR = cms.untracked.double(0.3),
        L3DeltaR = cms.untracked.double(0.05),
        maxEta = cms.untracked.double(2.1),
        minPtFactor = cms.untracked.double(1.2)
    ),
    probeParams = cms.PSet(
        d0Cut = cms.untracked.double(1000.0),
        hltCuts = cms.untracked.string('abs(eta) < 2.0'),
        recoCuts = cms.untracked.string('isStandAloneMuon && abs(eta) < 2.0'),
        z0Cut = cms.untracked.double(1000.0)
    ),
    requiredTriggers = cms.untracked.vstring(),
    targetParams = cms.PSet(
        d0Cut = cms.untracked.double(1000.0),
        hltCuts = cms.untracked.string('abs(eta) < 2.0'),
        recoCuts = cms.untracked.string('isStandAloneMuon && abs(eta) < 2.0'),
        z0Cut = cms.untracked.double(1000.0)
    )
)


process.barrelAnalyzer = cms.EDAnalyzer("HLTMuonOfflineAnalyzer",
    binParams = cms.untracked.PSet(
        NVertex = cms.untracked.vdouble(20, 1, 50),
        charge = cms.untracked.vdouble(2, -2.0, 2.0),
        d0 = cms.untracked.vdouble(10, -0.5, 0.5),
        deltaR = cms.untracked.vdouble(20, 0.0, 0.05),
        eta = cms.untracked.vdouble(20, -2.4, 2.4),
        etaCoarse = cms.untracked.vdouble(-2.4, -2.1, -1.6, -1.2, -0.8, 
            0.0, 0.8, 1.2, 1.6, 2.1, 
            2.4),
        jpsiMass = cms.untracked.vdouble(60, 0.0, 6.0),
        phi = cms.untracked.vdouble(20, -3.14, 3.14),
        phiCoarse = cms.untracked.vdouble(10, -3.14, 3.14),
        pt = cms.untracked.vdouble(0.0, 2.0, 4.0, 6.0, 8.0, 
            10.0, 20.0, 30.0, 40.0, 100.0, 
            200.0, 400.0),
        ptCoarse = cms.untracked.vdouble(10.0, 20.0, 40.0, 60.0, 80.0, 
            100.0, 200.0),
        resolutionEta = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionPhi = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionRel = cms.untracked.vdouble(40, -0.3, 0.3),
        z0 = cms.untracked.vdouble(10, -15.0, 15.0),
        zMass = cms.untracked.vdouble(50, 65.0, 115.0)
    ),
    destination = cms.untracked.string('HLT/Muon/DistributionsBarrel'),
    hltPathsToCheck = cms.vstring('HLT_Mu45_eta2p1_v1', 
        'HLT_Mu50_v', 
        'HLT_IsoMu24_v', 
        'HLT_IsoTkMu24_v', 
        'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
        'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v', 
        'HLT_IsoMu20_eta2p1_v', 
        'HLT_IsoTkMu20_eta2p1_v', 
        'HLT_IsoMu24_eta2p1_v', 
        'HLT_IsoTkMu24_eta2p1_v', 
        'HLT_IsoMu27_v', 
        'HLT_IsoTkMu27_v', 
        'HLT_IsoMu20_v', 
        'HLT_IsoTkMu20_v', 
        'HLT_IsoMu22_v', 
        'HLT_IsoTkMu22_v', 
        'HLT_IsoMu22_eta2p1_v', 
        'HLT_IsoTkMu22_eta2p1_v', 
        'HLT_IsoMu18_v', 
        'HLT_IsoTkMu18_v', 
        'HLT_PAL1DoubleMuOpen_v', 
        'HLT_PAL1DoubleMuOpen_OS_v', 
        'HLT_PAL1DoubleMuOpen_SS_v', 
        'HLT_PAL1DoubleMu0_v', 
        'HLT_PAL1DoubleMu0_HighQ_v', 
        'HLT_PAL1DoubleMu0_MGT1_v', 
        'HLT_PAL1DoubleMu10_v', 
        'HLT_PAL2DoubleMu0_v', 
        'HLT_PAL2DoubleMu10_v', 
        'HLT_PAL3DoubleMu0_v', 
        'HLT_PAL3DoubleMu0_HIon_v', 
        'HLT_PAL3DoubleMu10_v', 
        'HLT_PAL2Mu12_v', 
        'HLT_PAL2Mu15_v', 
        'HLT_PAL3Mu3_v', 
        'HLT_PAL3Mu5_v', 
        'HLT_PAL3Mu7_v', 
        'HLT_PAL3Mu12_v', 
        'HLT_PAL3Mu15_v', 
        'HLT_PASingleMuOpen_PixelTrackGt0_FullTrackLt10_v', 
        'HLT_PASingleMuOpen_PixelTrackGt0_FullTrackLt15_v', 
        'HLT_PASingleMuOpen_PixelTrackGt0Lt10_v', 
        'HLT_PASingleMuOpen_PixelTrackGt0Lt15_v', 
        'HLT_PASingleMuOpen_HFOneTowerVeto_SingleTrack_v', 
        'HLT_PASingleMuOpen_HFOneTowerVeto_v', 
        'HLT_PASingleMuOpen_HFTwoTowerVeto_SingleTrack_v', 
        'HLT_PASingleMuOpen_HFTwoTowerVeto_v', 
        'HLT_PADoubleMuOpen_HFOneTowerVeto_SingleTrack_v', 
        'HLT_PADoubleMuOpen_HFOneTowerVeto_v', 
        'HLT_PADoubleMuOpen_HFTwoTowerVeto_SingleTrack_v', 
        'HLT_PADoubleMuOpen_HFTwoTowerVeto_v'),
    hltProcessName = cms.string('HLT'),
    inputTags = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        offlinePVs = cms.InputTag("offlinePrimaryVertices"),
        recoMuon = cms.InputTag("muons"),
        triggerResults = cms.InputTag("TriggerResults"),
        triggerSummary = cms.InputTag("hltTriggerSummaryAOD")
    ),
    plotCuts = cms.PSet(
        L1DeltaR = cms.untracked.double(0.3),
        L2DeltaR = cms.untracked.double(0.3),
        L3DeltaR = cms.untracked.double(0.05),
        maxEta = cms.untracked.double(2.1),
        minPtFactor = cms.untracked.double(1.2)
    ),
    probeParams = cms.PSet(

    ),
    requiredTriggers = cms.untracked.vstring(),
    targetParams = cms.PSet(
        d0Cut = cms.untracked.double(1000.0),
        hltCuts = cms.untracked.string('abs(eta) < 0.9'),
        recoCuts = cms.untracked.string('isStandAloneMuon && abs(eta) < 0.9'),
        z0Cut = cms.untracked.double(1000.0)
    )
)


process.bphysicsOniaDQM = cms.EDAnalyzer("BPhysicsOniaDQM",
    MuonCollection = cms.InputTag("muons"),
    lumiSummary = cms.InputTag("lumiProducer"),
    vertex = cms.InputTag("offlinePrimaryVertices")
)


process.caloMetDQMAnalyzer = cms.EDAnalyzer("METAnalyzer",
    CSCHalo2015ResultLabel = cms.InputTag("CSCTightHalo2015FilterDQM"),
    CSCHaloResultLabel = cms.InputTag("CSCTightHaloFilterDQM"),
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(True),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQM")
    ),
    DCSFilter = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf'),
        Filter = cms.untracked.bool(True)
    ),
    EcalDeadCellBoundaryEnergyFilterLabel = cms.InputTag("EcalDeadCellBoundaryEnergyFilterDQM"),
    EcalDeadCellTriggerPrimitiveFilterLabel = cms.InputTag("EcalDeadCellTriggerPrimitiveFilterDQM"),
    FilterResultsLabelMiniAOD = cms.InputTag("TriggerResults","","RECO"),
    FilterResultsLabelMiniAOD2 = cms.InputTag("TriggerResults","","reRECO"),
    FolderName = cms.untracked.string('JetMET/MET/'),
    HBHEIsoNoiseLabelMiniAOD = cms.string('Flag_HBHEIsoNoiseFilter'),
    HBHENoiseFilterResultLabel = cms.InputTag("HBHENoiseFilterResultProducer","HBHENoiseFilterResult"),
    HBHENoiseIsoFilterResultLabel = cms.InputTag("HBHENoiseFilterResultProducer","HBHEIsoNoiseFilterResult"),
    HBHENoiseLabelMiniAOD = cms.string('Flag_HBHENoiseFilter'),
    HcalNoiseRBXCollection = cms.InputTag("hcalnoise"),
    HcalStripHaloFilterLabel = cms.InputTag("HcalStripHaloFilterDQM"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    JetCollectionLabel = cms.InputTag("ak4CaloJets"),
    JetCorrections = cms.InputTag(""),
    LSBegin = cms.int32(0),
    LSEnd = cms.int32(-1),
    METCollectionLabel = cms.InputTag("caloMet"),
    METDiagonisticsParameters = cms.VPSet(cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(-2.7),
        etaNBins = cms.int32(100),
        nMax = cms.int32(2000),
        nMin = cms.int32(0),
        name = cms.string('h'),
        nbins = cms.double(100),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(100),
        type = cms.int32(1)
    ), 
        cms.PSet(
            etaMax = cms.double(1.392),
            etaMin = cms.double(-1.392),
            etaNBins = cms.int32(32),
            nMax = cms.int32(100),
            nMin = cms.int32(0),
            name = cms.string('h0Barrel'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(72),
            type = cms.int32(5)
        ), 
        cms.PSet(
            etaMax = cms.double(-1.392),
            etaMin = cms.double(-3.0),
            etaNBins = cms.int32(12),
            nMax = cms.int32(150),
            nMin = cms.int32(0),
            name = cms.string('h0Endcap'),
            nbins = cms.double(75),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(5)
        ), 
        cms.PSet(
            etaMax = cms.double(1.479),
            etaMin = cms.double(-1.479),
            etaNBins = cms.int32(75),
            nMax = cms.int32(600),
            nMin = cms.int32(0),
            name = cms.string('gammaBarrel'),
            nbins = cms.double(100),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(120),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(-1.479),
            etaMin = cms.double(-3.0),
            etaNBins = cms.int32(20),
            nMax = cms.int32(300),
            nMin = cms.int32(0),
            name = cms.string('gammaEndcap'),
            nbins = cms.double(100),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(30),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(-3.0),
            etaMin = cms.double(-5.0),
            etaNBins = cms.int32(20),
            nMax = cms.int32(15),
            nMin = cms.int32(0),
            name = cms.string('gammaForward'),
            nbins = cms.double(15),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(30),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(2.7),
            etaMin = cms.double(-2.7),
            etaNBins = cms.int32(27),
            nMax = cms.int32(30),
            nMin = cms.int32(0),
            name = cms.string('e'),
            nbins = cms.double(30),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(40),
            type = cms.int32(2)
        ), 
        cms.PSet(
            etaMax = cms.double(2.7),
            etaMin = cms.double(-2.7),
            etaNBins = cms.int32(27),
            nMax = cms.int32(30),
            nMin = cms.int32(0),
            name = cms.string('mu'),
            nbins = cms.double(30),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(40),
            type = cms.int32(3)
        ), 
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            etaNBins = cms.int32(11),
            nMax = cms.int32(1000),
            nMin = cms.int32(0),
            name = cms.string('hHF'),
            nbins = cms.double(100),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(6)
        ), 
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            etaNBins = cms.int32(11),
            nMax = cms.int32(500),
            nMin = cms.int32(0),
            name = cms.string('egammaHF'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(7)
        )),
    METType = cms.untracked.string('calo'),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    eeBadScFilterLabel = cms.InputTag("eeBadScFilterDQM"),
    fillCandidateMaps = cms.bool(False),
    fillMetHighLevel = cms.bool(True),
    hcalMin = cms.double(1.0),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    muonsrc = cms.InputTag("muons"),
    onlyCleaned = cms.untracked.bool(False),
    pVBin = cms.int32(100),
    pVMax = cms.double(100.0),
    pVMin = cms.double(0.0),
    ptMinCand = cms.double(1.0),
    ptThreshold = cms.double(30),
    runcosmics = cms.untracked.bool(True),
    srcPFlow = cms.InputTag("particleFlow"),
    triggerSelectedSubFolders = cms.VPSet(cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_PFJet450_v*'),
        label = cms.string('highPtJet')
    ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(True),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_PFJet80_v*'),
            label = cms.string('lowPtJet')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_ZeroBias_v*'),
            label = cms.string('zeroBias')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_MET250_v*'),
            label = cms.string('highMET')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_IsoMu24_eta2p1_v*', 
                'HLT_IsoMu27_v*'),
            label = cms.string('singleMu')
        )),
    verbose = cms.int32(0)
)


process.castorOfflineMonitor = cms.EDAnalyzer("CastorMonitorModule",
    CastorBasicJetsLabel = cms.InputTag("ak7CastorJets"),
    CastorJetIDLabel = cms.InputTag("ak7CastorJetID"),
    CastorRecHitLabel = cms.InputTag("castorreco"),
    CastorTowerLabel = cms.InputTag("CastorTowerReco"),
    ChannelQualityMonitor = cms.untracked.bool(True),
    DataIntMonitor = cms.untracked.bool(True),
    DigiInFC = cms.untracked.bool(False),
    DigiMonitor = cms.untracked.bool(True),
    DigiPerChannel = cms.untracked.bool(True),
    EDMonitor = cms.untracked.bool(False),
    FirstSignalBin = cms.untracked.int32(0),
    HIMonitor = cms.untracked.bool(True),
    LEDMonitor = cms.untracked.bool(True),
    LEDPerChannel = cms.untracked.bool(True),
    LED_ADC_Thresh = cms.untracked.double(-1000.0),
    LastSignalBin = cms.untracked.int32(9),
    OfflineMode = cms.untracked.bool(False),
    PSMonitor = cms.untracked.bool(True),
    RecHitMonitor = cms.untracked.bool(True),
    RecHitsPerChannel = cms.untracked.bool(True),
    TowerJetMonitor = cms.untracked.bool(True),
    averageEnergyMethod = cms.untracked.bool(True),
    dThreshold = cms.untracked.double(1.0),
    debug = cms.untracked.int32(0),
    diagnosticPrescaleLS = cms.untracked.int32(-1),
    diagnosticPrescaleTime = cms.untracked.int32(-1),
    diagnosticPrescaleUpdate = cms.untracked.int32(-1),
    digiLabel = cms.InputTag("castorDigis"),
    dump2database = cms.untracked.bool(False),
    nThreshold = cms.untracked.double(60),
    numberSigma = cms.untracked.double(1.5),
    pedestalsInFC = cms.untracked.bool(False),
    rawLabel = cms.InputTag("rawDataCollector"),
    showTiming = cms.untracked.bool(False),
    thirdRegionThreshold = cms.untracked.double(100),
    unpackerReportLabel = cms.InputTag("castorDigis")
)


process.cosmicPhotonAnalysis = cms.EDAnalyzer("PhotonAnalyzer",
    ComponentName = cms.string('cosmicPhotonAnalysis'),
    OutputFileName = cms.string('DQMOfflinePhotonsAfterFirstStep.root'),
    OutputMEsInRootFile = cms.bool(False),
    Verbosity = cms.untracked.int32(0),
    analyzerName = cms.string('stdPhotonAnalyzer'),
    barrelRecHitCollection = cms.InputTag("EcalRecHitsEB"),
    barrelRecHitProducer = cms.InputTag("ecalRecHit"),
    chi2Bin = cms.int32(100),
    chi2Max = cms.double(20.0),
    chi2Min = cms.double(0.0),
    cutStep = cms.double(20.0),
    dEtaTracksBin = cms.int32(100),
    dEtaTracksMax = cms.double(0.2),
    dEtaTracksMin = cms.double(-0.2),
    dPhiTracksBin = cms.int32(100),
    dPhiTracksMax = cms.double(0.5),
    dPhiTracksMin = cms.double(-0.5),
    eBin = cms.int32(500),
    eMax = cms.double(3.0),
    eMin = cms.double(0.0),
    eOverPBin = cms.int32(100),
    eOverPMax = cms.double(5.0),
    eOverPMin = cms.double(0.0),
    endcapRecHitCollection = cms.InputTag("EcalRecHitsEE"),
    endcapRecHitProducer = cms.InputTag("ecalRecHit"),
    etBin = cms.int32(500),
    etMax = cms.double(3.0),
    etMin = cms.double(0.0),
    etaBin = cms.int32(200),
    etaMax = cms.double(2.5),
    etaMin = cms.double(-2.5),
    excludeBkgHistos = cms.bool(True),
    hOverEBin = cms.int32(200),
    hOverEMax = cms.double(0.5),
    hOverEMin = cms.double(0),
    invMassEtCut = cms.double(20.0),
    isHeavyIon = cms.untracked.bool(False),
    isolationStrength = cms.int32(0),
    maxPhoEta = cms.double(2.5),
    minPhoEtCut = cms.double(0.0),
    minimalSetOfHistos = cms.bool(True),
    numberBin = cms.int32(10),
    numberMax = cms.double(10),
    numberMin = cms.double(0),
    numberOfSteps = cms.int32(1),
    phiBin = cms.int32(200),
    phiMax = cms.double(3.14),
    phiMin = cms.double(-3.14),
    phoProducer = cms.InputTag("photons"),
    photonIDLoose = cms.InputTag("PhotonIDProd","PhotonCutBasedIDLoose"),
    photonIDTight = cms.InputTag("PhotonIDProd","PhotonCutBasedIDTight"),
    prescaleFactor = cms.untracked.int32(1),
    r9Bin = cms.int32(120),
    r9Max = cms.double(1.5),
    r9Min = cms.double(0.0),
    rBin = cms.int32(400),
    rMax = cms.double(80),
    rMin = cms.double(0),
    sigmaIetaBin = cms.int32(200),
    sigmaIetaMax = cms.double(0.05),
    sigmaIetaMin = cms.double(0.0),
    standAlone = cms.bool(False),
    sumBin = cms.int32(230),
    sumMax = cms.double(20.0),
    sumMin = cms.double(-3.0),
    triggerEvent = cms.InputTag("hltTriggerSummaryAOD"),
    useBinning = cms.bool(False),
    useTriggerFiltering = cms.bool(False),
    xBin = cms.int32(300),
    xMax = cms.double(60),
    xMin = cms.double(-60),
    yBin = cms.int32(300),
    yMax = cms.double(60),
    yMin = cms.double(-60),
    zBin = cms.int32(400),
    zMax = cms.double(200),
    zMin = cms.double(-200)
)


process.cosmicsSeedingLogMessageMon = cms.EDAnalyzer("LogMessageMonitor",
    BXlumiSetup = cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ),
    LogFolderName = cms.string('Tracking/MessageLog'),
    OutputFileName = cms.string('MonitorTrack.root'),
    OutputMEsInRootFile = cms.bool(False),
    categories = cms.vstring('TooManyClusters'),
    doPUmonitoring = cms.bool(False),
    doWarningsPlots = cms.bool(False),
    genericTriggerEventPSet = cms.PSet(
        andOr = cms.bool(False),
        andOrDcs = cms.bool(False),
        dcsInputTag = cms.InputTag("scalersRawToDigi"),
        dcsPartitions = cms.vint32(24, 25, 26, 27, 28, 
            29),
        errorReplyDcs = cms.bool(True)
    ),
    modules = cms.vstring('cosmicseedfinderP5', 
        'combinatorialcosmicseedfinderP5', 
        'regionalCosmicTrackerSeeds', 
        'CtfSpecialSeedGenerator'),
    pluginsMonName = cms.string('Seeding')
)


process.cosmicsTrackCandidateLogMessageMon = cms.EDAnalyzer("LogMessageMonitor",
    BXlumiSetup = cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ),
    LogFolderName = cms.string('Tracking/MessageLog'),
    OutputFileName = cms.string('MonitorTrack.root'),
    OutputMEsInRootFile = cms.bool(False),
    categories = cms.vstring('CkfPattern', 
        'BaseCkfTrajectoryBuilder_InfiniteLoop', 
        'TooManySeeds'),
    doPUmonitoring = cms.bool(False),
    doWarningsPlots = cms.bool(False),
    genericTriggerEventPSet = cms.PSet(
        andOr = cms.bool(False),
        andOrDcs = cms.bool(False),
        dcsInputTag = cms.InputTag("scalersRawToDigi"),
        dcsPartitions = cms.vint32(24, 25, 26, 27, 28, 
            29),
        errorReplyDcs = cms.bool(True)
    ),
    modules = cms.vstring('ckfTrackCandidatesP5', 
        'regionalCosmicCkfTrackCandidates'),
    pluginsMonName = cms.string('TrackCandidate')
)


process.cosmicsTrackLogMessageMon = cms.EDAnalyzer("LogMessageMonitor",
    BXlumiSetup = cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ),
    LogFolderName = cms.string('Tracking/MessageLog'),
    OutputFileName = cms.string('MonitorTrack.root'),
    OutputMEsInRootFile = cms.bool(False),
    categories = cms.vstring('FailedPropagation', 
        'RKPropagatorInS'),
    doPUmonitoring = cms.bool(False),
    doWarningsPlots = cms.bool(False),
    genericTriggerEventPSet = cms.PSet(
        andOr = cms.bool(False),
        andOrDcs = cms.bool(False),
        dcsInputTag = cms.InputTag("scalersRawToDigi"),
        dcsPartitions = cms.vint32(24, 25, 26, 27, 28, 
            29),
        errorReplyDcs = cms.bool(True)
    ),
    modules = cms.vstring('ctfWithMaterialTracksCosmics', 
        'regionalCosmicTracks'),
    pluginsMonName = cms.string('TrackFinder')
)


process.cscMonitor = cms.EDAnalyzer("CSCOfflineMonitor",
    FEDRawDataCollectionTag = cms.InputTag("rawDataCollector"),
    alctDigiTag = cms.InputTag("muonCSCDigis","MuonCSCALCTDigi"),
    clctDigiTag = cms.InputTag("muonCSCDigis","MuonCSCCLCTDigi"),
    cscRecHitTag = cms.InputTag("csc2DRecHits"),
    cscSegTag = cms.InputTag("cscSegments"),
    outputFileName = cms.string('test.root'),
    saveHistos = cms.bool(False),
    stripDigiTag = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
    wireDigiTag = cms.InputTag("muonCSCDigis","MuonCSCWireDigi")
)


process.digiTask = cms.EDAnalyzer("DigiTask",
    cutSumQ_HBHE = cms.untracked.double(20),
    cutSumQ_HF = cms.untracked.double(20),
    cutSumQ_HO = cms.untracked.double(20),
    debug = cms.untracked.int32(0),
    mtype = cms.untracked.bool(True),
    name = cms.untracked.string('DigiTask'),
    ptype = cms.untracked.int32(1),
    runkeyName = cms.untracked.string('cosmic_run'),
    runkeyVal = cms.untracked.int32(2),
    subsystem = cms.untracked.string('Hcal'),
    tagHBHE = cms.untracked.InputTag("hcalDigis"),
    tagHF = cms.untracked.InputTag("hcalDigis"),
    tagHO = cms.untracked.InputTag("hcalDigis"),
    thresh_unifh = cms.untracked.double(0.2)
)


process.dqmCSCClient = cms.EDAnalyzer("CSCMonitorModule",
    BOOKING_XML_FILE = cms.FileInPath('DQM/CSCMonitorModule/data/emuDQMBooking.xml'),
    EventProcessor = cms.untracked.PSet(
        BINCHECKER_CRC_ALCT = cms.untracked.bool(True),
        BINCHECKER_CRC_CFEB = cms.untracked.bool(True),
        BINCHECKER_CRC_CLCT = cms.untracked.bool(True),
        BINCHECKER_MODE_DDU = cms.untracked.bool(False),
        BINCHECKER_OUTPUT = cms.untracked.bool(False),
        BINCHECK_MASK = cms.untracked.uint32(384563190),
        DDU_BINCHECK_MASK = cms.untracked.uint32(384563190),
        DDU_CHECK_MASK = cms.untracked.uint32(4294959103),
        EFF_COLD_SIGFAIL = cms.untracked.double(2.0),
        EFF_COLD_THRESHOLD = cms.untracked.double(0.1),
        EFF_ERR_SIGFAIL = cms.untracked.double(5.0),
        EFF_ERR_THRESHOLD = cms.untracked.double(0.1),
        EFF_HOT_SIGFAIL = cms.untracked.double(5.0),
        EFF_HOT_THRESHOLD = cms.untracked.double(2.0),
        EFF_NODATA_SIGFAIL = cms.untracked.double(5.0),
        EFF_NODATA_THRESHOLD = cms.untracked.double(0.99),
        EVENTS_ECHO = cms.untracked.uint32(1000),
        FOLDER_CSC = cms.untracked.string('CSC/CSC/'),
        FOLDER_DDU = cms.untracked.string('CSC/DDU/'),
        FOLDER_EMU = cms.untracked.string('CSC/Summary/'),
        FOLDER_FED = cms.untracked.string('CSC/FED/'),
        FOLDER_PAR = cms.untracked.string('CSC/EventInfo/reportSummaryContents/'),
        FRAEFF_AUTO_UPDATE = cms.untracked.bool(False),
        FRAEFF_AUTO_UPDATE_FREQ = cms.untracked.uint32(200),
        FRAEFF_AUTO_UPDATE_START = cms.untracked.uint32(5),
        FRAEFF_SEPARATE_THREAD = cms.untracked.bool(False),
        MO_FILTER = cms.untracked.vstring('+/^.*$/', 
            '-/All_Readout_Errors/', 
            '-/^DMB_.*$/', 
            '-/DDU_[0-9]+/', 
            '-/CSC_[0-9]+_[0-9]+/'),
        PROCESS_CSC = cms.untracked.bool(True),
        PROCESS_DDU = cms.untracked.bool(True),
        PROCESS_EFF_HISTOS = cms.untracked.bool(False),
        PROCESS_EFF_PARAMETERS = cms.untracked.bool(False)
    ),
    InputObjects = cms.untracked.InputTag("rawDataCollector"),
    PREBOOK_EFF_PARAMS = cms.untracked.bool(False)
)


process.dqmDcsInfo = cms.EDAnalyzer("DQMDcsInfo",
    dcsInfoFolder = cms.untracked.string('DcsInfo'),
    subSystemFolder = cms.untracked.string('Info')
)


process.dqmEnvHLT = cms.EDAnalyzer("DQMEventInfo",
    eventInfoFolder = cms.untracked.string('EventInfo'),
    eventRateWindow = cms.untracked.double(0.5),
    subSystemFolder = cms.untracked.string('HLT')
)


process.dqmInfo = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('Pixel')
)


process.dqmInfoDT = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('DT')
)


process.dqmInfoEcal = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('Ecal')
)


process.dqmInfoMuons = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('Muons')
)


process.dqmInfoSiStrip = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('SiStrip')
)


process.dqmInfoTracking = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('Tracking')
)


process.dtAlcaResolutionMonitorCosmics = cms.EDAnalyzer("DTResolutionAnalysisTask",
    ResetCycle = cms.untracked.int32(10000),
    phiHitsCut = cms.untracked.uint32(6),
    recHits4DLabel = cms.string('dt4DSegments'),
    topHistoFolder = cms.untracked.string('AlCaReco/DtCalibSynchCosmics/01-Calibration'),
    zHitsCut = cms.untracked.uint32(3)
)


process.dtDCSByLumiMonitor = cms.EDAnalyzer("DTDCSByLumiTask")


process.dtEfficiencyMonitor = cms.EDAnalyzer("DTChamberEfficiency",
    NavigationType = cms.string('Direct'),
    RPCLayers = cms.bool(False),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackCollection = cms.InputTag("cosmicMuons"),
    cscSegments = cms.InputTag("dummy"),
    debug = cms.untracked.bool(True),
    dt4DSegments = cms.InputTag("dt4DSegments"),
    theMaxChi2 = cms.double(100.0),
    theMinNrec = cms.double(20.0),
    theNSigma = cms.double(3.0),
    theRPCRecHits = cms.InputTag("dummy")
)


process.dtPreCalibrationTaskAlcaCosmics = cms.EDAnalyzer("DTPreCalibrationTask",
    SaveFile = cms.untracked.bool(False),
    digiLabel = cms.untracked.string('muonDTDigis'),
    folderName = cms.untracked.string('AlCaReco/DtCalibSynchCosmics/01-Calibration'),
    maxTriggerWidth = cms.untracked.int32(1600),
    minTriggerWidth = cms.untracked.int32(0),
    outputFileName = cms.untracked.string('DigiHistos.root')
)


process.dtResolutionAnalysisMonitor = cms.EDAnalyzer("DTResolutionAnalysisTask",
    ResetCycle = cms.untracked.int32(10000),
    phiHitsCut = cms.untracked.uint32(6),
    recHits4DLabel = cms.string('dt4DSegments'),
    topHistoFolder = cms.untracked.string('DT/02-Segments'),
    zHitsCut = cms.untracked.uint32(3)
)


process.dtRunConditionVar = cms.EDAnalyzer("DTRunConditionVar",
    debug = cms.untracked.bool(False),
    maxAnglePhiSegm = cms.untracked.double(30.0),
    nMinHitsPhi = cms.untracked.int32(5),
    recoSegments = cms.InputTag("dt4DSegments")
)


process.dtSegmentAnalysisMonitor = cms.EDAnalyzer("DTSegmentAnalysisTask",
    checkNoisyChannels = cms.untracked.bool(True),
    debug = cms.untracked.bool(False),
    detailedAnalysis = cms.untracked.bool(True),
    hltDQMMode = cms.untracked.bool(False),
    nLSTimeBin = cms.untracked.int32(5),
    nTimeBins = cms.untracked.int32(100),
    nhitsCut = cms.untracked.int32(11),
    phiSegmCut = cms.untracked.double(30.0),
    recHits4DLabel = cms.string('dt4DSegments'),
    slideTimeBins = cms.untracked.bool(False),
    topHistoFolder = cms.untracked.string('DT/02-Segments')
)


process.dtSegmentsMonitor = cms.EDAnalyzer("DTSegmentsTask",
    checkNoisyChannels = cms.untracked.bool(False),
    debug = cms.untracked.bool(False),
    recHits4DLabel = cms.string('dt4DSegments')
)


process.dtTriggerEfficiencyMonitor = cms.EDAnalyzer("DTTriggerEfficiencyTask",
    SegmArbitration = cms.untracked.string('SegmentAndTrackArbitration'),
    checkRPCtriggers = cms.untracked.bool(False),
    detailedAnalysis = cms.untracked.bool(False),
    inputTagDDU = cms.untracked.InputTag("muonDTDigis"),
    inputTagGMT = cms.untracked.InputTag("gtDigis"),
    inputTagMuons = cms.untracked.InputTag("muons"),
    inputTagSEG = cms.untracked.InputTag("dt4DSegments"),
    inputTagTM = cms.untracked.InputTag("dttfDigis"),
    maxBXDDU = cms.untracked.int32(15),
    minBXDDU = cms.untracked.int32(7),
    nMinHitsPhi = cms.untracked.int32(5),
    phiAccRange = cms.untracked.double(30.0),
    processDDU = cms.untracked.bool(False),
    processTM = cms.untracked.bool(True)
)


process.ecalFEDMonitor = cms.EDAnalyzer("EcalFEDMonitor",
    EBDetIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EBDetIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EBDetIdCollection3 = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    EEDetIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EEDetIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EEDetIdCollection3 = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    EcalElectronicsIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
    EcalElectronicsIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
    FEDRawDataCollection = cms.InputTag("rawDataCollector"),
    folderName = cms.untracked.string('FEDIntegrity')
)


process.ecalMonitorTask = cms.EDAnalyzer("EcalDQMonitorTask",
    allowMissingCollections = cms.untracked.bool(True),
    collectionTags = cms.untracked.PSet(
        BlockSizeErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
        EBBasicCluster = cms.untracked.InputTag("cosmicBasicClusters","CosmicBarrelBasicClusters"),
        EBChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
        EBDigi = cms.untracked.InputTag("ecalDigis","ebDigis"),
        EBGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainErrors"),
        EBGainSwitchErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
        EBLaserLedUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
        EBRecHit = cms.untracked.InputTag("ecalRecHit","EcalRecHitsEB"),
        EBReducedRecHit = cms.untracked.InputTag("reducedEcalRecHitsEB"),
        EBSrFlag = cms.untracked.InputTag("ecalDigis"),
        EBSuperCluster = cms.untracked.InputTag("cosmicSuperClusters","CosmicBarrelSuperClusters"),
        EBTestPulseUncalibRecHit = cms.untracked.InputTag("ecalTestPulseUncalibRecHit","EcalUncalibRecHitsEB"),
        EBUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
        EEBasicCluster = cms.untracked.InputTag("cosmicBasicClusters","CosmicEndcapBasicClusters"),
        EEChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
        EEDigi = cms.untracked.InputTag("ecalDigis","eeDigis"),
        EEGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainErrors"),
        EEGainSwitchErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
        EELaserLedUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
        EERecHit = cms.untracked.InputTag("ecalRecHit","EcalRecHitsEE"),
        EEReducedRecHit = cms.untracked.InputTag("reducedEcalRecHitsEE"),
        EESrFlag = cms.untracked.InputTag("ecalDigis"),
        EESuperCluster = cms.untracked.InputTag("cosmicSuperClusters","CosmicEndcapSuperClusters"),
        EETestPulseUncalibRecHit = cms.untracked.InputTag("ecalTestPulseUncalibRecHit","EcalUncalibRecHitsEE"),
        EEUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
        EcalRawData = cms.untracked.InputTag("ecalDigis"),
        MEMBlockSizeErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemBlockSizeErrors"),
        MEMChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemChIdErrors"),
        MEMGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemGainErrors"),
        MEMTowerIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemTtIdErrors"),
        PnDiodeDigi = cms.untracked.InputTag("ecalDigis"),
        Source = cms.untracked.InputTag("rawDataCollector"),
        TowerIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
        TrigPrimDigi = cms.untracked.InputTag("ecalDigis","EcalTriggerPrimitives"),
        TrigPrimEmulDigi = cms.untracked.InputTag("valEcalTriggerPrimitiveDigis")
    ),
    commonParameters = cms.untracked.PSet(
        onlineMode = cms.untracked.bool(False),
        willConvertToEDM = cms.untracked.bool(True)
    ),
    moduleName = cms.untracked.string('Ecal Monitor Source'),
    resetInterval = cms.untracked.double(2.0),
    verbosity = cms.untracked.int32(0),
    workerParameters = cms.untracked.PSet(
        ClusterTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                BCE = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Basic cluster energy distribution.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(150.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                BCEMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('2D distribution of the mean energy of the basic clusters.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy map%(suffix)s'),
                    zaxis = cms.untracked.PSet(
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                BCEMapProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the mean energy of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy projection eta%(suffix)s'),
                    yaxis = cms.untracked.PSet(
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                BCEMapProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the mean energy of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy projection phi%(suffix)s'),
                    yaxis = cms.untracked.PSet(
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                BCEtMapProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the mean Et of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC ET projection eta%(suffix)s'),
                    yaxis = cms.untracked.PSet(
                        title = cms.untracked.string('transverse energy (GeV)')
                    )
                ),
                BCEtMapProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the mean Et of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC ET projection phi%(suffix)s'),
                    yaxis = cms.untracked.PSet(
                        title = cms.untracked.string('transverse energy (GeV)')
                    )
                ),
                BCNum = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the number of basic clusters per event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(20)
                    )
                ),
                BCOccupancy = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Basic cluster occupancy.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number map%(suffix)s')
                ),
                BCOccupancyProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the basic cluster occupancy.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number projection eta%(suffix)s')
                ),
                BCOccupancyProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the basic cluster occupancy.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number projection phi%(suffix)s')
                ),
                BCSize = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the basic cluster size (number of crystals).'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50)
                    )
                ),
                BCSizeMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('2D distribution of the mean size (number of crystals) of the basic clusters.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size map%(suffix)s')
                ),
                BCSizeMapProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the mean size (number of crystals) of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size projection eta%(suffix)s')
                ),
                BCSizeMapProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the mean size (number of crystals) of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size projection phi%(suffix)s')
                ),
                ExclusiveTriggers = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Counter for the trigger categories'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('None'),
                    path = cms.untracked.string('EcalBarrel/EBClusterTaskExtras/EBCLTE exclusive triggers'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(5.0),
                        labels = cms.untracked.vstring('ECAL', 
                            'HCAL', 
                            'CSC', 
                            'DT', 
                            'RPC'),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(5),
                        title = cms.untracked.string('triggers')
                    )
                ),
                SCClusterVsSeed = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Relation between super cluster energy and its seed crystal energy.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy vs seed crystal energy'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(150.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('energy (GeV)')
                    ),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(150.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                SCE = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Super cluster energy distribution.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(150.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                SCELow = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Energy distribution of the super clusters (low scale).'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy (low scale)'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(10.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                SCNBCs = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the super cluster size (number of basic clusters)'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC size'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(15.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(15)
                    )
                ),
                SCNcrystals = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the super cluster size (number of crystals).'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC size (crystal)'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(150.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50)
                    )
                ),
                SCNum = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the number of super clusters per event in EB/EE.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC number'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(20.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(20)
                    )
                ),
                SCOccupancyProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Supercluster eta.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/superClusters_%(subdetshortsig)s_eta')
                ),
                SCOccupancyProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Supercluster phi.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/superClusters_%(subdetshortsig)s_phi')
                ),
                SCR9 = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of E_seed / E_3x3 of the super clusters.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC R9'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(1.2),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50)
                    )
                ),
                SCSeedEnergy = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Energy distribution of the crystals that seeded super clusters.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC seed crystal energy'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(150.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                SCSeedOccupancy = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC seed occupancy map%(suffix)s')
                ),
                SCSeedOccupancyHighE = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters with energy > 2.0 GeV.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed occupancy map%(suffix)s (high energy clusters) %(supercrystal)s binned')
                ),
                SCSeedOccupancyTrig = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters.'),
                    kind = cms.untracked.string('TH2F'),
                    multi = cms.untracked.PSet(
                        trig = cms.untracked.vstring('ECAL', 
                            'HCAL', 
                            'CSC', 
                            'DT', 
                            'RPC')
                    ),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed occupancy map%(suffix)s (%(trig)s triggered) %(supercrystal)s binned')
                ),
                SCSeedTimeMapTrigEx = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Mean timing of the crystals that seeded super clusters.'),
                    kind = cms.untracked.string('TProfile2D'),
                    multi = cms.untracked.PSet(
                        trig = cms.untracked.vstring('ECAL', 
                            'HCAL', 
                            'CSC', 
                            'DT', 
                            'RPC')
                    ),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed crystal timing map%(suffix)s (%(trig)s exclusive triggered) %(supercrystal)s binned'),
                    zaxis = cms.untracked.PSet(
                        high = cms.untracked.double(25.0),
                        low = cms.untracked.double(-25.0),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                SCSeedTimeTrigEx = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Timing distribution of the crystals that seeded super clusters.'),
                    kind = cms.untracked.string('TH1F'),
                    multi = cms.untracked.PSet(
                        trig = cms.untracked.vstring('ECAL', 
                            'HCAL', 
                            'CSC', 
                            'DT', 
                            'RPC')
                    ),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed crystal timing (%(trig)s exclusive triggered)'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(25.0),
                        low = cms.untracked.double(-25.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                SCSizeVsEnergy = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Mean SC size in crystals as a function of the SC energy.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC size (crystal) vs energy (GeV)'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(10.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                SCSwissCross = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Swiss cross for SC maximum-energy crystal.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('EB'),
                    path = cms.untracked.string('EcalBarrel/EBRecoSummary/superClusters_EB_E1oE4'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(1.5),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100)
                    )
                ),
                SingleCrystalCluster = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Occupancy map of the occurrence of super clusters with only one constituent'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC single crystal cluster seed occupancy map%(suffix)s')
                ),
                TrendBCSize = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the mean size of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s size of basic clusters')
                ),
                TrendNBC = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the number of basic clusters per event in EB/EE.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s number of basic clusters')
                ),
                TrendNSC = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the number of super clusters per event in EB/EE.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s number of super clusters')
                ),
                TrendSCSize = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the mean size (number of crystals) of the super clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s size of super clusters')
                ),
                Triggers = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Counter for the trigger categories'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('None'),
                    path = cms.untracked.string('EcalBarrel/EBClusterTaskExtras/EBCLTE triggers'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(5.0),
                        labels = cms.untracked.vstring('ECAL', 
                            'HCAL', 
                            'CSC', 
                            'DT', 
                            'RPC'),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(5),
                        title = cms.untracked.string('triggers')
                    )
                )
            ),
            params = cms.untracked.PSet(
                L1GlobalTriggerReadoutRecordTag = cms.untracked.InputTag("gtDigis"),
                L1MuGMTReadoutCollectionTag = cms.untracked.InputTag("gtDigis"),
                doExtra = cms.untracked.bool(True),
                egTriggerAlgos = cms.untracked.vstring('L1_SingleEG2', 
                    'L1_SingleEG5', 
                    'L1_SingleEG8', 
                    'L1_SingleEG10', 
                    'L1_SingleEG12', 
                    'L1_SingleEG15', 
                    'L1_SingleEG20', 
                    'L1_SingleEG25', 
                    'L1_DoubleNoIsoEG_BTB_tight', 
                    'L1_DoubleNoIsoEG_BTB_loose', 
                    'L1_DoubleNoIsoEGTopBottom', 
                    'L1_DoubleNoIsoEGTopBottomCen', 
                    'L1_DoubleNoIsoEGTopBottomCen2', 
                    'L1_DoubleNoIsoEGTopBottomCenVert'),
                energyThreshold = cms.untracked.double(2.0),
                swissCrossMaxThreshold = cms.untracked.double(3.0)
            )
        ),
        EnergyTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                Hit = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Rec hit energy distribution.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT energy spectrum %(sm)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(20.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                HitAll = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Rec hit energy distribution.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit spectrum%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(20.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                HitMap = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string('2D distribution of the mean rec hit energy.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit energy %(sm)s'),
                    zaxis = cms.untracked.PSet(
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                HitMapAll = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('2D distribution of the mean rec hit energy.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sOT%(suffix)s energy summary'),
                    zaxis = cms.untracked.PSet(
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                HitMapAllByLumi = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('2D distribution of the mean tower rec hit energy for this lumisection. The mean is the total tower rechit energy over the number of rechits in the tower.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sOT%(suffix)s energy summary by lumi'),
                    zaxis = cms.untracked.PSet(
                        title = cms.untracked.string('energy (GeV)')
                    )
                )
            ),
            params = cms.untracked.PSet(
                isPhysicsRun = cms.untracked.bool(True)
            )
        ),
        IntegrityTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                BlockSize = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/TTBlockSize/%(prefix)sIT TTBlockSize %(sm)s')
                ),
                ByLumi = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Total number of integrity errors for each FED in this lumi section.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/%(prefix)sIT weighted integrity errors by lumi'),
                    perLumi = cms.untracked.bool(True)
                ),
                ChId = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/ChId/%(prefix)sIT ChId %(sm)s')
                ),
                Gain = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/Gain/%(prefix)sIT gain %(sm)s')
                ),
                GainSwitch = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/GainSwitch/%(prefix)sIT gain switch %(sm)s')
                ),
                MapByLumi = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string('Integrity error occupancy map for this lumisection. Includes Gain, ChId, GainSwitch, TowerId, and BlockSize errors.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/%(prefix)sIT%(suffix)s integrity errors map by lumi')
                ),
                Total = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Total number of integrity errors for each FED.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sIT integrity quality errors summary')
                ),
                TowerId = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/TTId/%(prefix)sIT TTId %(sm)s')
                ),
                TrendNErrors = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the number of integrity errors.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal'),
                    path = cms.untracked.string('Ecal/Trends/IntegrityTask number of integrity errors')
                )
            )
        ),
        OccupancyTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                DCC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of entries recoreded by each FED'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT DCC entries')
                ),
                Digi = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string('Digi occupancy.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy %(sm)s')
                ),
                Digi1D = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the number of digis per event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT number of digis in event'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(3000.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100)
                    )
                ),
                DigiAll = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Digi occupancy.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s')
                ),
                DigiAllByLumi = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Digi occupancy for this lumisection.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s by lumi')
                ),
                DigiDCC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('DCC digi occupancy.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sOT digi occupancy summary 1D')
                ),
                DigiProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of digi occupancy.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s projection eta')
                ),
                DigiProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of digi occupancy.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s projection phi')
                ),
                RecHitAll = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string('Rec hit occupancy.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s')
                ),
                RecHitProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the occupancy of all rec hits.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s projection eta')
                ),
                RecHitProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the rec hit occupancy.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s projection phi')
                ),
                RecHitThr1D = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT number of filtered rec hits in event'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(500.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100)
                    )
                ),
                RecHitThrAll = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Occupancy for rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s')
                ),
                RecHitThrAllByLumi = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Filtered rechit cccupancy for this lumisection. Only includes rechits with GOOD reconstruction flag and E > 0.5 GeV.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s by lumi')
                ),
                RecHitThrProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s projection eta')
                ),
                RecHitThrProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s projection phi')
                ),
                RecHitThrmvp = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Filtered rechit occupancy correlation.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy correlation'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(500.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('Nrechits(z+,far)')
                    ),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(500.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('Nrechits(z-,near)')
                    )
                ),
                RecHitThrpm = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Filtered rechit occupancy difference.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy z+(far) - z-(near)'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(1000.0),
                        low = cms.untracked.double(-1000.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('Nrechits(z+,far) - Nrechits(z-,near)')
                    )
                ),
                TPDigiRCT = cms.untracked.PSet(
                    btype = cms.untracked.string('RCT'),
                    description = cms.untracked.string('Occupancy for TP digis with Et > 4.0 GeV in RCT coordinates'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal'),
                    path = cms.untracked.string('EcalBarrel/EBOccupancyTask/TP digi thr occupancy in RCT coordinates')
                ),
                TPDigiThrAll = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('Occupancy for TP digis with Et > 4.0 GeV.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s')
                ),
                TPDigiThrAllByLumi = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('TP digi occupancy for this lumisection. Only includes TP digis with Et > 4.0 GeV.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s by lumi')
                ),
                TPDigiThrProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the occupancy of TP digis with Et > 4.0 GeV.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s projection eta')
                ),
                TPDigiThrProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the occupancy of TP digis with Et > 4.0 GeV.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s projection phi')
                ),
                TrendNDigi = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the per-event number of digis.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of digis')
                ),
                TrendNRecHitThr = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the per-event number of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of filtered recHits')
                ),
                TrendNTPDigi = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the per-event number of TP digis with Et > 4.0 GeV.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of filtered TP digis')
                )
            ),
            params = cms.untracked.PSet(
                recHitThreshold = cms.untracked.double(0.5),
                tpThreshold = cms.untracked.double(4.0)
            )
        ),
        PresampleTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                Pedestal = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string('2D distribution of mean presample value.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sPedestalOnlineTask/Gain12/%(prefix)sPOT pedestal %(sm)s G12')
                ),
                PedestalByLS = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string('2D distribution of mean presample value for "current" LS.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sPedestalOnlineTask/Gain12/%(prefix)sPOT pedestal by LS %(sm)s G12')
                )
            ),
            params = cms.untracked.PSet(
                doPulseMaxCheck = cms.untracked.bool(True),
                nSamples = cms.untracked.int32(3),
                pulseMaxPosition = cms.untracked.int32(5)
            )
        ),
        RawDataTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                BXDCC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between bunch crossing numbers recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing DCC errors')
                ),
                BXDCCDiff = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between bunch crossing numbers recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing DCC-GT'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(-100.0),
                        nbins = cms.untracked.int32(200)
                    )
                ),
                BXFE = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing FE errors'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(68.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(68),
                        title = cms.untracked.string('iFE')
                    )
                ),
                BXFEDiff = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing FE-DCC'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(-100.0),
                        nbins = cms.untracked.int32(200)
                    )
                ),
                BXFEInvalid = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing invalid value'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(69.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(69),
                        title = cms.untracked.string('iFE')
                    )
                ),
                BXSRP = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and SRP.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing SRP errors')
                ),
                BXTCC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of bunch corssing value mismatches between DCC and TCC.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing TCC errors')
                ),
                CRC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of CRC errors.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT CRC errors')
                ),
                DesyncByLumi = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Total number of synchronization errors (L1A & BX mismatches) between DCC and FE in this lumi section.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT FE synchronization errors by lumi'),
                    perLumi = cms.untracked.bool(True)
                ),
                DesyncTotal = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Total number of synchronization errors (L1A & BX mismatches) between DCC and FE.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT total FE synchronization errors')
                ),
                EventTypeCalib = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing == 3490. This plot is filled using data from the physics data stream during physics runs. It is normal to have very few entries in these cases.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type calibration BX'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(24.5),
                        labels = cms.untracked.vstring('UNKNOWN', 
                            'COSMIC', 
                            'BEAMH4', 
                            'BEAMH2', 
                            'MTCC', 
                            'LASER_STD', 
                            'LASER_POWER_SCAN', 
                            'LASER_DELAY_SCAN', 
                            'TESTPULSE_SCAN_MEM', 
                            'TESTPULSE_MGPA', 
                            'PEDESTAL_STD', 
                            'PEDESTAL_OFFSET_SCAN', 
                            'PEDESTAL_25NS_SCAN', 
                            'LED_STD', 
                            'PHYSICS_GLOBAL', 
                            'COSMICS_GLOBAL', 
                            'HALO_GLOBAL', 
                            'LASER_GAP', 
                            'TESTPULSE_GAP', 
                            'PEDESTAL_GAP', 
                            'LED_GAP', 
                            'PHYSICS_LOCAL', 
                            'COSMICS_LOCAL', 
                            'HALO_LOCAL', 
                            'CALIB_LOCAL'),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(25)
                    )
                ),
                EventTypePostCalib = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing > 3490.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type post calibration BX'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(24.5),
                        labels = cms.untracked.vstring('UNKNOWN', 
                            'COSMIC', 
                            'BEAMH4', 
                            'BEAMH2', 
                            'MTCC', 
                            'LASER_STD', 
                            'LASER_POWER_SCAN', 
                            'LASER_DELAY_SCAN', 
                            'TESTPULSE_SCAN_MEM', 
                            'TESTPULSE_MGPA', 
                            'PEDESTAL_STD', 
                            'PEDESTAL_OFFSET_SCAN', 
                            'PEDESTAL_25NS_SCAN', 
                            'LED_STD', 
                            'PHYSICS_GLOBAL', 
                            'COSMICS_GLOBAL', 
                            'HALO_GLOBAL', 
                            'LASER_GAP', 
                            'TESTPULSE_GAP', 
                            'PEDESTAL_GAP', 
                            'LED_GAP', 
                            'PHYSICS_LOCAL', 
                            'COSMICS_LOCAL', 
                            'HALO_LOCAL', 
                            'CALIB_LOCAL'),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(25)
                    )
                ),
                EventTypePreCalib = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing < 3490'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type pre calibration BX'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(24.5),
                        labels = cms.untracked.vstring('UNKNOWN', 
                            'COSMIC', 
                            'BEAMH4', 
                            'BEAMH2', 
                            'MTCC', 
                            'LASER_STD', 
                            'LASER_POWER_SCAN', 
                            'LASER_DELAY_SCAN', 
                            'TESTPULSE_SCAN_MEM', 
                            'TESTPULSE_MGPA', 
                            'PEDESTAL_STD', 
                            'PEDESTAL_OFFSET_SCAN', 
                            'PEDESTAL_25NS_SCAN', 
                            'LED_STD', 
                            'PHYSICS_GLOBAL', 
                            'COSMICS_GLOBAL', 
                            'HALO_GLOBAL', 
                            'LASER_GAP', 
                            'TESTPULSE_GAP', 
                            'PEDESTAL_GAP', 
                            'LED_GAP', 
                            'PHYSICS_LOCAL', 
                            'COSMICS_LOCAL', 
                            'HALO_LOCAL', 
                            'CALIB_LOCAL'),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(25)
                    )
                ),
                FEByLumi = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Total number of front-ends in error status in this lumi section.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sStatusFlagsTask/FEStatus/%(prefix)sSFT weighted frontend errors by lumi'),
                    perLumi = cms.untracked.bool(True)
                ),
                FEStatus = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('FE status counter.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sStatusFlagsTask/FEStatus/%(prefix)sSFT front-end status bits %(sm)s'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(15.5),
                        labels = cms.untracked.vstring('ENABLED', 
                            'DISABLED', 
                            'TIMEOUT', 
                            'HEADERERROR', 
                            'CHANNELID', 
                            'LINKERROR', 
                            'BLOCKSIZE', 
                            'SUPPRESSED', 
                            'FIFOFULL', 
                            'L1ADESYNC', 
                            'BXDESYNC', 
                            'L1ABXDESYNC', 
                            'FIFOFULLL1ADESYNC', 
                            'HPARITY', 
                            'VPARITY', 
                            'FORCEDZS'),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(16)
                    )
                ),
                FEStatusErrMapByLumi = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('FE status error occupancy map for this lumisection. Nominal FE status flags such as ENABLED, SUPPRESSED, FIFOFILL, FIFOFULLL1ADESYNC, and FORCEDZS are NOT included.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sStatusFlagsTask/FEStatus/%(prefix)sSFT%(suffix)s front-end status error map by lumi'),
                    perLumi = cms.untracked.bool(True)
                ),
                L1ADCC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between L1A recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A DCC errors')
                ),
                L1AFE = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of L1A value mismatches between DCC and FE.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A FE errors'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(68.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(68),
                        title = cms.untracked.string('iFE')
                    )
                ),
                L1ASRP = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of L1A value mismatches between DCC and SRP.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A SRP errors')
                ),
                L1ATCC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of L1A value mismatches between DCC and TCC.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A TCC errors')
                ),
                Orbit = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between LHC orbit numbers recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT orbit number errors')
                ),
                OrbitDiff = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between LHC orbit numbers recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT orbit number DCC-GT'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(-100.0),
                        nbins = cms.untracked.int32(200)
                    )
                ),
                RunNumber = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between run numbers recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT run number errors')
                ),
                TrendNSyncErrors = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    cumulative = cms.untracked.bool(True),
                    description = cms.untracked.string('Accumulated trend of the number of synchronization errors (L1A & BX mismatches) between DCC and FE in this run.'),
                    kind = cms.untracked.string('TH1F'),
                    online = cms.untracked.bool(True),
                    otype = cms.untracked.string('Ecal'),
                    path = cms.untracked.string('Ecal/Trends/RawDataTask accumulated number of sync errors')
                ),
                TriggerType = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between trigger type recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT trigger type errors')
                )
            )
        ),
        RecoSummaryTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                Chi2 = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Chi2 of the pulse reconstruction.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_Chi2'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100)
                    )
                ),
                EnergyMax = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Maximum energy of the rechit.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_energyMax'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(-10.0),
                        nbins = cms.untracked.int32(110)
                    )
                ),
                RecoFlagAll = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Reconstruction flags from all rechits.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshort)s_recoFlag'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(15.5),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(16)
                    )
                ),
                RecoFlagBasicCluster = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Reconstruction flags from rechits in basic clusters.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/basicClusters_recHits_%(subdetshort)s_recoFlag'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(15.5),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(16)
                    )
                ),
                RecoFlagReduced = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Reconstruction flags from reduced rechits.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/redRecHits_%(subdetshort)s_recoFlag'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(15.5),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(16)
                    )
                ),
                SwissCross = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Swiss cross.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('EB'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshort)s_E1oE4'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(1.5),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100)
                    )
                ),
                Time = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Rechit time.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_time'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(50.0),
                        low = cms.untracked.double(-50.0),
                        nbins = cms.untracked.int32(100)
                    )
                )
            ),
            params = cms.untracked.PSet(
                rechitThresholdEB = cms.untracked.double(0.8),
                rechitThresholdEE = cms.untracked.double(1.2)
            )
        ),
        SelectiveReadoutTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                DCCSize = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Distribution of the per-DCC data size.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT event size vs DCC'),
                    yaxis = cms.untracked.PSet(
                        edges = cms.untracked.vdouble(0.0, 0.0608, 0.1216, 0.1824, 0.2432, 
                            0.304, 0.3648, 0.4256, 0.4864, 0.5472, 
                            0.608, 0.608, 1.216, 1.824, 2.432, 
                            3.04, 3.648, 4.256, 4.864, 5.472, 
                            6.08, 6.688, 7.296, 7.904, 8.512, 
                            9.12, 9.728, 10.336, 10.944, 11.552, 
                            12.16, 12.768, 13.376, 13.984, 14.592, 
                            15.2, 15.808, 16.416, 17.024, 17.632, 
                            18.24, 18.848, 19.456, 20.064, 20.672, 
                            21.28, 21.888, 22.496, 23.104, 23.712, 
                            24.32, 24.928, 25.536, 26.144, 26.752, 
                            27.36, 27.968, 28.576, 29.184, 29.792, 
                            30.4, 31.008, 31.616, 32.224, 32.832, 
                            33.44, 34.048, 34.656, 35.264, 35.872, 
                            36.48, 37.088, 37.696, 38.304, 38.912, 
                            39.52, 40.128, 40.736, 41.344),
                        title = cms.untracked.string('event size (kB)')
                    )
                ),
                DCCSizeProf = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Mean and spread of the per-DCC data size.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT DCC event size'),
                    yaxis = cms.untracked.PSet(
                        title = cms.untracked.string('event size (kB)')
                    )
                ),
                EventSize = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of per-DCC data size.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT event size%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(5.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('event size (kB)')
                    )
                ),
                FRDropped = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Number of FR flagged but dropped towers.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT FR Flagged Dropped Readout Number%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(20.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(20),
                        title = cms.untracked.string('number of towers')
                    )
                ),
                FRDroppedMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Number of FR flagged but dropped towers.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT FR flagged dropped counter%(suffix)s')
                ),
                FlagCounterMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Tower occupancy of any SR flag.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower flag counter%(suffix)s')
                ),
                FullReadout = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Number of FR flags per event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT full readout SR Flags Number%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(200.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('number of towers')
                    )
                ),
                FullReadoutMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Tower occupancy with FR flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower full readout counter%(suffix)s')
                ),
                HighIntOutput = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Output of the ZS filter for high interest towers.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT high interest ZS filter output%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(60.0),
                        low = cms.untracked.double(-60.0),
                        nbins = cms.untracked.int32(120),
                        title = cms.untracked.string('ADC counts*4')
                    )
                ),
                HighIntPayload = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Total data size from all high interest towers.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT high interest payload%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(3.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('event size (kB)')
                    )
                ),
                LowIntOutput = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Output of the ZS filter for low interest towers.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT low interest ZS filter output%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(60.0),
                        low = cms.untracked.double(-60.0),
                        nbins = cms.untracked.int32(120),
                        title = cms.untracked.string('ADC counts*4')
                    )
                ),
                LowIntPayload = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Total data size from all low interest towers.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT low interest payload%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(3.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('event size (kB)')
                    )
                ),
                RUForcedMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Tower occupancy of FORCED flag.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT RU with forced SR counter%(suffix)s')
                ),
                TowerSize = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('2D distribution of the mean data size from each readout unit.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT tower event size%(suffix)s'),
                    zaxis = cms.untracked.PSet(
                        title = cms.untracked.string('size (bytes)')
                    )
                ),
                ZS1Map = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Tower occupancy with ZS1 flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower ZS1 counter%(suffix)s')
                ),
                ZSFullReadout = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Number of ZS flagged but fully read out towers.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT ZS Flagged Fully Readout Number%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(20.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(20),
                        title = cms.untracked.string('number of towers')
                    )
                ),
                ZSFullReadoutMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Number of ZS flagged but fully read out towers.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT ZS flagged full readout counter%(suffix)s')
                ),
                ZSMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Tower occupancy of ZS1 and ZS2 flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower ZS1+ZS2 counter%(suffix)s')
                )
            ),
            params = cms.untracked.PSet(
                DCCZS1stSample = cms.untracked.int32(2),
                ZSFIRWeights = cms.untracked.vdouble(-0.374, -0.374, -0.3629, 0.2721, 0.4681, 
                    0.3707),
                useCondDb = cms.untracked.bool(False)
            )
        ),
        TimingTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                Chi2 = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Chi2 of the pulse reconstruction.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT %(subdetshortsig)s Chi2'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100)
                    )
                ),
                Time1D = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing 1D %(sm)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(12.5),
                        low = cms.untracked.double(-12.5),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                TimeAll = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing 1D summary%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(12.5),
                        low = cms.untracked.double(-12.5),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                TimeAllMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('2D distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. Hits with |t| > 7.0 ns are discarded. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing map%(suffix)s'),
                    zaxis = cms.untracked.PSet(
                        high = cms.untracked.double(7.0),
                        low = cms.untracked.double(-7.0),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                TimeAmp = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Correlation between hit timing and energy. Only hits with GOOD or OUT_OF_TIME reconstruction flags are used.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing vs amplitude %(sm)s'),
                    xaxis = cms.untracked.PSet(
                        edges = cms.untracked.vdouble(0.316227766017, 0.354813389234, 0.398107170553, 0.446683592151, 0.501187233627, 
                            0.56234132519, 0.63095734448, 0.707945784384, 0.794328234724, 0.891250938134, 
                            1.0, 1.1220184543, 1.25892541179, 1.41253754462, 1.58489319246, 
                            1.77827941004, 1.99526231497, 2.23872113857, 2.51188643151, 2.81838293126, 
                            3.16227766017, 3.54813389234, 3.98107170553, 4.46683592151, 5.01187233627, 
                            5.6234132519, 6.3095734448, 7.07945784384, 7.94328234724, 8.91250938134, 
                            10.0, 11.220184543, 12.5892541179, 14.1253754462, 15.8489319246, 
                            17.7827941004, 19.9526231497, 22.3872113857, 25.1188643151, 28.1838293126, 
                            31.6227766017, 35.4813389234, 39.8107170553, 44.6683592151, 50.1187233627, 
                            56.234132519, 63.095734448, 70.7945784384, 79.4328234724, 89.1250938134),
                        title = cms.untracked.string('energy (GeV)')
                    ),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(50.0),
                        low = cms.untracked.double(-50.0),
                        nbins = cms.untracked.int32(200),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                TimeAmpAll = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Correlation between hit timing and energy. Only hits with GOOD or OUT_OF_TIME reconstruction flags are used.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing vs amplitude summary%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        edges = cms.untracked.vdouble(0.316227766017, 0.354813389234, 0.398107170553, 0.446683592151, 0.501187233627, 
                            0.56234132519, 0.63095734448, 0.707945784384, 0.794328234724, 0.891250938134, 
                            1.0, 1.1220184543, 1.25892541179, 1.41253754462, 1.58489319246, 
                            1.77827941004, 1.99526231497, 2.23872113857, 2.51188643151, 2.81838293126, 
                            3.16227766017, 3.54813389234, 3.98107170553, 4.46683592151, 5.01187233627, 
                            5.6234132519, 6.3095734448, 7.07945784384, 7.94328234724, 8.91250938134, 
                            10.0, 11.220184543, 12.5892541179, 14.1253754462, 15.8489319246, 
                            17.7827941004, 19.9526231497, 22.3872113857, 25.1188643151, 28.1838293126, 
                            31.6227766017, 35.4813389234, 39.8107170553, 44.6683592151, 50.1187233627, 
                            56.234132519, 63.095734448, 70.7945784384, 79.4328234724, 89.1250938134),
                        title = cms.untracked.string('energy (GeV)')
                    ),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(50.0),
                        low = cms.untracked.double(-50.0),
                        nbins = cms.untracked.int32(200),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                TimeAmpBXm = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Correlation between in-time amplitude and BX-1 out-of-time amplitude. Only events with kGood reconstruction flag set, energy > ( EB:20.000000, EE:15.000000 ) GeV, and chi2 < ( EB:16.000000, EE:50.000000 ) are used.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT in-time vs BX-1 amplitude%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(1000.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(250),
                        title = cms.untracked.string('In-time amplitude [ADC]')
                    ),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('Amplitude BX-1 [ADC]')
                    )
                ),
                TimeAmpBXp = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Correlation between in-time amplitude and BX+1 out-of-time amplitude. Only events with kGood reconstruction flag set, energy > ( EB:20.000000, EE:15.000000 ) GeV, and chi2 < ( EB:16.000000, EE:50.000000 ) are used.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT in-time vs BX+1 amplitude%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(1000.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(250),
                        title = cms.untracked.string('In-time amplitude [ADC]')
                    ),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('Amplitude BX+1 [ADC]')
                    )
                ),
                TimeMap = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string('2D distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. Hits with |t| > 12.5 ns are discarded. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing %(sm)s'),
                    zaxis = cms.untracked.PSet(
                        high = cms.untracked.double(12.5),
                        low = cms.untracked.double(-12.5),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                TimeMapByLS = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string('2D distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. Hits with |t| > 12.5 ns are discarded. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing by LS %(sm)s'),
                    zaxis = cms.untracked.PSet(
                        high = cms.untracked.double(12.5),
                        low = cms.untracked.double(-12.5),
                        title = cms.untracked.string('time (ns)')
                    )
                )
            ),
            params = cms.untracked.PSet(
                chi2ThresholdEB = cms.untracked.double(16.0),
                chi2ThresholdEE = cms.untracked.double(50.0),
                energyThresholdEB = cms.untracked.double(1.0),
                energyThresholdEE = cms.untracked.double(3.0)
            )
        ),
        TrigPrimTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                EmulMaxIndex = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the index of emulated TP with the highest Et value.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT max TP matching index%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(5.5),
                        labels = cms.untracked.vstring('no maximum', 
                            '0', 
                            '1', 
                            '2', 
                            '3', 
                            '4'),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(6),
                        title = cms.untracked.string('TP index')
                    )
                ),
                EtEmulError = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulError %(sm)s')
                ),
                EtMaxEmul = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the maximum Et value within one emulated TP'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/Emulated/%(prefix)sTTT Et spectrum Emulated Digis max%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(256.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(128),
                        title = cms.untracked.string('TP Et')
                    )
                ),
                EtReal = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the trigger primitive Et.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et spectrum Real Digis%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(256.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(128),
                        title = cms.untracked.string('TP Et')
                    )
                ),
                EtRealMap = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('2D distribution of the trigger primitive Et.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et map Real Digis %(sm)s'),
                    zaxis = cms.untracked.PSet(
                        high = cms.untracked.double(256.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(128),
                        title = cms.untracked.string('TP Et')
                    )
                ),
                EtSummary = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('2D distribution of the trigger primitive Et.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sTTT%(suffix)s Et trigger tower summary'),
                    zaxis = cms.untracked.PSet(
                        high = cms.untracked.double(256.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(128),
                        title = cms.untracked.string('TP Et')
                    )
                ),
                EtSummaryByLumi = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('2D distribution of the Trigger Primitives Et for this lumisection.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sTTT%(suffix)s Et trigger tower summary by lumi'),
                    zaxis = cms.untracked.PSet(
                        high = cms.untracked.double(256.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(128),
                        title = cms.untracked.string('TP Et')
                    )
                ),
                EtVsBx = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Mean TP Et in different bunch crossing intervals. This plot is filled by data from physics data stream. It is normal to have very little entries in BX >= 3490.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et vs bx Real Digis%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(16.0),
                        labels = cms.untracked.vstring('1', 
                            '271', 
                            '541', 
                            '892', 
                            '1162', 
                            '1432', 
                            '1783', 
                            '2053', 
                            '2323', 
                            '2674', 
                            '2944', 
                            '3214', 
                            '3446', 
                            '3490', 
                            '3491', 
                            '3565'),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(16),
                        title = cms.untracked.string('bunch crossing')
                    ),
                    yaxis = cms.untracked.PSet(
                        title = cms.untracked.string('TP Et')
                    )
                ),
                FGEmulError = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulFineGrainVetoError %(sm)s')
                ),
                HighIntMap = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('Tower occupancy of high interest flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower high interest counter%(suffix)s')
                ),
                LowIntMap = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('Tower occupancy of low interest flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower low interest counter%(suffix)s')
                ),
                MatchedIndex = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('Counter for TP "timing" (= index withing the emulated TP whose Et matched that of the real TP)'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulMatch %(sm)s'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(6.0),
                        labels = cms.untracked.vstring('no emul', 
                            '0', 
                            '1', 
                            '2', 
                            '3', 
                            '4'),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(6),
                        title = cms.untracked.string('TP index')
                    )
                ),
                MedIntMap = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('Tower occupancy of medium interest flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower med interest counter%(suffix)s')
                ),
                OccVsBx = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('TP occupancy in different bunch crossing intervals. This plot is filled by data from physics data stream. It is normal to have very little entries in BX >= 3490.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT TP occupancy vs bx Real Digis%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(16.0),
                        labels = cms.untracked.vstring('1', 
                            '271', 
                            '541', 
                            '892', 
                            '1162', 
                            '1432', 
                            '1783', 
                            '2053', 
                            '2323', 
                            '2674', 
                            '2944', 
                            '3214', 
                            '3446', 
                            '3490', 
                            '3491', 
                            '3565'),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(16),
                        title = cms.untracked.string('bunch crossing')
                    )
                ),
                RealvEmulEt = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Real data VS emulated TP Et (in-time)'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Real vs Emulated TP Et%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(256.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(128),
                        title = cms.untracked.string('Emulated TP Et (ADC)')
                    ),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(256.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(128),
                        title = cms.untracked.string('Real data TP Et (ADC)')
                    )
                ),
                TTFMismatch = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT TT flag mismatch%(suffix)s')
                ),
                TTFlags = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Distribution of the trigger tower flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT TT Flags%(suffix)s'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(7.5),
                        labels = cms.untracked.vstring('0', 
                            '1', 
                            '2', 
                            '3', 
                            '4', 
                            '5', 
                            '6', 
                            '7'),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(8),
                        title = cms.untracked.string('TT flag')
                    )
                ),
                TTFlags4 = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('Occupancy for TP digis with TTF=4.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT TTF4 Occupancy%(suffix)s')
                ),
                TTFlagsVsEt = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('2D histograms of of TT flags of a corresponding to a given TT vs Et measured by that tower.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT TT Flags vs Et%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(50.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('TP Et')
                    ),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(7.5),
                        labels = cms.untracked.vstring('0', 
                            '1', 
                            '2', 
                            '3', 
                            '4', 
                            '5', 
                            '6', 
                            '7'),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(8),
                        title = cms.untracked.string('TT flag')
                    )
                ),
                TTMaskMap = cms.untracked.PSet(
                    btype = cms.untracked.string('PseudoStrip'),
                    description = cms.untracked.string('Trigger tower and pseudo-strip masking status: a TT or strip is red if it is masked'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/TTStatus/%(prefix)sTTT TT Masking Status%(sm)s')
                ),
                TTMaskMapAll = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('Trigger tower masking status: a TT is red if it is masked.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT TT Masking Status%(suffix)s')
                )
            ),
            params = cms.untracked.PSet(
                runOnEmul = cms.untracked.bool(False)
            )
        )
    ),
    workers = cms.untracked.vstring('ClusterTask', 
        'EnergyTask', 
        'IntegrityTask', 
        'OccupancyTask', 
        'PresampleTask', 
        'RawDataTask', 
        'RecoSummaryTask', 
        'TimingTask', 
        'TrigPrimTask')
)


process.ecalPreshowerFEDIntegrityTask = cms.EDAnalyzer("ESFEDIntegrityTask",
    ESDCCCollections = cms.InputTag("ecalPreshowerDigis"),
    ESKChipCollections = cms.InputTag("ecalPreshowerDigis"),
    FEDDirName = cms.untracked.string('FEDIntegrity'),
    FEDRawDataCollection = cms.InputTag("rawDataCollector"),
    OutputFile = cms.untracked.string(''),
    prefixME = cms.untracked.string('EcalPreshower')
)


process.ecalPreshowerIntegrityTask = cms.EDAnalyzer("ESIntegrityTask",
    DoLumiAnalysis = cms.bool(False),
    ESDCCCollections = cms.InputTag("ecalPreshowerDigis"),
    ESKChipCollections = cms.InputTag("ecalPreshowerDigis"),
    LookupTable = cms.untracked.FileInPath('EventFilter/ESDigiToRaw/data/ES_lookup_table.dat'),
    OutputFile = cms.untracked.string(''),
    prefixME = cms.untracked.string('EcalPreshower')
)


process.ecalPreshowerOccupancyTask = cms.EDAnalyzer("ESOccupancyTask",
    DigiLabel = cms.InputTag("ecalPreshowerDigis"),
    RecHitLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    prefixME = cms.untracked.string('EcalPreshower')
)


process.ecalPreshowerRawDataTask = cms.EDAnalyzer("ESRawDataTask",
    ESDCCCollections = cms.InputTag("ecalPreshowerDigis"),
    FEDRawDataCollection = cms.InputTag("rawDataCollector"),
    OutputFile = cms.untracked.string(''),
    prefixME = cms.untracked.string('EcalPreshower')
)


process.egHLTOffDQMSource = cms.EDAnalyzer("EgHLTOfflineSource",
    BarrelRecHitCollection = cms.InputTag("reducedEcalRecHitsEB"),
    BeamSpotProducer = cms.InputTag("offlineBeamSpot"),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    CaloTowers = cms.InputTag("towerMaker"),
    DQMDirName = cms.string('HLT/EgOffline'),
    ElectronCollection = cms.InputTag("gedGsfElectrons"),
    EndcapRecHitCollection = cms.InputTag("reducedEcalRecHitsEE"),
    HBHERecHitCollection = cms.InputTag("hbhereco"),
    HFRecHitCollection = cms.InputTag("hfreco"),
    IsolTrackCollection = cms.InputTag("generalTracks"),
    PhotonCollection = cms.InputTag("gedPhotons"),
    TrigResults = cms.InputTag("TriggerResults","","HLT"),
    VertexCollection = cms.InputTag("offlinePrimaryVertices"),
    binData = cms.PSet(
        HLTenergy = cms.PSet(
            max = cms.double(300.0),
            min = cms.double(0.0),
            nr = cms.int32(60)
        ),
        HLTeta = cms.PSet(
            max = cms.double(3.0),
            min = cms.double(-3.0),
            nr = cms.int32(30)
        ),
        HLTphi = cms.PSet(
            max = cms.double(3.14),
            min = cms.double(-3.14),
            nr = cms.int32(16)
        ),
        charge = cms.PSet(
            max = cms.double(1.5),
            min = cms.double(-1.5),
            nr = cms.int32(2)
        ),
        dEtaIn = cms.PSet(
            max = cms.double(0.02),
            min = cms.double(-0.02),
            nr = cms.int32(10)
        ),
        dPhiIn = cms.PSet(
            max = cms.double(0.15),
            min = cms.double(-0.15),
            nr = cms.int32(10)
        ),
        deltaE = cms.PSet(
            max = cms.double(50.0),
            min = cms.double(-50.0),
            nr = cms.int32(50)
        ),
        e1x5 = cms.PSet(
            max = cms.double(1.1),
            min = cms.double(-0.1),
            nr = cms.int32(24)
        ),
        e2x5 = cms.PSet(
            max = cms.double(1.1),
            min = cms.double(-0.1),
            nr = cms.int32(24)
        ),
        eOverP = cms.PSet(
            max = cms.double(5),
            min = cms.double(-1.0),
            nr = cms.int32(12)
        ),
        energy = cms.PSet(
            max = cms.double(300.0),
            min = cms.double(0.0),
            nr = cms.int32(60)
        ),
        err = cms.PSet(
            max = cms.double(100.5),
            min = cms.double(-0.5),
            nr = cms.int32(101)
        ),
        et = cms.PSet(
            max = cms.double(155.0),
            min = cms.double(-5.0),
            nr = cms.int32(80)
        ),
        etHigh = cms.PSet(
            max = cms.double(2025),
            min = cms.double(25),
            nr = cms.int32(30)
        ),
        eta = cms.PSet(
            max = cms.double(3.0),
            min = cms.double(-3.0),
            nr = cms.int32(30)
        ),
        etaVsPhi = cms.PSet(
            nrX = cms.int32(15),
            nrY = cms.int32(8),
            xMax = cms.double(3.0),
            xMin = cms.double(-3.0),
            yMax = cms.double(3.14),
            yMin = cms.double(-3.14)
        ),
        hOverE = cms.PSet(
            max = cms.double(0.1),
            min = cms.double(0.0),
            nr = cms.int32(30)
        ),
        invEInvP = cms.PSet(
            max = cms.double(0.2),
            min = cms.double(-0.2),
            nr = cms.int32(10)
        ),
        isolEm = cms.PSet(
            max = cms.double(10),
            min = cms.double(-1),
            nr = cms.int32(22)
        ),
        isolHad = cms.PSet(
            max = cms.double(10),
            min = cms.double(-1),
            nr = cms.int32(22)
        ),
        isolNrTrks = cms.PSet(
            max = cms.double(10),
            min = cms.double(-1),
            nr = cms.int32(22)
        ),
        isolPtTrks = cms.PSet(
            max = cms.double(10),
            min = cms.double(-1),
            nr = cms.int32(22)
        ),
        mass = cms.PSet(
            max = cms.double(120),
            min = cms.double(-10.0),
            nr = cms.int32(26)
        ),
        massHigh = cms.PSet(
            max = cms.double(5000),
            min = cms.double(0.0),
            nr = cms.int32(20)
        ),
        maxr9 = cms.PSet(
            max = cms.double(1.1),
            min = cms.double(-0.1),
            nr = cms.int32(24)
        ),
        minr9 = cms.PSet(
            max = cms.double(1.1),
            min = cms.double(-0.1),
            nr = cms.int32(24)
        ),
        nVertex = cms.PSet(
            max = cms.double(21.0),
            min = cms.double(-1.0),
            nr = cms.int32(22)
        ),
        phi = cms.PSet(
            max = cms.double(3.14),
            min = cms.double(-3.14),
            nr = cms.int32(16)
        ),
        sigEtaEta = cms.PSet(
            max = cms.double(0.05),
            min = cms.double(-0.01),
            nr = cms.int32(30)
        )
    ),
    calHLTEleTrkIsol = cms.bool(True),
    calHLTEmIsol = cms.bool(True),
    calHLTHcalIsol = cms.bool(True),
    calHLTPhoTrkIsol = cms.bool(False),
    cutMasks = cms.PSet(
        fakeEle = cms.string('et:detEta:hadem'),
        probeEle = cms.string('et:detEta'),
        stdEle = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:hltIsolTrksEle:hltIsolHad:hltIsolEm'),
        stdPho = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:isolEm:isolHad:isolPtTrks'),
        tagEle = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:hltIsolTrksEle:hltIsolHad:hltIsolEm'),
        trigTPEle = cms.string('detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:hltIsolTrksEle:hltIsolHad:hltIsolEm'),
        trigTPPho = cms.string('hadem:sigmaIEtaIEta:isolEm:isolHad:isolPtTrks')
    ),
    diEleTightLooseTrigNames = cms.vstring(),
    diPhoTightLooseTrigNames = cms.vstring(),
    eleCuts = cms.PSet(
        barrel = cms.PSet(
            cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
            isolEmConstTerm = cms.double(3),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.03),
            isolHadConstTerm = cms.double(3),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.03),
            isolNrTrksConstTerm = cms.int32(0),
            isolPtTrksConstTerm = cms.double(7.5),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.0),
            maxCTFTrkChi2NDof = cms.double(99999),
            maxCTFTrkInnerRadius = cms.double(99999),
            maxDEtaIn = cms.double(0.004),
            maxDPhiIn = cms.double(0.06),
            maxEta = cms.double(1.442),
            maxHLTDEtaIn = cms.double(0.008),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(9999),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0.07),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0.1),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0.09),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.04),
            maxInvEInvP = cms.double(0.1),
            maxNrCTFTrkHitsLost = cms.int32(999),
            maxR9 = cms.double(0.98),
            maxSigmaEtaEta = cms.double(0.01),
            maxSigmaIEtaIEta = cms.double(0.01),
            minCTFTrkOuterRadius = cms.double(0.0),
            minEt = cms.double(15),
            minEta = cms.double(0.0),
            minNrCTFTrkHits = cms.int32(7),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        ),
        endcap = cms.PSet(
            cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
            isolEmConstTerm = cms.double(3),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.03),
            isolHadConstTerm = cms.double(3),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.03),
            isolNrTrksConstTerm = cms.int32(0),
            isolPtTrksConstTerm = cms.double(15),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.0),
            maxCTFTrkChi2NDof = cms.double(99999),
            maxCTFTrkInnerRadius = cms.double(9999.0),
            maxDEtaIn = cms.double(0.007),
            maxDPhiIn = cms.double(0.03),
            maxEta = cms.double(2.5),
            maxHLTDEtaIn = cms.double(0.008),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(9999),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0.05),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0.025),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0.04),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.025),
            maxInvEInvP = cms.double(0.1),
            maxNrCTFTrkHitsLost = cms.int32(999),
            maxR9 = cms.double(999.0),
            maxSigmaEtaEta = cms.double(0.03),
            maxSigmaIEtaIEta = cms.double(0.03),
            minCTFTrkOuterRadius = cms.double(0.0),
            minEt = cms.double(15),
            minEta = cms.double(1.56),
            minNrCTFTrkHits = cms.int32(7),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        )
    ),
    eleHLTFilterNames = cms.vstring('hltEle65CaloIdVTTrkIdTDphiFilter'),
    eleHLTFilterNames2Leg = cms.vstring(),
    eleLooseCuts = cms.PSet(
        barrel = cms.PSet(
            cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
            isolEmConstTerm = cms.double(3),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.03),
            isolHadConstTerm = cms.double(3),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.03),
            isolNrTrksConstTerm = cms.int32(0),
            isolPtTrksConstTerm = cms.double(7.5),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.0),
            maxCTFTrkChi2NDof = cms.double(99999),
            maxCTFTrkInnerRadius = cms.double(99999),
            maxDEtaIn = cms.double(0.004),
            maxDPhiIn = cms.double(0.06),
            maxEta = cms.double(1.442),
            maxHLTDEtaIn = cms.double(0.008),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(9999),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0.07),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0.1),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0.09),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.04),
            maxInvEInvP = cms.double(0.1),
            maxNrCTFTrkHitsLost = cms.int32(999),
            maxR9 = cms.double(0.98),
            maxSigmaEtaEta = cms.double(0.01),
            maxSigmaIEtaIEta = cms.double(0.01),
            minCTFTrkOuterRadius = cms.double(0.0),
            minEt = cms.double(15),
            minEta = cms.double(0.0),
            minNrCTFTrkHits = cms.int32(7),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        ),
        endcap = cms.PSet(
            cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
            isolEmConstTerm = cms.double(3),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.03),
            isolHadConstTerm = cms.double(3),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.03),
            isolNrTrksConstTerm = cms.int32(0),
            isolPtTrksConstTerm = cms.double(15),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.0),
            maxCTFTrkChi2NDof = cms.double(99999),
            maxCTFTrkInnerRadius = cms.double(9999.0),
            maxDEtaIn = cms.double(0.007),
            maxDPhiIn = cms.double(0.03),
            maxEta = cms.double(2.5),
            maxHLTDEtaIn = cms.double(0.008),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(9999),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0.05),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0.025),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0.04),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.025),
            maxInvEInvP = cms.double(0.1),
            maxNrCTFTrkHitsLost = cms.int32(999),
            maxR9 = cms.double(999.0),
            maxSigmaEtaEta = cms.double(0.03),
            maxSigmaIEtaIEta = cms.double(0.03),
            minCTFTrkOuterRadius = cms.double(0.0),
            minEt = cms.double(15),
            minEta = cms.double(1.56),
            minNrCTFTrkHits = cms.int32(7),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        )
    ),
    eleTightLooseTrigNames = cms.vstring(),
    filterInactiveTriggers = cms.bool(True),
    hltEMIsolEMinEB = cms.double(0.08),
    hltEMIsolEMinEE = cms.double(0.3),
    hltEMIsolEtMinEB = cms.double(-9999.0),
    hltEMIsolEtMinEE = cms.double(-9999.0),
    hltEMIsolEtaSliceEB = cms.double(0.02),
    hltEMIsolEtaSliceEE = cms.double(0.02),
    hltEMIsolInnerConeEB = cms.double(0.045),
    hltEMIsolInnerConeEE = cms.double(0.07),
    hltEMIsolOuterCone = cms.double(0.4),
    hltEleTrkIsolInnerCone = cms.double(0.02),
    hltEleTrkIsolOuterCone = cms.double(0.2),
    hltEleTrkIsolPtMin = cms.double(1.5),
    hltEleTrkIsolRSpan = cms.double(999999.0),
    hltEleTrkIsolZSpan = cms.double(0.1),
    hltHadIsolDepth = cms.int32(-1),
    hltHadIsolEtMin = cms.double(0.0),
    hltHadIsolInnerCone = cms.double(0.0),
    hltHadIsolOuterCone = cms.double(0.3),
    hltPhoTrkIsolCountTrks = cms.bool(False),
    hltPhoTrkIsolInnerCone = cms.double(0.06),
    hltPhoTrkIsolOuterCone = cms.double(0.3),
    hltPhoTrkIsolPtMin = cms.double(1.5),
    hltPhoTrkIsolRSpan = cms.double(999999.0),
    hltPhoTrkIsolZSpan = cms.double(999999.0),
    hltTag = cms.string('HLT'),
    phoCuts = cms.PSet(
        barrel = cms.PSet(
            cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
            isolEmConstTerm = cms.double(5.0),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.012),
            isolHadConstTerm = cms.double(3.0),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.005),
            isolNrTrksConstTerm = cms.int32(4),
            isolPtTrksConstTerm = cms.double(3.0),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.002),
            maxCTFTrkChi2NDof = cms.double(99999.0),
            maxCTFTrkInnerRadius = cms.double(9.0),
            maxDEtaIn = cms.double(-1),
            maxDPhiIn = cms.double(-1),
            maxEta = cms.double(1.442),
            maxHLTDEtaIn = cms.double(0.1),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(0.1),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.05),
            maxInvEInvP = cms.double(-1),
            maxNrCTFTrkHitsLost = cms.int32(0),
            maxR9 = cms.double(0.98),
            maxSigmaEtaEta = cms.double(0.011),
            maxSigmaIEtaIEta = cms.double(0.011),
            minCTFTrkOuterRadius = cms.double(40.0),
            minEt = cms.double(20),
            minEta = cms.double(0.0),
            minNrCTFTrkHits = cms.int32(5),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        ),
        endcap = cms.PSet(
            cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
            isolEmConstTerm = cms.double(5.0),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.012),
            isolHadConstTerm = cms.double(3.0),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.005),
            isolNrTrksConstTerm = cms.int32(4),
            isolPtTrksConstTerm = cms.double(3.0),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.002),
            maxCTFTrkChi2NDof = cms.double(99999.0),
            maxCTFTrkInnerRadius = cms.double(9.0),
            maxDEtaIn = cms.double(-1),
            maxDPhiIn = cms.double(-1),
            maxEta = cms.double(2.5),
            maxHLTDEtaIn = cms.double(0.1),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(0.1),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.05),
            maxInvEInvP = cms.double(-1),
            maxNrCTFTrkHitsLost = cms.int32(0),
            maxR9 = cms.double(999.0),
            maxSigmaEtaEta = cms.double(0.031),
            maxSigmaIEtaIEta = cms.double(0.031),
            minCTFTrkOuterRadius = cms.double(40.0),
            minEt = cms.double(20),
            minEta = cms.double(1.56),
            minNrCTFTrkHits = cms.int32(5),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        )
    ),
    phoHLTFilterNames = cms.vstring(),
    phoHLTFilterNames2Leg = cms.vstring(),
    phoLooseCuts = cms.PSet(
        barrel = cms.PSet(
            cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
            isolEmConstTerm = cms.double(5.0),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.012),
            isolHadConstTerm = cms.double(3.0),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.005),
            isolNrTrksConstTerm = cms.int32(4),
            isolPtTrksConstTerm = cms.double(3.0),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.002),
            maxCTFTrkChi2NDof = cms.double(99999.0),
            maxCTFTrkInnerRadius = cms.double(9.0),
            maxDEtaIn = cms.double(-1),
            maxDPhiIn = cms.double(-1),
            maxEta = cms.double(1.442),
            maxHLTDEtaIn = cms.double(0.1),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(0.1),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.05),
            maxInvEInvP = cms.double(-1),
            maxNrCTFTrkHitsLost = cms.int32(0),
            maxR9 = cms.double(0.98),
            maxSigmaEtaEta = cms.double(0.011),
            maxSigmaIEtaIEta = cms.double(0.011),
            minCTFTrkOuterRadius = cms.double(40.0),
            minEt = cms.double(20),
            minEta = cms.double(0.0),
            minNrCTFTrkHits = cms.int32(5),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        ),
        endcap = cms.PSet(
            cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
            isolEmConstTerm = cms.double(5.0),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.012),
            isolHadConstTerm = cms.double(3.0),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.005),
            isolNrTrksConstTerm = cms.int32(4),
            isolPtTrksConstTerm = cms.double(3.0),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.002),
            maxCTFTrkChi2NDof = cms.double(99999.0),
            maxCTFTrkInnerRadius = cms.double(9.0),
            maxDEtaIn = cms.double(-1),
            maxDPhiIn = cms.double(-1),
            maxEta = cms.double(2.5),
            maxHLTDEtaIn = cms.double(0.1),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(0.1),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.05),
            maxInvEInvP = cms.double(-1),
            maxNrCTFTrkHitsLost = cms.int32(0),
            maxR9 = cms.double(999.0),
            maxSigmaEtaEta = cms.double(0.031),
            maxSigmaIEtaIEta = cms.double(0.031),
            minCTFTrkOuterRadius = cms.double(40.0),
            minEt = cms.double(20),
            minEta = cms.double(1.56),
            minNrCTFTrkHits = cms.int32(5),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        )
    ),
    phoTightLooseTrigNames = cms.vstring(),
    triggerCuts = cms.VPSet(),
    triggerSummaryLabel = cms.InputTag("hltTriggerSummaryAOD","","HLT")
)


process.endcapAnalyzer = cms.EDAnalyzer("HLTMuonOfflineAnalyzer",
    binParams = cms.untracked.PSet(
        NVertex = cms.untracked.vdouble(20, 1, 50),
        charge = cms.untracked.vdouble(2, -2.0, 2.0),
        d0 = cms.untracked.vdouble(10, -0.5, 0.5),
        deltaR = cms.untracked.vdouble(20, 0.0, 0.05),
        eta = cms.untracked.vdouble(20, -2.4, 2.4),
        etaCoarse = cms.untracked.vdouble(-2.4, -2.1, -1.6, -1.2, -0.8, 
            0.0, 0.8, 1.2, 1.6, 2.1, 
            2.4),
        jpsiMass = cms.untracked.vdouble(60, 0.0, 6.0),
        phi = cms.untracked.vdouble(20, -3.14, 3.14),
        phiCoarse = cms.untracked.vdouble(10, -3.14, 3.14),
        pt = cms.untracked.vdouble(0.0, 2.0, 4.0, 6.0, 8.0, 
            10.0, 20.0, 30.0, 40.0, 100.0, 
            200.0, 400.0),
        ptCoarse = cms.untracked.vdouble(10.0, 20.0, 40.0, 60.0, 80.0, 
            100.0, 200.0),
        resolutionEta = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionPhi = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionRel = cms.untracked.vdouble(40, -0.3, 0.3),
        z0 = cms.untracked.vdouble(10, -15.0, 15.0),
        zMass = cms.untracked.vdouble(50, 65.0, 115.0)
    ),
    destination = cms.untracked.string('HLT/Muon/DistributionsEndcap'),
    hltPathsToCheck = cms.vstring('HLT_Mu45_eta2p1_v1', 
        'HLT_Mu50_v', 
        'HLT_IsoMu24_v', 
        'HLT_IsoTkMu24_v', 
        'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
        'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v', 
        'HLT_IsoMu20_eta2p1_v', 
        'HLT_IsoTkMu20_eta2p1_v', 
        'HLT_IsoMu24_eta2p1_v', 
        'HLT_IsoTkMu24_eta2p1_v', 
        'HLT_IsoMu27_v', 
        'HLT_IsoTkMu27_v', 
        'HLT_IsoMu20_v', 
        'HLT_IsoTkMu20_v', 
        'HLT_IsoMu22_v', 
        'HLT_IsoTkMu22_v', 
        'HLT_IsoMu22_eta2p1_v', 
        'HLT_IsoTkMu22_eta2p1_v', 
        'HLT_IsoMu18_v', 
        'HLT_IsoTkMu18_v', 
        'HLT_PAL1DoubleMuOpen_v', 
        'HLT_PAL1DoubleMuOpen_OS_v', 
        'HLT_PAL1DoubleMuOpen_SS_v', 
        'HLT_PAL1DoubleMu0_v', 
        'HLT_PAL1DoubleMu0_HighQ_v', 
        'HLT_PAL1DoubleMu0_MGT1_v', 
        'HLT_PAL1DoubleMu10_v', 
        'HLT_PAL2DoubleMu0_v', 
        'HLT_PAL2DoubleMu10_v', 
        'HLT_PAL3DoubleMu0_v', 
        'HLT_PAL3DoubleMu0_HIon_v', 
        'HLT_PAL3DoubleMu10_v', 
        'HLT_PAL2Mu12_v', 
        'HLT_PAL2Mu15_v', 
        'HLT_PAL3Mu3_v', 
        'HLT_PAL3Mu5_v', 
        'HLT_PAL3Mu7_v', 
        'HLT_PAL3Mu12_v', 
        'HLT_PAL3Mu15_v', 
        'HLT_PASingleMuOpen_PixelTrackGt0_FullTrackLt10_v', 
        'HLT_PASingleMuOpen_PixelTrackGt0_FullTrackLt15_v', 
        'HLT_PASingleMuOpen_PixelTrackGt0Lt10_v', 
        'HLT_PASingleMuOpen_PixelTrackGt0Lt15_v', 
        'HLT_PASingleMuOpen_HFOneTowerVeto_SingleTrack_v', 
        'HLT_PASingleMuOpen_HFOneTowerVeto_v', 
        'HLT_PASingleMuOpen_HFTwoTowerVeto_SingleTrack_v', 
        'HLT_PASingleMuOpen_HFTwoTowerVeto_v', 
        'HLT_PADoubleMuOpen_HFOneTowerVeto_SingleTrack_v', 
        'HLT_PADoubleMuOpen_HFOneTowerVeto_v', 
        'HLT_PADoubleMuOpen_HFTwoTowerVeto_SingleTrack_v', 
        'HLT_PADoubleMuOpen_HFTwoTowerVeto_v'),
    hltProcessName = cms.string('HLT'),
    inputTags = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        offlinePVs = cms.InputTag("offlinePrimaryVertices"),
        recoMuon = cms.InputTag("muons"),
        triggerResults = cms.InputTag("TriggerResults"),
        triggerSummary = cms.InputTag("hltTriggerSummaryAOD")
    ),
    plotCuts = cms.PSet(
        L1DeltaR = cms.untracked.double(0.3),
        L2DeltaR = cms.untracked.double(0.3),
        L3DeltaR = cms.untracked.double(0.05),
        maxEta = cms.untracked.double(2.1),
        minPtFactor = cms.untracked.double(1.2)
    ),
    probeParams = cms.PSet(

    ),
    requiredTriggers = cms.untracked.vstring(),
    targetParams = cms.PSet(
        d0Cut = cms.untracked.double(1000.0),
        hltCuts = cms.untracked.string('abs(eta) > 1.4 && abs(eta) < 2.0'),
        recoCuts = cms.untracked.string('isStandAloneMuon && abs(eta) > 1.4 && abs(eta) < 2.0'),
        z0Cut = cms.untracked.double(1000.0)
    )
)


process.hltResults = cms.EDAnalyzer("GeneralHLTOffline",
    HltProcessName = cms.string('HLT'),
    LuminositySegmentSize = cms.untracked.double(23),
    NLuminositySegments = cms.untracked.uint32(2000),
    Nbins = cms.untracked.uint32(50),
    Nbins2D = cms.untracked.uint32(40),
    NbinsOneOverEt = cms.untracked.uint32(1000),
    dirname = cms.untracked.string('HLT/General/paths'),
    electronEtMin = cms.untracked.double(5.0),
    jetEtMin = cms.untracked.double(5.0),
    jetEtaMax = cms.untracked.double(3.0),
    muonEtaMax = cms.untracked.double(2.1),
    muonRecoCollectionName = cms.untracked.string('muons'),
    photonEtMin = cms.untracked.double(5.0),
    plotAll = cms.untracked.bool(False),
    processname = cms.string('HLT'),
    ptMax = cms.untracked.double(100.0),
    ptMin = cms.untracked.double(0.0),
    referenceBX = cms.untracked.uint32(1),
    tauEtMin = cms.untracked.double(10.0),
    triggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    triggerSummaryLabel = cms.InputTag("hltTriggerSummaryAOD","","HLT")
)


process.hltTauOfflineMonitor_Inclusive = cms.EDAnalyzer("HLTTauDQMOfflineSource",
    DQMBaseFolder = cms.untracked.string('HLT/TauOffline/Inclusive'),
    HLTProcessName = cms.untracked.string('HLT'),
    L1Plotter = cms.untracked.PSet(
        DQMFolder = cms.untracked.string('L1'),
        L1ETM = cms.untracked.InputTag("caloStage2Digis","EtSum"),
        L1ETMMin = cms.untracked.double(50),
        L1Taus = cms.untracked.InputTag("caloStage2Digis","Tau")
    ),
    Matching = cms.PSet(
        doMatching = cms.untracked.bool(False),
        matchFilters = cms.untracked.VPSet()
    ),
    PathSummaryPlotter = cms.untracked.PSet(
        DQMFolder = cms.untracked.string('Summary')
    ),
    Paths = cms.untracked.string('PFTau'),
    TriggerEventSrc = cms.untracked.InputTag("hltTriggerSummaryAOD","","HLT"),
    TriggerResultsSrc = cms.untracked.InputTag("TriggerResults","","HLT")
)


process.hltTauOfflineMonitor_PFTaus = cms.EDAnalyzer("HLTTauDQMOfflineSource",
    DQMBaseFolder = cms.untracked.string('HLT/TauOffline/PFTaus'),
    HLTProcessName = cms.untracked.string('HLT'),
    L1Plotter = cms.untracked.PSet(
        DQMFolder = cms.untracked.string('L1'),
        L1ETM = cms.untracked.InputTag("caloStage2Digis","EtSum"),
        L1ETMMin = cms.untracked.double(50),
        L1Taus = cms.untracked.InputTag("caloStage2Digis","Tau")
    ),
    Matching = cms.PSet(
        doMatching = cms.untracked.bool(True),
        matchFilters = cms.untracked.VPSet(cms.untracked.PSet(
            FilterName = cms.untracked.InputTag("TauRefProducer","PFTaus"),
            matchObjectID = cms.untracked.int32(15)
        ), 
            cms.untracked.PSet(
                FilterName = cms.untracked.InputTag("TauRefProducer","Electrons"),
                matchObjectID = cms.untracked.int32(11)
            ), 
            cms.untracked.PSet(
                FilterName = cms.untracked.InputTag("TauRefProducer","Muons"),
                matchObjectID = cms.untracked.int32(13)
            ), 
            cms.untracked.PSet(
                FilterName = cms.untracked.InputTag("TauRefProducer","MET"),
                matchObjectID = cms.untracked.int32(0)
            ))
    ),
    PathSummaryPlotter = cms.untracked.PSet(
        DQMFolder = cms.untracked.string('Summary')
    ),
    Paths = cms.untracked.string('PFTau'),
    TriggerEventSrc = cms.untracked.InputTag("hltTriggerSummaryAOD","","HLT"),
    TriggerResultsSrc = cms.untracked.InputTag("TriggerResults","","HLT")
)


process.jetDQMAnalyzerAk4CaloUncleaned = cms.EDAnalyzer("JetAnalyzer",
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(True),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQM")
    ),
    DCSFilterForJetMonitoring = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf'),
        alwaysPass = cms.untracked.bool(False)
    ),
    InputCutPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedDiscriminant"),
    InputCutPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedId"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    InputMVAPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","fullDiscriminant"),
    InputMVAPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","fullId"),
    InputQGAxis2 = cms.InputTag("QGTagger","axis2"),
    InputQGLikelihood = cms.InputTag("QGTagger","qgLikelihood"),
    InputQGMultiplicity = cms.InputTag("QGTagger","mult"),
    InputQGPtDToken = cms.InputTag("QGTagger","ptD"),
    JetCleaningFlag = cms.untracked.bool(False),
    JetCorrections = cms.InputTag(""),
    JetIDQuality = cms.string('LOOSE'),
    JetIDVersion = cms.string('PURE09'),
    JetType = cms.string('calo'),
    METCollectionLabel = cms.InputTag("caloMet"),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    fillCHShistos = cms.bool(False),
    filljetHighLevel = cms.bool(True),
    fillsubstructure = cms.bool(False),
    highPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_PFJet450_v*')
    ),
    jetAnalysis = cms.PSet(
        asymmetryThirdJetCut = cms.double(30),
        balanceThirdJetCut = cms.double(0.2),
        eBin = cms.int32(100),
        eMax = cms.double(1000.0),
        eMin = cms.double(0.0),
        etaBin = cms.int32(100),
        etaMax = cms.double(5.0),
        etaMin = cms.double(-5.0),
        fillJIDPassFrac = cms.int32(1),
        pBin = cms.int32(100),
        pMax = cms.double(500.0),
        pMin = cms.double(0.0),
        pVBin = cms.int32(100),
        pVMax = cms.double(100.0),
        pVMin = cms.double(0.0),
        phiBin = cms.int32(70),
        phiMax = cms.double(3.2),
        phiMin = cms.double(-3.2),
        ptBin = cms.int32(100),
        ptMax = cms.double(500.0),
        ptMin = cms.double(20.0),
        ptThreshold = cms.double(20.0),
        ptThresholdUnc = cms.double(30),
        verbose = cms.int32(0)
    ),
    jetsrc = cms.InputTag("ak4CaloJets"),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    lowPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_PFJet80_v*')
    ),
    muonsrc = cms.InputTag("muons"),
    processname = cms.string('HLT'),
    ptMinBoosted = cms.double(400.0),
    runcosmics = cms.untracked.bool(True)
)


process.jetMETHLTOfflineSourceAK4 = cms.EDAnalyzer("JetMETHLTOfflineSource",
    CaloJetCollectionLabel = cms.InputTag("ak4CaloJets"),
    CaloJetCorLabel = cms.InputTag("ak4CaloL1FastL2L3ResidualCorrector"),
    CaloMETCollectionLabel = cms.InputTag("caloMet"),
    JetIDParams = cms.PSet(
        ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        hbheRecHitsColl = cms.InputTag("hbhereco"),
        hfRecHitsColl = cms.InputTag("hfreco"),
        hoRecHitsColl = cms.InputTag("horeco"),
        useRecHits = cms.bool(True)
    ),
    PFJetCollectionLabel = cms.InputTag("ak4PFJets"),
    PFJetCorLabel = cms.InputTag("ak4PFL1FastL2L3ResidualCorrector"),
    PFMETCollectionLabel = cms.InputTag("pfMet"),
    dirname = cms.untracked.string('HLT/JetMET'),
    fEMF = cms.untracked.double(0.01),
    fHPD = cms.untracked.double(0.98),
    feta = cms.untracked.double(2.6),
    maxCEMF = cms.untracked.double(1.0),
    maxCHEF = cms.untracked.double(1.0),
    maxNEMF = cms.untracked.double(1.0),
    maxNHEF = cms.untracked.double(1.0),
    minCEMF = cms.untracked.double(0.0),
    minCHEF = cms.untracked.double(0.0),
    minNEMF = cms.untracked.double(0.0),
    minNHEF = cms.untracked.double(0.0),
    n90Hits = cms.untracked.double(1),
    nameForEff = cms.untracked.bool(True),
    pathFilter = cms.untracked.vstring('HLT_CaloJet', 
        'HLT_PFJet', 
        'HLT_PFNoPUJet', 
        'HLT_DiPFJetAve', 
        'HLT_DiCaloJetAve', 
        'HLT_PFMET', 
        'HLT_PFchMET', 
        'HLT_MET', 
        'HLT_CaloMET'),
    pathPairs = cms.VPSet(cms.PSet(
        denompathname = cms.string('HLT_PFJet40_v'),
        pathname = cms.string('HLT_PFJet60_v')
    ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet60_v'),
            pathname = cms.string('HLT_PFJet80_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet80_v'),
            pathname = cms.string('HLT_PFJet140_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet140_v'),
            pathname = cms.string('HLT_PFJet200_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet200_v'),
            pathname = cms.string('HLT_PFJet260_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet260_v'),
            pathname = cms.string('HLT_PFJet320_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet320_v'),
            pathname = cms.string('HLT_PFJet400_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet400_v'),
            pathname = cms.string('HLT_PFJet450_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet450_v'),
            pathname = cms.string('HLT_PFJet500_v')
        )),
    pathRejectKeyword = cms.untracked.vstring('dEdx', 
        'NoBPTX'),
    pathnameMB = cms.untracked.vstring('HLT_Physics_v'),
    pathnameMuon = cms.untracked.vstring('HLT_IsoMu24_IterTrk02_v'),
    plotAll = cms.untracked.bool(True),
    plotEff = cms.untracked.bool(True),
    processname = cms.string('HLT'),
    runStandalone = cms.untracked.bool(False),
    triggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    triggerSummaryLabel = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    verbose = cms.untracked.bool(False)
)


process.jetMETHLTOfflineSourceAK8 = cms.EDAnalyzer("JetMETHLTOfflineSource",
    CaloJetCollectionLabel = cms.InputTag("ak4CaloJets"),
    CaloJetCorLabel = cms.InputTag("ak4CaloL1FastL2L3ResidualCorrector"),
    CaloMETCollectionLabel = cms.InputTag("caloMet"),
    JetIDParams = cms.PSet(
        ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        hbheRecHitsColl = cms.InputTag("hbhereco"),
        hfRecHitsColl = cms.InputTag("hfreco"),
        hoRecHitsColl = cms.InputTag("horeco"),
        useRecHits = cms.bool(True)
    ),
    PFJetCollectionLabel = cms.InputTag("ak4PFJets"),
    PFJetCorLabel = cms.InputTag("ak4PFL1FastL2L3ResidualCorrector"),
    PFMETCollectionLabel = cms.InputTag("pfMet"),
    dirname = cms.untracked.string('HLT/JetMET/AK8'),
    fEMF = cms.untracked.double(0.01),
    fHPD = cms.untracked.double(0.98),
    feta = cms.untracked.double(2.6),
    maxCEMF = cms.untracked.double(1.0),
    maxCHEF = cms.untracked.double(1.0),
    maxNEMF = cms.untracked.double(1.0),
    maxNHEF = cms.untracked.double(1.0),
    minCEMF = cms.untracked.double(0.0),
    minCHEF = cms.untracked.double(0.0),
    minNEMF = cms.untracked.double(0.0),
    minNHEF = cms.untracked.double(0.0),
    n90Hits = cms.untracked.double(1),
    nameForEff = cms.untracked.bool(True),
    pathFilter = cms.untracked.vstring('HLT_AK8PFJet'),
    pathPairs = cms.VPSet(cms.PSet(
        denompathname = cms.string('HLT_AK8PFJet40_v'),
        pathname = cms.string('HLT_AK8PFJet60_v')
    ), 
        cms.PSet(
            denompathname = cms.string('HLT_AK8PFJet60_v'),
            pathname = cms.string('HLT_AK8PFJet80_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_AK8PFJet80_v'),
            pathname = cms.string('HLT_AK8PFJet140_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_AK8PFJet140_v'),
            pathname = cms.string('HLT_AK8PFJet200_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_AK8PFJet200_v'),
            pathname = cms.string('HLT_AK8PFJet260_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_AK8PFJet260_v'),
            pathname = cms.string('HLT_AK8PFJet320_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_AK8PFJet320_v'),
            pathname = cms.string('HLT_AK8PFJet400_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_AK8PFJet400_v'),
            pathname = cms.string('HLT_AK8PFJet450_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_AK8PFJet450_v'),
            pathname = cms.string('HLT_AK8PFJet500_v')
        )),
    pathRejectKeyword = cms.untracked.vstring('dEdx', 
        'NoBPTX'),
    pathnameMB = cms.untracked.vstring('HLT_Physics_v'),
    pathnameMuon = cms.untracked.vstring('HLT_IsoMu24_IterTrk02_v'),
    plotAll = cms.untracked.bool(True),
    plotEff = cms.untracked.bool(True),
    processname = cms.string('HLT'),
    runStandalone = cms.untracked.bool(False),
    triggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    triggerSummaryLabel = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    verbose = cms.untracked.bool(False)
)


process.muonCosmicGlbSegmentAnalyzer = cms.EDAnalyzer("SegmentTrackAnalyzer",
    MuTrackCollection = cms.InputTag("globalCosmicMuons"),
    SegmentsTrackAssociatorParameters = cms.PSet(
        SelectedSegments = cms.untracked.InputTag("SelectedSegments"),
        segmentsCSC = cms.untracked.InputTag("cscSegments"),
        segmentsDt = cms.untracked.InputTag("dt4DSegments")
    ),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    etaBin = cms.int32(100),
    etaMax = cms.double(3.0),
    etaMin = cms.double(-3.0),
    phiBin = cms.int32(100),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(200),
    ptMax = cms.double(200.0),
    ptMin = cms.double(0.0)
)


process.muonCosmicSeedAnalyzer = cms.EDAnalyzer("MuonSeedsAnalyzer",
    EtaBin = cms.int32(100),
    EtaMax = cms.double(3.0),
    EtaMin = cms.double(-3.0),
    PhiBin = cms.int32(100),
    PhiMax = cms.double(3.2),
    PhiMin = cms.double(-3.2),
    RecHitBin = cms.int32(25),
    RecHitMax = cms.double(25.0),
    RecHitMin = cms.double(0.0),
    SeedCollection = cms.InputTag("CosmicMuonSeed"),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    ThetaBin = cms.int32(100),
    ThetaMax = cms.double(3.2),
    ThetaMin = cms.double(0.0),
    debug = cms.bool(False),
    etaErrBin = cms.int32(200),
    etaErrMax = cms.double(0.5),
    etaErrMin = cms.double(0.0),
    pErrBin = cms.int32(200),
    pErrMax = cms.double(200.0),
    pErrMin = cms.double(0.0),
    phiErrBin = cms.int32(160),
    phiErrMax = cms.double(3.2),
    phiErrMin = cms.double(0.0),
    pxyzErrBin = cms.int32(100),
    pxyzErrMax = cms.double(100.0),
    pxyzErrMin = cms.double(-100.0),
    seedPtBin = cms.int32(1000),
    seedPtMax = cms.double(200.0),
    seedPtMin = cms.double(0.0),
    seedPxyzBin = cms.int32(100),
    seedPxyzMax = cms.double(50.0),
    seedPxyzMin = cms.double(-50.0)
)


process.muonCosmicStaSegmentAnalyzer = cms.EDAnalyzer("SegmentTrackAnalyzer",
    MuTrackCollection = cms.InputTag("cosmicMuons"),
    SegmentsTrackAssociatorParameters = cms.PSet(
        SelectedSegments = cms.untracked.InputTag("SelectedSegments"),
        segmentsCSC = cms.untracked.InputTag("cscSegments"),
        segmentsDt = cms.untracked.InputTag("dt4DSegments")
    ),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    etaBin = cms.int32(100),
    etaMax = cms.double(3.0),
    etaMin = cms.double(-3.0),
    phiBin = cms.int32(100),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(200),
    ptMax = cms.double(200.0),
    ptMin = cms.double(0.0)
)


process.muonEnergyDepositAnalyzer = cms.EDAnalyzer("MuonEnergyDepositAnalyzer",
    AlgoName = cms.string('muons'),
    MuonCollection = cms.InputTag("muons"),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    debug = cms.bool(False),
    emS9SizeBin = cms.int32(100),
    emS9SizeMax = cms.double(4.0),
    emS9SizeMin = cms.double(0.0),
    emSizeBin = cms.int32(100),
    emSizeMax = cms.double(4.0),
    emSizeMin = cms.double(0.0),
    hadS9SizeBin = cms.int32(200),
    hadS9SizeMax = cms.double(10.0),
    hadS9SizeMin = cms.double(0.0),
    hadSizeBin = cms.int32(200),
    hadSizeMax = cms.double(10.0),
    hadSizeMin = cms.double(0.0),
    hoS9SizeBin = cms.int32(100),
    hoS9SizeMax = cms.double(4.0),
    hoS9SizeMin = cms.double(0.0),
    hoSizeBin = cms.int32(100),
    hoSizeMax = cms.double(4.0),
    hoSizeMin = cms.double(0.0)
)


process.muonIdDQM = cms.EDAnalyzer("MuonIdDQM",
    baseFolder = cms.untracked.string('Muons/MuonIdDQM'),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    inputMuonCollection = cms.InputTag("muons"),
    useGlobalMuons = cms.untracked.bool(True),
    useGlobalMuonsNotTrackerMuons = cms.untracked.bool(False),
    useTrackerMuons = cms.untracked.bool(True),
    useTrackerMuonsNotGlobalMuons = cms.untracked.bool(True)
)


process.muonKinVsEtaAnalyzer = cms.EDAnalyzer("MuonKinVsEtaAnalyzer",
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    MuonCollection = cms.InputTag("muons"),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    VertexLabel = cms.InputTag("offlinePrimaryVertices"),
    chiBin = cms.int32(100),
    chiMax = cms.double(20.0),
    chiMin = cms.double(0.0),
    chiprobMax = cms.double(1.0),
    chiprobMin = cms.double(0.0),
    etaBMax = cms.double(1.1),
    etaBMin = cms.double(0.0),
    etaBin = cms.int32(100),
    etaECMax = cms.double(2.4),
    etaECMin = cms.double(0.9),
    etaMax = cms.double(3.0),
    etaMin = cms.double(-3.0),
    etaOvlpMax = cms.double(1.1),
    etaOvlpMin = cms.double(0.9),
    folder = cms.string('Muons/MuonKinVsEtaAnalyzer'),
    pBin = cms.int32(100),
    pMax = cms.double(100.0),
    pMin = cms.double(0.0),
    phiBin = cms.int32(100),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(100),
    ptMax = cms.double(100.0),
    ptMin = cms.double(0.0)
)


process.muonRecoAnalyzer = cms.EDAnalyzer("MuonRecoAnalyzer",
    IsminiAOD = cms.bool(False),
    MuonCollection = cms.InputTag("muons"),
    ServiceParameters = cms.PSet(
        CSCLayers = cms.untracked.bool(True),
        GEMLayers = cms.untracked.bool(False),
        ME0Layers = cms.bool(False),
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    chi2Bin = cms.int32(100),
    chi2Max = cms.double(20),
    chi2Min = cms.double(0),
    etaBin = cms.int32(100),
    etaMax = cms.double(3.0),
    etaMin = cms.double(-3.0),
    folder = cms.string('Muons/MuonRecoAnalyzer'),
    pBin = cms.int32(500),
    pMax = cms.double(500.0),
    pMin = cms.double(0.0),
    pResBin = cms.int32(50),
    pResMax = cms.double(0.01),
    pResMin = cms.double(-0.01),
    phiBin = cms.int32(100),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(500),
    ptMax = cms.double(500.0),
    ptMin = cms.double(0.0),
    rhBin = cms.int32(25),
    rhMax = cms.double(1.001),
    rhMin = cms.double(0.0),
    thetaBin = cms.int32(100),
    thetaMax = cms.double(3.2),
    thetaMin = cms.double(0.0),
    tunePBin = cms.int32(100),
    tunePMax = cms.double(1.0),
    tunePMin = cms.double(-1.0)
)


process.qcdPhotonsCosmicDQM = cms.EDAnalyzer("QcdPhotonsDQM",
    barrelRecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    endcapRecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    jetCollection = cms.InputTag("ak4PFJets"),
    minJetPt = cms.double(5.0),
    minPhotonEt = cms.double(25.0),
    photonCollection = cms.InputTag("gedPhotons"),
    plotJetMaxEta = cms.double(5.0),
    plotPhotonMaxEt = cms.double(200.0),
    plotPhotonMaxEta = cms.double(5.0),
    plotTheseTriggersToo = cms.vstring('HLT_Photon20', 
        'HLT_Photon25', 
        'HLT_Photon30', 
        'HLT_Photon50', 
        'HLT_DoublePhoton'),
    requirePhotonFound = cms.bool(True),
    trigTag = cms.untracked.InputTag("TriggerResults","","HLT"),
    triggerPathToPass = cms.string('HLT_Photon'),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.rawTask = cms.EDAnalyzer("RawTask",
    calibProcessing = cms.untracked.bool(False),
    debug = cms.untracked.int32(0),
    mtype = cms.untracked.bool(True),
    name = cms.untracked.string('RawTask'),
    ptype = cms.untracked.int32(1),
    runkeyName = cms.untracked.string('cosmic_run'),
    runkeyVal = cms.untracked.int32(2),
    subsystem = cms.untracked.string('Hcal'),
    tagFEDs = cms.untracked.InputTag("rawDataCollector"),
    tagReport = cms.untracked.InputTag("hcalDigis"),
    thresh_calib_nbadq = cms.untracked.int32(5000)
)


process.recHitTask = cms.EDAnalyzer("RecHitTask",
    debug = cms.untracked.int32(0),
    mtype = cms.untracked.bool(True),
    name = cms.untracked.string('RecHitTask'),
    ptype = cms.untracked.int32(1),
    runkeyName = cms.untracked.string('cosmic_run'),
    runkeyVal = cms.untracked.int32(2),
    subsystem = cms.untracked.string('Hcal'),
    tagHBHE = cms.untracked.InputTag("hbhereco"),
    tagHF = cms.untracked.InputTag("hfreco"),
    tagHO = cms.untracked.InputTag("horeco"),
    tagRaw = cms.untracked.InputTag("rawDataCollector"),
    thresh_unihf = cms.untracked.double(0.2)
)


process.rpcDcsInfo = cms.EDAnalyzer("RPCDcsInfo",
    ScalersRawToDigiLabel = cms.InputTag("scalersRawToDigi"),
    dcsInfoFolder = cms.untracked.string('DCSInfo'),
    subSystemFolder = cms.untracked.string('RPC')
)


process.rpcEfficiency = cms.EDAnalyzer("RPCEfficiency",
    DuplicationCorrection = cms.untracked.int32(1),
    EffRootFileName = cms.untracked.string('/tmp/cimmino/RPCEfficiencyFIRST.root'),
    EffSaveRootFile = cms.untracked.bool(False),
    EffSaveRootFileEventsInterval = cms.untracked.int32(100),
    MaxD = cms.untracked.double(80.0),
    MaxDrb4 = cms.untracked.double(150.0),
    MinCosAng = cms.untracked.double(0.99),
    RecHitLabel = cms.InputTag("rpcRecHits"),
    cscSegments = cms.InputTag("cscSegments"),
    debug = cms.untracked.bool(False),
    dt4DSegments = cms.InputTag("dt4DSegments"),
    inclcsc = cms.untracked.bool(True),
    incldt = cms.untracked.bool(True),
    incldtMB4 = cms.untracked.bool(True),
    inves = cms.untracked.bool(True),
    rangestrips = cms.untracked.double(1.0),
    rangestripsRB4 = cms.untracked.double(4.0)
)


process.rpcEventInfo = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('RPC')
)


process.rpcFEDIntegrity = cms.EDAnalyzer("RPCFEDIntegrity",
    NumberOfFED = cms.untracked.int32(3),
    RPCPrefixDir = cms.untracked.string('RPC/FEDIntegrity'),
    RPCRawCountsInputTag = cms.untracked.InputTag("muonRPCDigis")
)


process.rpcdigidqm = cms.EDAnalyzer("RPCMonitorDigi",
    GlobalFolder = cms.untracked.string('SummaryHistograms'),
    MuonEtaCut = cms.untracked.double(1.9),
    MuonFolder = cms.untracked.string('Muon'),
    MuonLabel = cms.InputTag("muons"),
    MuonPtCut = cms.untracked.double(3.0),
    NoiseFolder = cms.untracked.string('AllHits'),
    RPCFolder = cms.untracked.string('RPC'),
    RecHitLabel = cms.InputTag("rpcRecHits"),
    RootFileName = cms.untracked.string('RPCMonitorDigi.root'),
    SaveRootFile = cms.untracked.bool(False),
    ScalersRawToDigiLabel = cms.InputTag("scalersRawToDigi"),
    UseMuon = cms.untracked.bool(True),
    UseRollInfo = cms.untracked.bool(False)
)


process.rpcrechitprobability = cms.EDAnalyzer("RPCRecHitProbability",
    GlobalFolder = cms.untracked.string('SummaryHistograms/RecHits'),
    MuonEtaCut = cms.untracked.double(1.9),
    MuonFolder = cms.untracked.string('Muon'),
    MuonLabel = cms.InputTag("muons"),
    MuonPtCut = cms.untracked.double(3.0),
    RPCFolder = cms.untracked.string('RPC'),
    RootFileName = cms.untracked.string('RPCRecHitProbabilityDQM.root'),
    SaveRootFile = cms.untracked.bool(False),
    ScalersRawToDigiLabel = cms.InputTag("scalersRawToDigi")
)


process.siStripFEDCheck = cms.EDAnalyzer("SiStripFEDCheckPlugin",
    CheckChannelLengths = cms.untracked.bool(True),
    CheckChannelPacketCodes = cms.untracked.bool(True),
    CheckChannelStatus = cms.untracked.bool(True),
    CheckFELengths = cms.untracked.bool(True),
    DirName = cms.untracked.string('SiStrip/FEDIntegrity/'),
    DoPayloadChecks = cms.untracked.bool(True),
    HistogramUpdateFrequency = cms.untracked.uint32(0),
    LSBin = cms.int32(5000),
    LSMax = cms.double(5000.5),
    LSMin = cms.double(0.5),
    PrintDebugMessages = cms.untracked.bool(False),
    RawDataTag = cms.InputTag("source"),
    WriteDQMStore = cms.untracked.bool(False),
    doPLOTfedFatalErrors = cms.bool(True),
    doPLOTfedNonFatalErrors = cms.bool(True),
    doPLOTfedsPresent = cms.bool(True),
    doPLOTnFEDinVsLS = cms.bool(False),
    doPLOTnFEDinWdataVsLS = cms.bool(False)
)


process.siStripFEDMonitor = cms.EDAnalyzer("SiStripFEDMonitorPlugin",
    APVAddressErrorBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    APVErrorBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    AnyDAQProblemsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    AnyFEDErrorsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    AnyFEProblemsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    ApveAddressHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    BadAPVStatusBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadActiveChannelStatusBitsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    BadChannelStatusBitsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    BadDAQCRCsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadDAQPacketHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadFEDCRCsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadIDsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadMajorityAddressesDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadMajorityAddressesHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    BadMajorityInPartitionHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    CorruptBuffersHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    DataMissingHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    DataPresentHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    ErrorFractionByLumiBlockHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FEMissingDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FEMissingHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FEOverflowsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FEOverflowsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FETimeDiffTECBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FETimeDiffTECFHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FETimeDiffTIBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FETimeDiffTOBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FETimeDiffvsDBXHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FeMajAddressHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FeMajFracTECBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FeMajFracTECFHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FeMajFracTIBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FeMajFracTOBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FedErrorsVsIdHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FedEventSizeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FedIdVsApvIdHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FedMaxEventSizevsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FillAllDetailedHistograms = cms.untracked.bool(False),
    FillWithEventNumber = cms.untracked.bool(False),
    FullDebugMode = cms.untracked.bool(False),
    HistogramFolderName = cms.untracked.string('ReadoutView'),
    InvalidBuffersHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    MedianAPV0HistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False),
        Max = cms.untracked.double(1024),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(256)
    ),
    MedianAPV1HistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False),
        Max = cms.untracked.double(1024),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(256)
    ),
    OOSBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    PrintDebugMessages = cms.untracked.uint32(0),
    RawDataTag = cms.untracked.InputTag("rawDataCollector"),
    TimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False),
        Max = cms.untracked.double(3600),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(600)
    ),
    TkHistoMapHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    TopFolderName = cms.untracked.string('SiStrip'),
    UnlockedBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nAPVAddressErrorHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nAPVAddressErrorvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    nAPVErrorHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nAPVErrorvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    nAPVStatusBitHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nAPVStatusBitvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nBadActiveChannelStatusBitsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nBadChannelStatusBitsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nFEDCorruptBuffersHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(441),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(441)
    ),
    nFEDCorruptBuffersvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nFEDDAQProblemsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(441),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(441)
    ),
    nFEDErrorsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(440.5),
        Min = cms.untracked.double(-0.5),
        NBins = cms.untracked.uint32(441)
    ),
    nFEDErrorsvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    nFEDsWithFEBadMajorityAddressesHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(441),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(441)
    ),
    nFEDsWithFEOverflowsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(441),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(441)
    ),
    nFEDsWithFEProblemsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(441),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(441)
    ),
    nFEDsWithFEProblemsvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nFEDsWithMissingFEsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(441),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(441)
    ),
    nOutOfSyncHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nOutOfSyncvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    nTotalBadActiveChannelsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nTotalBadActiveChannelsvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(3600),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(600)
    ),
    nTotalBadChannelsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nTotalBadChannelsvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(3600),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(600)
    ),
    nUnconnectedChannelsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(8000),
        Min = cms.untracked.double(6000),
        NBins = cms.untracked.uint32(250)
    ),
    nUnlockedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nUnlockedvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    )
)


process.singleTopElectronMediumDQM = cms.EDAnalyzer("SingleTopTChannelLeptonDQM",
    preselection = cms.PSet(

    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('presel'),
        select = cms.string('!isFake && ndof >= 4 && abs(z)<24. && position.Rho <= 2.0'),
        src = cms.InputTag("offlinePrimaryVertices")
    ), 
        cms.PSet(
            label = cms.string('elecs/pf:step0'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string("pt>30 & abs(eta)<2.5 & abs(gsfElectronRef.gsfTrack.d0)<0.02 && gsfElectronRef.gsfTrack.hitPattern().numberOfHits(\'MISSING_INNER_HITS\') <= 0 && (abs(gsfElectronRef.superCluster.eta) <= 1.4442 || abs(gsfElectronRef.superCluster.eta) >= 1.5660) && (gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.1"),
            src = cms.InputTag("pfIsolatedElectronsEI")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string('pt>30 & abs(eta)<4.5 & numberOfDaughters>1 & ((abs(eta)>2.4) || ( chargedHadronEnergyFraction > 0 & chargedMultiplicity>0 & chargedEmEnergyFraction<0.99)) & neutralEmEnergyFraction < 0.99 & neutralHadronEnergyFraction < 0.99'),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step2'),
            max = cms.int32(2),
            min = cms.int32(2),
            select = cms.string('pt>30 & abs(eta)<4.5 & numberOfDaughters>1 & ((abs(eta)>2.4) || ( chargedHadronEnergyFraction > 0 & chargedMultiplicity>0 & chargedEmEnergyFraction<0.99)) & neutralEmEnergyFraction < 0.99 & neutralHadronEnergyFraction < 0.99'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/SingleTopElectronMediumDQM/'),
        elecExtras = cms.PSet(
            select = cms.string('pt>25')
        ),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                combinedSecondaryVertex = cms.PSet(
                    label = cms.InputTag("pfCombinedInclusiveSecondaryVertexV2BJetTags"),
                    workingPoint = cms.double(0.97)
                ),
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("pfSimpleSecondaryVertexHighEffBJetTags"),
                    workingPoint = cms.double(2.05)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("pfTrackCountingHighEffBJetTags"),
                    workingPoint = cms.double(1.25)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("pfTrackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.41)
                )
            ),
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>15 & abs(eta)<2.5')
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            elecs_gsf = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMetEI"),
            muons = cms.InputTag("pfIsolatedMuonsEI"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.singleTopMuonMediumDQM = cms.EDAnalyzer("SingleTopTChannelLeptonDQM",
    preselection = cms.PSet(

    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('presel'),
        select = cms.string('!isFake && ndof >= 4 && abs(z)<24. && position.Rho <= 2.0 '),
        src = cms.InputTag("offlinePrimaryVertices")
    ), 
        cms.PSet(
            label = cms.string('muons/pf:step0'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string('muonRef.pt>20 & abs(muonRef.eta)<2.1 & muonRef.isNonnull & muonRef.innerTrack.isNonnull & muonRef.isGlobalMuon & muonRef.isTrackerMuon & muonRef.innerTrack.numberOfValidHits>10 & muonRef.globalTrack.hitPattern.numberOfValidMuonHits>0 & muonRef.globalTrack.normalizedChi2<10 & muonRef.innerTrack.hitPattern.pixelLayersWithMeasurement>=1 &  muonRef.numberOfMatches>1 & abs(muonRef.innerTrack.dxy)<0.02 & (muonRef.pfIsolationR04.sumChargedHadronPt + muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt)/muonRef.pt < 0.15'),
            src = cms.InputTag("pfIsolatedMuonsEI")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string(' pt>30 & abs(eta)<4.5 & numberOfDaughters>1 & ((abs(eta)>2.4) || ( chargedHadronEnergyFraction > 0 & chargedMultiplicity>0 & chargedEmEnergyFraction<0.99)) & neutralEmEnergyFraction < 0.99 & neutralHadronEnergyFraction < 0.99'),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step2'),
            max = cms.int32(2),
            min = cms.int32(2),
            select = cms.string(' pt>30 & abs(eta)<4.5 & numberOfDaughters>1 & ((abs(eta)>2.4) || ( chargedHadronEnergyFraction > 0 & chargedMultiplicity>0 & chargedEmEnergyFraction<0.99)) & neutralEmEnergyFraction < 0.99 & neutralHadronEnergyFraction < 0.99'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/SingleTopMuonMediumDQM/'),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                combinedSecondaryVertex = cms.PSet(
                    label = cms.InputTag("pfCombinedInclusiveSecondaryVertexV2BJetTags"),
                    workingPoint = cms.double(0.97)
                ),
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("pfSimpleSecondaryVertexHighEffBJetTags"),
                    workingPoint = cms.double(2.05)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("pfTrackCountingHighEffBJetTags"),
                    workingPoint = cms.double(1.25)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("pfTrackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.41)
                )
            ),
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>15 & abs(eta)<2.5')
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            select = cms.string('abs(muonRef.eta)<2.1')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            elecs_gsf = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMetEI"),
            muons = cms.InputTag("pfIsolatedMuonsEI"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.susyDQM = cms.EDAnalyzer("RecoSusyDQM",
    RAL_elec_iso_cut = cms.double(0.5),
    RAL_elec_pt_cut = cms.double(7.0),
    RAL_jet_eta_cut = cms.double(3.0),
    RAL_jet_max_emf_cut = cms.double(0.95),
    RAL_jet_min_emf_cut = cms.double(0.05),
    RAL_jet_pt_cut = cms.double(30.0),
    RAL_jet_sum_pt_cut = cms.double(100.0),
    RAL_met_cut = cms.double(50.0),
    RAL_muon_iso_cut = cms.double(0.1),
    RAL_muon_pt_cut = cms.double(7.0),
    elec_d0_cut = cms.double(0.2),
    elec_eta_cut = cms.double(2.5),
    elec_mva_cut = cms.double(0.1),
    electronCollection = cms.InputTag("gedGsfElectrons"),
    jetCollection = cms.InputTag("ak4CaloJets"),
    metCollection = cms.InputTag("caloMet"),
    moduleName = cms.untracked.string('Physics/Susy'),
    muonCollection = cms.InputTag("muons"),
    muon_d0_cut = cms.double(0.2),
    muon_eta_cut = cms.double(2.4),
    muon_nChi2_cut = cms.double(10),
    muon_nHits_cut = cms.double(11),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.topSingleElectronMediumDQM = cms.EDAnalyzer("TopSingleLeptonDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('elecs:step0'),
        max = cms.int32(1),
        min = cms.int32(1),
        select = cms.string("pt>30 & abs(eta)<2.5 & abs(gsfElectronRef.gsfTrack.d0)<0.02 & gsfElectronRef.gsfTrack.hitPattern().numberOfHits(\'MISSING_INNER_HITS\') <= 0 & (abs(gsfElectronRef.superCluster.eta) <= 1.4442 || abs(gsfElectronRef.superCluster.eta) >= 1.5660) & (gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.1"),
        src = cms.InputTag("pfIsolatedElectronsEI")
    ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            min = cms.int32(1),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step2'),
            min = cms.int32(2),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step3'),
            min = cms.int32(3),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step4'),
            min = cms.int32(4),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopSingleElectronMediumDQM/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
            select = cms.string('pt>20 & abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                cvsVertex = cms.PSet(
                    label = cms.InputTag("pfCombinedInclusiveSecondaryVertexV2BJetTags"),
                    workingPoint = cms.double(0.97)
                )
            ),
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>30 & abs(eta)<2.5 ')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("caloMet", "tcMet", "pfMet"),
            muons = cms.InputTag("pfIsolatedMuonsEI"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.topSingleMuonMediumDQM = cms.EDAnalyzer("TopSingleLeptonDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('muons:step0'),
        max = cms.int32(1),
        min = cms.int32(1),
        select = cms.string('muonRef.isNonnull && muonRef.isGlobalMuon && muonRef.isPFMuon && muonRef.globalTrack.normalizedChi2 < 10. && muonRef.globalTrack.hitPattern.numberOfValidMuonHits > 0 && muonRef.numberOfMatchedStations > 1 && muonRef.innerTrack.hitPattern.numberOfValidPixelHits > 0 && muonRef.innerTrack.hitPattern.trackerLayersWithMeasurement > 8&&(muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.12 && pt>20 & abs(eta)<2.1'),
        src = cms.InputTag("pfIsolatedMuonsEI")
    ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            min = cms.int32(1),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step2'),
            min = cms.int32(2),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step3'),
            min = cms.int32(3),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step4'),
            min = cms.int32(4),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopSingleMuonMediumDQM/'),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                cvsVertex = cms.PSet(
                    label = cms.InputTag("pfCombinedInclusiveSecondaryVertexV2BJetTags"),
                    workingPoint = cms.double(0.97)
                )
            ),
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>30 & abs(eta)<2.5 ')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2'),
            select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && pt>20 & abs(eta)<2.1')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("caloMet", "tcMet", "pfMet"),
            muons = cms.InputTag("pfIsolatedMuonsEI"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.write_RECO = cms.OutputModule("PoolOutputModule",
    dataset = cms.untracked.PSet(
        dataTier = cms.untracked.string('RECO'),
        filterName = cms.untracked.string('')
    ),
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    fileName = cms.untracked.string('output.root'),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'keep *_logErrorHarvester_*_*', 
        'keep PixelDigiedmDetSetVector_siPixelDigis_*_*', 
        'keep *_siStripDigis_*_*', 
        'keep *_siStripZeroSuppression_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelRecHits_*_*', 
        'keep *_siStripRecHits_*_*', 
        'keep *_siStripMatchedRecHits_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsT0Seg_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hfprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_castorDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep HcalUnpackerReport_castorDigis_*_*', 
        'keep HcalUnpackerReport_hcalDigis_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep ESDataFramesSorted_ecalPreshowerDigis_*_*', 
        'keep *_islandBasicClusters_*_*', 
        'keep *_fixedMatrixBasicClusters_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_uncleanedHybridSuperClusters_*_*', 
        'keep *_cosmicBasicClusters_*_*', 
        'keep *_cosmicSuperClusters_*_*', 
        'drop recoSuperClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_islandSuperClusters_islandBarrelSuperClusters_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_correctedFixedMatrixSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_fixedMatrixSuperClustersWithPreshower_*_*', 
        'keep *_correctedEndcapSuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_preshowerClusterShape_*_*', 
        'keep recoPreshowerClusterShapes_fixedMatrixPreshowerClusterShape_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectrons_gedGsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep recoRecoEcalCandidates_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5_*_*', 
        'keep recoTracks_cosmictrackfinderP5_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_splittedTracksP5_*_*', 
        'keep recoTrackExtras_splittedTracksP5_*_*', 
        'keep TrackingRecHitsOwned_splittedTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Top_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Top_*_*', 
        'keep recoTracks_cosmictrackfinderP5Top_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Top_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Top_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_ctfWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracksP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracksP5Bottom_*_*', 
        'keep recoTracks_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTrackExtras_cosmictrackfinderP5Bottom_*_*', 
        'keep TrackingRecHitsOwned_cosmictrackfinderP5Bottom_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTrackExtras_regionalCosmicTracks_*_*', 
        'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxTruncated40CTF_*_*', 
        'keep *_dedxHitInfoCTF_*_*', 
        'keep *_dedxHarmonic2CTF_*_*', 
        'keep *_dedxTruncated40CosmicTF_*_*', 
        'keep *_dedxHitInfoCosmicTF_*_*', 
        'keep *_dedxHarmonic2CosmicTF_*_*', 
        'keep recoTracks_cosmicDCTracks_*_*', 
        'keep recoTrackExtras_cosmicDCTracks_*_*', 
        'keep TrackingRecHitsOwned_cosmicDCTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRhoAll_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep *_fixedGridRhoFastjetAllTmp_*_*', 
        'keep *_fixedGridRhoFastjetAllCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentral_*_*', 
        'keep *_fixedGridRhoFastjetCentralCalo_*_*', 
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*', 
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoPFMETs_pfMetEI_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep recoEcalHaloData_EcalHaloData_*_*', 
        'keep recoGlobalHaloData_GlobalHaloData_*_*', 
        'keep recoHcalHaloData_HcalHaloData_*_*', 
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep *_CosmicMuonSeedEndCapsOnly_*_*', 
        'keep *_CosmicMuonSeedWitht0Correction_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_globalCosmicSplitMuons_*_*', 
        'keep recoTrackExtras_globalCosmicSplitMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicSplitMuons_*_*', 
        'keep recoMuons_splitMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_splitMuons_*_*', 
        'keep recoTracks_cosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_cosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsNoRPC_*_*', 
        'keep recoTracks_globalCosmicMuonsNoRPC_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsNoRPC_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsNoRPC_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons1Leg_*_*', 
        'keep recoTracks_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_cosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsWitht0Correction_*_*', 
        'keep recoTracks_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoTrackExtras_globalCosmicMuonsWitht0Correction_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuonsWitht0Correction_*_*', 
        'keep recoMuons_muonsWitht0Correction_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsWitht0Correction_*_*', 
        'keep recoTracks_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTrackExtras_cosmicMuonsEndCapsOnly_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuonsEndCapsOnly_*_*', 
        'keep recoTracks_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoTrackExtras_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep TrackingRecHitsOwned_globalBeamHaloMuonEndCapslOnly_*_*', 
        'keep recoMuons_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muonsBeamHaloEndCapsOnly_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoMuons_lhcSTAMuons_*_*', 
        'keep recoMuonTimeExtraedmValueMap_lhcSTAMuons_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5_*_*', 
        'keep recoTracks_ctfWithMaterialTracksBeamHaloMuon_*_*', 
        'keep recoTracks_ctfWithMaterialTracksP5LHCNavigation_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep *_offlinePrimaryVerticesWithBS_*_*', 
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_l1GtObjectMap_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*', 
        'keep L1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*', 
        'keep LumiScalerss_scalersRawToDigi_*_*', 
        'keep BeamSpotOnlines_scalersRawToDigi_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)


process.regionalCosmicTracksSeq = cms.Sequence(process.regionalCosmicTrackerSeedingLayers+process.regionalCosmicTrackerSeeds+process.regionalCosmicCkfTrackCandidates+process.regionalCosmicTracks)


process.doAlldEdXEstimatorsCTF = cms.Sequence(process.dedxTruncated40CTF+process.dedxHitInfoCTF+process.dedxHarmonic2CTF)


process.allmuonsWitht0Correction = cms.Sequence(process.muonsWitht0Correction)


process.seqALCARECOMuAlGlobalCosmics = cms.Sequence(process.ALCARECOMuAlGlobalCosmicsHLT+process.ALCARECOMuAlGlobalCosmicsDCSFilter+process.ALCARECOMuAlGlobalCosmics)


process.rpcefficiency = cms.Sequence(process.rpcEfficiency)


process.ALCARECOMuAlGlobalCosmicsDQM = cms.Sequence(process.ALCARECOMuAlGlobalCosmicsTrackingDQM)


process.seqALCARECOHcalCalHOCosmics = cms.Sequence(process.ALCARECOHcalCalHOCosmicHLT+process.hoCalibCosmicsProducer)


process.ALCARECOTkAlCosmicsCTF0TDQM = cms.Sequence(process.ALCARECOTkAlCosmicsCTF0TTrackingDQM+process.ALCARECOTkAlCosmicsCTF0TTkAlDQM)


process.csclocalreco = cms.Sequence(process.csc2DRecHits+process.cscSegments)


process.ALCARECOTkAlCosmicsRegional0TDQM = cms.Sequence(process.ALCARECOTkAlCosmicsRegional0TTrackingDQM+process.ALCARECOTkAlCosmicsRegional0TTkAlDQM)


process.ALCARECODTCalibSynchCosmicsDQM = cms.Sequence(process.dtPreCalibrationTaskAlcaCosmics+process.dtAlcaResolutionMonitorCosmics)


process.rpcTier0Source = cms.Sequence(process.rpcdigidqm+process.rpcrechitprobability+process.rpcDcsInfo+process.rpcefficiency+process.rpcEventInfo+process.rpcFEDIntegrity)


process.cosmicDCTracksSeq = cms.Sequence(process.cosmicDCSeeds+process.cosmicDCCkfTrackCandidates+process.cosmicDCTracks)


process.cosmicClusteringSequence = cms.Sequence(process.cosmicBasicClusters+process.cosmicSuperClusters)


process.STAmuontrackingforcosmics = cms.Sequence(process.CosmicMuonSeed+process.cosmicMuons)


process.vertexrecoCosmics = cms.Sequence(process.offlinePrimaryVertices)


process.doAlldEdXEstimatorsCTFP5LHC = cms.Sequence(process.dedxTruncated40CTFP5LHC+process.dedxHitInfoCTFP5LHC+process.dedxHarmonic2CTFP5LHC)


process.conversionSequence = cms.Sequence(process.conversions)


process.ctppsRawToDigi = cms.Sequence(process.totemTriggerRawToDigi+process.totemRPRawToDigi+process.ctppsDiamondRawToDigi)


process.dtlocalreco = cms.Sequence(process.dt1DRecHits+process.dt4DSegments)


process.STAmuontrackingforcosmicsWitht0Correction = cms.Sequence(process.CosmicMuonSeedWitht0Correction+process.cosmicMuonsWitht0Correction)


process.cscSources = cms.Sequence(process.dqmCSCClient)


process.SiStripDQMTier0 = cms.Sequence(process.APVPhases+process.consecutiveHEs+process.siStripFEDCheck+process.siStripFEDMonitor+process.SiStripMonitorDigi+process.SiStripMonitorCluster+process.SiStripMonitorTrack_ckf+process.MonitorTrackResiduals_ckf+process.dqmInfoSiStrip)


process.es_dqm_source_offline = cms.Sequence(process.ecalPreshowerRawDataTask+process.ecalPreshowerFEDIntegrityTask+process.ecalPreshowerIntegrityTask+process.ecalPreshowerOccupancyTask)


process.recoCaloTowersGR = cms.Sequence(process.towerMaker+process.towerMakerWithHO)


process.ALCARECOTkAlCosmicsCosmicTF0TDQM = cms.Sequence(process.ALCARECOTkAlCosmicsCosmicTF0TTrackingDQM+process.ALCARECOTkAlCosmicsCosmicTF0TTkAlDQM)


process.dtlocalrecoT0Seg = cms.Sequence(process.dt1DRecHits+process.dt4DSegments+process.dt4DSegmentsT0Seg)


process.pixeltrackerlocalreco = cms.Sequence(process.siPixelClusters+process.siPixelRecHits)


process.muontrackingforcosmics = cms.Sequence(process.STAmuontrackingforcosmics+process.globalCosmicMuons)


process.METDQMAnalyzerSequenceCosmics = cms.Sequence(process.caloMetDQMAnalyzer)


process.striptrackerlocalreco = cms.Sequence(process.siStripZeroSuppression+process.siStripClusters+process.siStripMatchedRecHits)


process.muonRecoLHC = cms.Sequence(process.ancientMuonSeed+process.standAloneMuons+process.lhcSTAMuons)


process.allmuonsNoRPC = cms.Sequence(process.muonsNoRPC)


process.L1TRawToDigi_Stage2 = cms.Sequence(process.bmtfDigis+process.emtfStage2Digis+process.caloStage2Digis+process.gmtStage2Digis+process.gtStage2Digis)


process.STAmuontrackingforcosmics1Leg = cms.Sequence(process.CosmicMuonSeed+process.cosmicMuons1Leg)


process.seqALCARECODtCalibCosmics = cms.Sequence(process.ALCARECODtCalibCosmicsHLTFilter)


process.beamhaloTracksSeq = cms.Sequence(process.beamhaloTrackerSeedingLayers+process.beamhaloTrackerSeeds+process.beamhaloTrackCandidates+process.beamhaloTracks)


process.hybridClusteringSequence = cms.Sequence(process.cleanedHybridSuperClusters+process.uncleanedHybridSuperClusters+process.hybridSuperClusters+process.correctedHybridSuperClusters+process.uncleanedOnlyCorrectedHybridSuperClusters)


process.muonlocalreco = cms.Sequence(process.dtlocalreco+process.csclocalreco+process.rpcRecHits)


process.jetMETHLTOfflineSource = cms.Sequence(process.jetMETHLTOfflineSourceAK4+process.jetMETHLTOfflineSourceAK8)


process.muonrecoforsplitcosmics = cms.Sequence(process.globalCosmicSplitMuons+process.splitMuons)


process.muontrackingforcosmicsWitht0Correction = cms.Sequence(process.STAmuontrackingforcosmicsWitht0Correction+process.globalCosmicMuonsWitht0Correction)


process.castorSources = cms.Sequence(process.castorOfflineMonitor)


process.egammaCosmicPhotonMonitors = cms.Sequence(process.cosmicPhotonAnalysis)


process.seqALCARECOTkAlCosmicsCosmicTF0T = cms.Sequence(process.ALCARECOTkAlCosmicsCosmicTF0T)


process.L1TRawToDigi_Stage1 = cms.Sequence(process.csctfDigis+process.dttfDigis+process.gtDigis+process.caloStage1Digis+process.caloStage1FinalDigis+process.caloStage1LegacyFormatDigis+process.gctDigis)


process.endOfProcess = cms.Sequence(process.MEtoEDMConverter)


process.jetDQMAnalyzerSequenceCosmics = cms.Sequence(process.jetDQMAnalyzerAk4CaloUncleaned)


process.standAloneCosmicMuonsMonitors = cms.Sequence(process.MonitorTrackSTACosmicMuons+process.MonitorTrackSTACosmicMuonsBarrel+process.MonitorTrackSTACosmicMuons1LegBarrel+process.MonitorTrackSTACosmicMuonsEndCaps+process.MonitorTrackLHCStandAloneMuonsBarrelOnly+process.MonitorTrackLHCStandAloneMuonsEndCapsOnly+process.MonitorTrackSTACosmicMuonsNoDriftBarrel)


process.ecal_dqm_source_offline = cms.Sequence(process.dqmInfoEcal+process.ecalMonitorTask+process.ecalFEDMonitor)


process.hcalOfflineSourceSequence = cms.Sequence(process.digiTask+process.recHitTask+process.rawTask)


process.photonIDSequence = cms.Sequence(process.PhotonIDProd)


process.ckfTracksFromConversions = cms.Sequence(process.conversionTrackCandidates+process.ckfOutInTracksFromConversions+process.ckfInOutTracksFromConversions)


process.muonTrackCosmicAnalyzers = cms.Sequence(process.standAloneCosmicMuonsMonitors+process.MonitorTrackTKCosmicMuons+process.MonitorTrackGLBCosmicMuons+process.MonitorTrackEfficiencySTACosmicMuons+process.MonitorTrackEfficiencyTkTracks)


process.doAlldEdXEstimatorsCosmicTF = cms.Sequence(process.dedxTruncated40CosmicTF+process.dedxHitInfoCosmicTF+process.dedxHarmonic2CosmicTF)


process.STAmuontrackingforcosmicsNoRPC = cms.Sequence(process.cosmicMuonsNoRPC)


process.seqALCARECOTkAlCosmicsCTF0T = cms.Sequence(process.ALCARECOTkAlCosmicsCTF0T)


process.ecalLocalRecoSequenceCosmics = cms.Sequence(process.ecalFixedAlphaBetaFitUncalibRecHit+process.ecalWeightUncalibRecHit+process.ecalDetIdToBeRecovered+process.ecalRecHit+process.ecalPreshowerRecHit)


process.doAllCosmicdEdXEstimators = cms.Sequence(process.doAlldEdXEstimatorsCTF+process.doAlldEdXEstimatorsCosmicTF+process.doAlldEdXEstimatorsCTFP5LHC)


process.muIsoDeposits_muons = cms.Sequence(process.muIsoDepositTk+process.muIsoDepositCalByAssociatorTowers+process.muIsoDepositJets)


process.muonrecoBeamHaloEndCapsOnly = cms.Sequence(process.CosmicMuonSeedEndCapsOnly+process.cosmicMuonsEndCapsOnly+process.globalBeamHaloMuonEndCapslOnly+process.muonsBeamHaloEndCapsOnly)


process.dtSourcesCosmics = cms.Sequence(process.dtDataIntegrityUnpacker+process.DTDataIntegrityTask+process.dtDCSByLumiMonitor+process.dtRunConditionVar+process.dtSegmentAnalysisMonitor+process.dtResolutionAnalysisMonitor+process.dtEfficiencyMonitor+process.dtTriggerEfficiencyMonitor+process.dqmInfoDT)


process.cosmicPhotonSequence = cms.Sequence(process.photonCore+process.photons)


process.cosmicConversionSequence = cms.Sequence(process.conversionSequence)


process.jetMETDQMOfflineSourceCosmic = cms.Sequence(process.AnalyzeSUSYDQM+process.jetDQMAnalyzerSequenceCosmics+process.METDQMAnalyzerSequenceCosmics)


process.TrackingDQMTier0 = cms.Sequence(process.TrackMon_cosmicTk+process.TrackMon_ckf+process.TrackEffMon_ckf+process.TrackSplitMonitor+(process.LocalRecoLogMessageMon)+(process.cosmicsSeedingLogMessageMon)+(process.cosmicsTrackCandidateLogMessageMon)+(process.cosmicsTrackLogMessageMon)+(process.dqmInfoTracking))


process.BeamHaloId = cms.Sequence(process.CSCHaloData+process.EcalHaloData+process.HcalHaloData+process.GlobalHaloData+process.BeamHaloSummary)


process.cosmictracksP5 = cms.Sequence(process.cosmicseedfinderP5+process.cosmicCandidateFinderP5+process.cosmictrackfinderCosmics+process.cosmictrackfinderP5+process.cosmicTrackSplitter+process.splittedTracksP5)


process.L1Reco = cms.Sequence(process.l1extraParticles)


process.siPixelOfflineDQM_cosmics_source = cms.Sequence(process.SiPixelHLTSource+process.SiPixelRawDataErrorSource+process.SiPixelDigiSource+process.SiPixelRecHitSource+process.SiPixelClusterSource+process.SiPixelTrackResidualSource_Cosmics+process.dqmInfo)


process.allmuons1Leg = cms.Sequence(process.muons1Leg)


process.combinatorialcosmicseedinglayersP5 = cms.Sequence(process.combinatorialcosmicseedingtripletsP5+process.combinatorialcosmicseedingpairsTOBP5+process.combinatorialcosmicseedingpairsTECposP5+process.combinatorialcosmicseedingpairsTECnegP5)


process.HLTTauDQMOffline = cms.Sequence(process.TauRefProducer+process.hltTauOfflineMonitor_PFTaus+process.hltTauOfflineMonitor_Inclusive)


process.muonCosmicAnalyzer = cms.Sequence(process.muonEnergyDepositAnalyzer+process.muonCosmicSeedAnalyzer+process.muonCosmicGlbSegmentAnalyzer+process.muonCosmicStaSegmentAnalyzer+process.muonRecoAnalyzer+process.muonKinVsEtaAnalyzer)


process.seqALCARECOTkAlCosmicsRegional0T = cms.Sequence(process.ALCARECOTkAlCosmicsRegional0T)


process.DQMOfflineCosmicsPreDPG = cms.Sequence(process.dqmDcsInfo+process.ecal_dqm_source_offline+process.hcalOfflineSourceSequence+process.SiStripDQMTier0+process.siPixelOfflineDQM_cosmics_source+process.dtSourcesCosmics+process.rpcTier0Source+process.cscSources+process.es_dqm_source_offline+process.castorSources)


process.dqmPhysicsCosmics = cms.Sequence(process.bphysicsOniaDQM+process.qcdPhotonsCosmicDQM+process.topSingleMuonMediumDQM+process.topSingleElectronMediumDQM+process.singleTopMuonMediumDQM+process.singleTopElectronMediumDQM+process.DiMuonDQM+process.DiElectronDQM+process.ElecMuonDQM+process.susyDQM+process.HiggsDQM+process.ExoticaDQM+process.B2GDQM)


process.hltMuonOfflineAnalyzers = cms.Sequence(process.barrelAnalyzer+process.endcapAnalyzer+process.allAnalyzer)


process.recoJetsGR = cms.Sequence(process.fixedGridRhoFastjetAllCalo+process.iterativeCone15CaloJets+process.kt4CaloJets+process.kt6CaloJets+process.iterativeCone5CaloJets+process.ak4CaloJets+process.ak7CaloJets+process.sisCone5CaloJets+process.sisCone7CaloJets)


process.muontrackingforcosmics1Leg = cms.Sequence(process.STAmuontrackingforcosmics1Leg+process.globalCosmicMuons1Leg)


process.L1TRawToDigi = cms.Sequence(process.L1TRawToDigi_Stage1+process.L1TRawToDigi_Stage2)


process.muontrackingforcosmicsNoRPC = cms.Sequence(process.STAmuontrackingforcosmicsNoRPC+process.globalCosmicMuonsNoRPC)


process.muonrecoforcosmicsWitht0Correction = cms.Sequence(process.muontrackingforcosmicsWitht0Correction+process.allmuonsWitht0Correction)


process.jetsCosmics = cms.Sequence(process.recoCaloTowersGR+process.recoJetsGR)


process.muonrecoforcosmics1Leg = cms.Sequence(process.muontrackingforcosmics1Leg+process.allmuons1Leg)


process.muonlocalrecoT0Seg = cms.Sequence(process.dtlocalrecoT0Seg+process.csclocalreco+process.rpcRecHits)


process.RawToDigi = cms.Sequence(process.L1TRawToDigi+process.siPixelDigis+process.siStripDigis+process.ecalDigis+process.ecalPreshowerDigis+process.hcalDigis+process.muonCSCDigis+process.muonDTDigis+process.muonRPCDigis+process.castorDigis+process.scalersRawToDigi+process.tcdsDigis+process.ctppsRawToDigi)


process.muonCosmicMonitors = cms.Sequence(process.muonTrackCosmicAnalyzers+process.dtSegmentsMonitor+process.cscMonitor+process.muonCosmicAnalyzer+process.muonIdDQM+process.dqmInfoMuons)


process.ctftracksP5 = cms.Sequence(process.combinatorialcosmicseedinglayersP5+process.combinatorialcosmicseedfinderP5+process.simpleCosmicBONSeedingLayers+process.simpleCosmicBONSeeds+process.combinedP5SeedsForCTF+process.ckfTrackCandidatesP5+process.ctfWithMaterialTracksCosmics+process.ctfWithMaterialTracksP5+process.ckfTrackCandidatesP5LHCNavigation+process.ctfWithMaterialTracksP5LHCNavigation)


process.tracksP5 = cms.Sequence(process.cosmictracksP5+process.ctftracksP5+process.doAllCosmicdEdXEstimators)


process.cosmicConversionTrackSequence = cms.Sequence(process.ckfTracksFromConversions)


process.egammarecoGlobal_cosmics = cms.Sequence(process.cosmicConversionTrackSequence)


process.offlineHLTSource = cms.Sequence(process.hltResults+process.egHLTOffDQMSource+process.hltMuonOfflineAnalyzers+process.HLTTauDQMOffline+process.jetMETHLTOfflineSource+process.dqmEnvHLT)


process.trackerlocalreco = cms.Sequence(process.pixeltrackerlocalreco+process.striptrackerlocalreco)


process.muonrecoforcosmicsNoRPC = cms.Sequence(process.muontrackingforcosmicsNoRPC+process.allmuonsNoRPC)


process.trackerCosmics = cms.Sequence(process.offlineBeamSpot+process.trackerlocalreco+process.MeasurementTrackerEvent+process.tracksP5)


process.calolocalrecoCosmics = cms.Sequence(process.ecalLocalRecoSequenceCosmics+process.hbhereco+process.hfreco+process.horeco+process.zdcreco)


process.ecalClustersCosmics = cms.Sequence(process.hybridClusteringSequence+process.cosmicClusteringSequence)


process.egammarecoCosmics_woElectrons = cms.Sequence(process.cosmicConversionSequence+process.cosmicPhotonSequence+process.photonIDSequence)


process.egammaCosmics = cms.Sequence(process.egammarecoGlobal_cosmics+process.egammarecoCosmics_woElectrons)


process.caloCosmics = cms.Sequence(process.calolocalrecoCosmics+process.ecalClustersCosmics)


process.metrecoCosmics = cms.Sequence(process.caloMet+process.caloMetBE+process.caloMetBEFO+process.muonMETValueMapProducer+process.caloMetM+process.hcalnoise+process.BeamHaloId)


process.muIsolation_muons = cms.Sequence(process.muIsoDeposits_muons)


process.muonsLocalRecoCosmics = cms.Sequence(process.muonlocalreco+process.muonlocalrecoT0Seg)


process.muIsolation = cms.Sequence(process.muIsolation_muons)


process.allmuons = cms.Sequence(process.glbTrackQual+process.tevMuons+process.muons+process.muIsolation)


process.triggerCosmicOfflineDQMSource = cms.Sequence(process.offlineHLTSource)


process.DQMOfflineCosmicsPrePOG = cms.Sequence(process.TrackingDQMTier0+process.muonCosmicMonitors+process.jetMETDQMOfflineSourceCosmic+process.egammaCosmicPhotonMonitors+process.triggerCosmicOfflineDQMSource+process.dqmPhysicsCosmics)


process.localReconstructionCosmics = cms.Sequence(process.bunchSpacingProducer+process.trackerCosmics+process.caloCosmics+process.muonsLocalRecoCosmics+process.vertexrecoCosmics+process.lumiProducer)


process.DQMOfflineCosmics = cms.Sequence(process.DQMOfflineCosmicsPreDPG+process.DQMOfflineCosmicsPrePOG+process.DQMMessageLogger)


process.muonrecoforcosmics = cms.Sequence(process.muontrackingforcosmics+process.allmuons+process.muonsFromCosmics)


process.muonRecoAllGR = cms.Sequence(process.muonrecoforcosmics)


process.muonRecoGR = cms.Sequence(process.muonRecoAllGR+(process.muonrecoforcosmics1Leg+process.muonrecoforcosmicsWitht0Correction)+process.muonrecoBeamHaloEndCapsOnly+process.muonrecoforcosmicsNoRPC+process.muonrecoforsplitcosmics+process.muonRecoLHC)


process.muonsCosmics = cms.Sequence(process.muonRecoGR)


process.reconstructionCosmics = cms.Sequence(process.localReconstructionCosmics+process.beamhaloTracksSeq+process.jetsCosmics+process.muonsCosmics+process.regionalCosmicTracksSeq+process.cosmicDCTracksSeq+process.metrecoCosmics+process.egammaCosmics+process.logErrorHarvester)


process.pathALCARECOTkAlCosmicsCosmicTF0T = cms.Path(process.ALCARECOTkAlCosmicsCosmicTF0T+process.ALCARECOTkAlCosmicsCosmicTF0TTrackingDQM+process.ALCARECOTkAlCosmicsCosmicTF0TTkAlDQM)


process.L1Reco_step = cms.Path()


process.pathALCARECOMuAlGlobalCosmics = cms.Path(process.ALCARECOMuAlGlobalCosmicsHLT+process.ALCARECOMuAlGlobalCosmicsDCSFilter+process.ALCARECOMuAlGlobalCosmics+process.ALCARECOMuAlGlobalCosmicsTrackingDQM)


process.pathALCARECOTkAlCosmicsRegional0T = cms.Path(process.ALCARECOTkAlCosmicsRegional0T+process.ALCARECOTkAlCosmicsRegional0TTrackingDQM+process.ALCARECOTkAlCosmicsRegional0TTkAlDQM)


process.pathALCARECOHcalCalHOCosmics = cms.Path(process.ALCARECOHcalCalHOCosmicHLT)


process.pathALCARECOTkAlCosmicsCTF0T = cms.Path(process.ALCARECOTkAlCosmicsCTF0T+process.ALCARECOTkAlCosmicsCTF0TTrackingDQM+process.ALCARECOTkAlCosmicsCTF0TTkAlDQM)


process.reconstruction_step = cms.Path()


process.raw2digi_step = cms.Path()


process.pathALCARECODtCalibCosmics = cms.Path(process.ALCARECODtCalibCosmicsHLTFilter+process.dtPreCalibrationTaskAlcaCosmics+process.dtAlcaResolutionMonitorCosmics)


process.dqmofflineOnPAT_step = cms.EndPath(process.dqmDcsInfo+process.dqmInfoEcal+process.ecalMonitorTask+process.ecalFEDMonitor+process.digiTask+process.recHitTask+process.rawTask+process.siStripFEDCheck+process.siStripFEDMonitor+process.SiStripMonitorDigi+process.SiStripMonitorCluster+process.SiStripMonitorTrack_ckf+process.MonitorTrackResiduals_ckf+process.dqmInfoSiStrip+process.SiPixelHLTSource+process.SiPixelRawDataErrorSource+process.SiPixelDigiSource+process.SiPixelRecHitSource+process.SiPixelClusterSource+process.SiPixelTrackResidualSource_Cosmics+process.dqmInfo+process.DTDataIntegrityTask+process.dtDCSByLumiMonitor+process.dtRunConditionVar+process.dtSegmentAnalysisMonitor+process.dtResolutionAnalysisMonitor+process.dtEfficiencyMonitor+process.dtTriggerEfficiencyMonitor+process.dqmInfoDT+process.rpcdigidqm+process.rpcrechitprobability+process.rpcDcsInfo+process.rpcEfficiency+process.rpcEventInfo+process.rpcFEDIntegrity+process.dqmCSCClient+process.ecalPreshowerRawDataTask+process.ecalPreshowerFEDIntegrityTask+process.ecalPreshowerIntegrityTask+process.ecalPreshowerOccupancyTask+process.castorOfflineMonitor+process.TrackMon_cosmicTk+process.TrackMon_ckf+process.TrackEffMon_ckf+process.TrackSplitMonitor+process.LocalRecoLogMessageMon+process.cosmicsSeedingLogMessageMon+process.cosmicsTrackCandidateLogMessageMon+process.cosmicsTrackLogMessageMon+process.dqmInfoTracking+process.MonitorTrackSTACosmicMuons+process.MonitorTrackSTACosmicMuonsBarrel+process.MonitorTrackSTACosmicMuons1LegBarrel+process.MonitorTrackSTACosmicMuonsEndCaps+process.MonitorTrackLHCStandAloneMuonsBarrelOnly+process.MonitorTrackLHCStandAloneMuonsEndCapsOnly+process.MonitorTrackSTACosmicMuonsNoDriftBarrel+process.MonitorTrackTKCosmicMuons+process.MonitorTrackGLBCosmicMuons+process.MonitorTrackEfficiencySTACosmicMuons+process.MonitorTrackEfficiencyTkTracks+process.dtSegmentsMonitor+process.cscMonitor+process.muonEnergyDepositAnalyzer+process.muonCosmicSeedAnalyzer+process.muonCosmicGlbSegmentAnalyzer+process.muonCosmicStaSegmentAnalyzer+process.muonRecoAnalyzer+process.muonKinVsEtaAnalyzer+process.muonIdDQM+process.dqmInfoMuons+process.AnalyzeSUSYDQM+process.jetDQMAnalyzerAk4CaloUncleaned+process.caloMetDQMAnalyzer+process.cosmicPhotonAnalysis+process.hltResults+process.egHLTOffDQMSource+process.barrelAnalyzer+process.endcapAnalyzer+process.allAnalyzer+process.hltTauOfflineMonitor_PFTaus+process.hltTauOfflineMonitor_Inclusive+process.jetMETHLTOfflineSourceAK4+process.jetMETHLTOfflineSourceAK8+process.dqmEnvHLT+process.bphysicsOniaDQM+process.qcdPhotonsCosmicDQM+process.topSingleMuonMediumDQM+process.topSingleElectronMediumDQM+process.singleTopMuonMediumDQM+process.singleTopElectronMediumDQM+process.DiMuonDQM+process.DiElectronDQM+process.ElecMuonDQM+process.susyDQM+process.HiggsDQM+process.ExoticaDQM+process.B2GDQM+process.DQMMessageLogger)


process.write_RECO_step = cms.EndPath(process.write_RECO)


process.dqmoffline_step = cms.EndPath(process.dqmDcsInfo+process.dqmInfoEcal+process.ecalMonitorTask+process.ecalFEDMonitor+process.digiTask+process.recHitTask+process.rawTask+process.siStripFEDCheck+process.siStripFEDMonitor+process.SiStripMonitorDigi+process.SiStripMonitorCluster+process.SiStripMonitorTrack_ckf+process.MonitorTrackResiduals_ckf+process.dqmInfoSiStrip+process.SiPixelHLTSource+process.SiPixelRawDataErrorSource+process.SiPixelDigiSource+process.SiPixelRecHitSource+process.SiPixelClusterSource+process.SiPixelTrackResidualSource_Cosmics+process.dqmInfo+process.DTDataIntegrityTask+process.dtDCSByLumiMonitor+process.dtRunConditionVar+process.dtSegmentAnalysisMonitor+process.dtResolutionAnalysisMonitor+process.dtEfficiencyMonitor+process.dtTriggerEfficiencyMonitor+process.dqmInfoDT+process.rpcdigidqm+process.rpcrechitprobability+process.rpcDcsInfo+process.rpcEfficiency+process.rpcEventInfo+process.rpcFEDIntegrity+process.dqmCSCClient+process.ecalPreshowerRawDataTask+process.ecalPreshowerFEDIntegrityTask+process.ecalPreshowerIntegrityTask+process.ecalPreshowerOccupancyTask+process.castorOfflineMonitor+process.TrackMon_cosmicTk+process.TrackMon_ckf+process.TrackEffMon_ckf+process.TrackSplitMonitor+process.LocalRecoLogMessageMon+process.cosmicsSeedingLogMessageMon+process.cosmicsTrackCandidateLogMessageMon+process.cosmicsTrackLogMessageMon+process.dqmInfoTracking+process.MonitorTrackSTACosmicMuons+process.MonitorTrackSTACosmicMuonsBarrel+process.MonitorTrackSTACosmicMuons1LegBarrel+process.MonitorTrackSTACosmicMuonsEndCaps+process.MonitorTrackLHCStandAloneMuonsBarrelOnly+process.MonitorTrackLHCStandAloneMuonsEndCapsOnly+process.MonitorTrackSTACosmicMuonsNoDriftBarrel+process.MonitorTrackTKCosmicMuons+process.MonitorTrackGLBCosmicMuons+process.MonitorTrackEfficiencySTACosmicMuons+process.MonitorTrackEfficiencyTkTracks+process.dtSegmentsMonitor+process.cscMonitor+process.muonEnergyDepositAnalyzer+process.muonCosmicSeedAnalyzer+process.muonCosmicGlbSegmentAnalyzer+process.muonCosmicStaSegmentAnalyzer+process.muonRecoAnalyzer+process.muonKinVsEtaAnalyzer+process.muonIdDQM+process.dqmInfoMuons+process.AnalyzeSUSYDQM+process.jetDQMAnalyzerAk4CaloUncleaned+process.caloMetDQMAnalyzer+process.cosmicPhotonAnalysis+process.hltResults+process.egHLTOffDQMSource+process.barrelAnalyzer+process.endcapAnalyzer+process.allAnalyzer+process.hltTauOfflineMonitor_PFTaus+process.hltTauOfflineMonitor_Inclusive+process.jetMETHLTOfflineSourceAK4+process.jetMETHLTOfflineSourceAK8+process.dqmEnvHLT+process.bphysicsOniaDQM+process.qcdPhotonsCosmicDQM+process.topSingleMuonMediumDQM+process.topSingleElectronMediumDQM+process.singleTopMuonMediumDQM+process.singleTopElectronMediumDQM+process.DiMuonDQM+process.DiElectronDQM+process.ElecMuonDQM+process.susyDQM+process.HiggsDQM+process.ExoticaDQM+process.B2GDQM+process.DQMMessageLogger)


process.endjob_step = cms.EndPath()


process.DBService = cms.Service("DBService")


process.DQMStore = cms.Service("DQMStore")


process.FastTimerService = cms.Service("FastTimerService",
    dqmLumiSectionsRange = cms.untracked.uint32(2500),
    dqmModuleTimeRange = cms.untracked.double(100.0),
    dqmModuleTimeResolution = cms.untracked.double(0.5),
    dqmPath = cms.untracked.string('DQM/TimerService'),
    dqmPathTimeRange = cms.untracked.double(10000.0),
    dqmPathTimeResolution = cms.untracked.double(10.0),
    dqmTimeRange = cms.untracked.double(10000.0),
    dqmTimeResolution = cms.untracked.double(10.0),
    enableDQM = cms.untracked.bool(True),
    enableDQMSummary = cms.untracked.bool(True),
    enableDQMbyLumiSection = cms.untracked.bool(True),
    enableDQMbyModule = cms.untracked.bool(False),
    enableDQMbyModuleType = cms.untracked.bool(False),
    enableDQMbyPathActive = cms.untracked.bool(True),
    enableDQMbyPathCounters = cms.untracked.bool(True),
    enableDQMbyPathDetails = cms.untracked.bool(True),
    enableDQMbyPathExclusive = cms.untracked.bool(False),
    enableDQMbyPathOverhead = cms.untracked.bool(False),
    enableDQMbyPathTotal = cms.untracked.bool(True),
    enableDQMbyProcesses = cms.untracked.bool(False),
    enableTimingExclusive = cms.untracked.bool(False),
    enableTimingModules = cms.untracked.bool(False),
    enableTimingPaths = cms.untracked.bool(True),
    enableTimingSummary = cms.untracked.bool(True),
    skipFirstPath = cms.untracked.bool(False),
    useRealTimeClock = cms.untracked.bool(False)
)


process.MessageLogger = cms.Service("MessageLogger",
    FrameworkJobReport = cms.untracked.PSet(
        FwkJob = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            optionalPSet = cms.untracked.bool(True)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        optionalPSet = cms.untracked.bool(True)
    ),
    categories = cms.untracked.vstring('FwkJob', 
        'FwkReport', 
        'FwkSummary', 
        'Root_NoDictionary'),
    cerr = cms.untracked.PSet(
        FwkJob = cms.untracked.PSet(
            limit = cms.untracked.int32(0),
            optionalPSet = cms.untracked.bool(True)
        ),
        FwkReport = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            optionalPSet = cms.untracked.bool(True),
            reportEvery = cms.untracked.int32(1)
        ),
        FwkSummary = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            optionalPSet = cms.untracked.bool(True),
            reportEvery = cms.untracked.int32(1)
        ),
        INFO = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        Root_NoDictionary = cms.untracked.PSet(
            limit = cms.untracked.int32(0),
            optionalPSet = cms.untracked.bool(True)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000)
        ),
        noTimeStamps = cms.untracked.bool(False),
        optionalPSet = cms.untracked.bool(True),
        threshold = cms.untracked.string('INFO')
    ),
    cerr_stats = cms.untracked.PSet(
        optionalPSet = cms.untracked.bool(True),
        output = cms.untracked.string('cerr'),
        threshold = cms.untracked.string('WARNING')
    ),
    cout = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    debugModules = cms.untracked.vstring(),
    debugs = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    default = cms.untracked.PSet(

    ),
    destinations = cms.untracked.vstring('warnings', 
        'errors', 
        'infos', 
        'debugs', 
        'cout', 
        'cerr'),
    errors = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    fwkJobReports = cms.untracked.vstring('FrameworkJobReport'),
    infos = cms.untracked.PSet(
        Root_NoDictionary = cms.untracked.PSet(
            limit = cms.untracked.int32(0),
            optionalPSet = cms.untracked.bool(True)
        ),
        optionalPSet = cms.untracked.bool(True),
        placeholder = cms.untracked.bool(True)
    ),
    statistics = cms.untracked.vstring('cerr_stats'),
    suppressDebug = cms.untracked.vstring(),
    suppressInfo = cms.untracked.vstring(),
    suppressWarning = cms.untracked.vstring(),
    warnings = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    )
)


process.RandomNumberGeneratorService = cms.Service("RandomNumberGeneratorService",
    LHCTransport = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(87654321)
    ),
    MuonSimHits = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(987346)
    ),
    VtxSmeared = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(98765432)
    ),
    ecalPreshowerRecHit = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(6541321)
    ),
    ecalRecHit = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(654321)
    ),
    externalLHEProducer = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(234567)
    ),
    famosPileUp = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    famosSimHits = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(13579)
    ),
    fastTrackerRecHits = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(24680)
    ),
    g4SimHits = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(11)
    ),
    generator = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(123456789)
    ),
    hbhereco = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    hfreco = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    hiSignal = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(123456789)
    ),
    hiSignalG4SimHits = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(11)
    ),
    hiSignalLHCTransport = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(88776655)
    ),
    horeco = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    l1ParamMuons = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(6453209)
    ),
    mix = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(12345)
    ),
    mixData = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(12345)
    ),
    mixGenPU = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    mixRecoTracks = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    mixSimCaloHits = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    paramMuons = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(54525)
    ),
    saveFileName = cms.untracked.string(''),
    simBeamSpotFilter = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(87654321)
    ),
    simMuonCSCDigis = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(11223344)
    ),
    simMuonDTDigis = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simMuonRPCDigis = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simSiStripDigiSimLink = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(1234567)
    )
)


process.SiStripDetInfoFileReader = cms.Service("SiStripDetInfoFileReader")


process.SimpleMemoryCheck = cms.Service("SimpleMemoryCheck",
    jobReportOutputOnly = cms.untracked.bool(True)
)


process.Timing = cms.Service("Timing",
    summaryOnly = cms.untracked.bool(True)
)


process.TkDetMap = cms.Service("TkDetMap")


process.AnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum')
)


process.AnalyticalPropagatorParabolicMF = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagatorParabolicMf'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf')
)


process.AnyDirectionAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnyDirectionAnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('anyDirection')
)


process.BeamHaloMPropagatorAlong = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('BeamHaloMPropagatorAlong'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(10000),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.BeamHaloMPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('BeamHaloMPropagatorOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(10000),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.BeamHaloPropagatorAlong = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorAlong'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorAlong'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum')
)


process.BeamHaloPropagatorAny = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorAny'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorAny'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorAlong'),
    PropagationDirection = cms.string('anyDirection')
)


process.BeamHaloPropagatorOpposite = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorOpposite'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorOpposite'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.BeamHaloSHPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorAlong'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.BeamHaloSHPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorAny'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.BeamHaloSHPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorOpposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.CSCChannelMapperESProducer = cms.ESProducer("CSCChannelMapperESProducer",
    AlgoName = cms.string('CSCChannelMapperPostls1')
)


process.CSCGeometryESModule = cms.ESProducer("CSCGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    debugV = cms.untracked.bool(False),
    useCentreTIOffsets = cms.bool(False),
    useDDD = cms.bool(False),
    useGangedStripsInME1a = cms.bool(False),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True)
)


process.CSCIndexerESProducer = cms.ESProducer("CSCIndexerESProducer",
    AlgoName = cms.string('CSCIndexerPostls1')
)


process.CaloGeometryBuilder = cms.ESProducer("CaloGeometryBuilder",
    SelectedCalos = cms.vstring('HCAL', 
        'ZDC', 
        'CASTOR', 
        'EcalBarrel', 
        'EcalEndcap', 
        'EcalPreshower', 
        'TOWER')
)


process.CaloTPGTranscoder = cms.ESProducer("CaloTPGTranscoderULUTs",
    HFTPScaleShift = cms.PSet(
        NCT = cms.int32(1),
        RCT = cms.int32(3)
    ),
    LUTfactor = cms.vint32(1, 2, 5, 0),
    RCTLSB = cms.double(0.25),
    ZS = cms.vint32(4, 2, 1, 0),
    hcalLUT1 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/outputLUTtranscoder_physics.dat'),
    hcalLUT2 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/TPGcalcDecompress2.txt'),
    ietaLowerBound = cms.vint32(1, 18, 27, 29),
    ietaUpperBound = cms.vint32(17, 26, 28, 32),
    nominal_gain = cms.double(0.177),
    read_Ascii_Compression_LUTs = cms.bool(False),
    read_Ascii_RCT_LUTs = cms.bool(False)
)


process.CaloTopologyBuilder = cms.ESProducer("CaloTopologyBuilder")


process.CaloTowerConstituentsMapBuilder = cms.ESProducer("CaloTowerConstituentsMapBuilder",
    MapAuto = cms.untracked.bool(False),
    MapFile = cms.untracked.string('Geometry/CaloTopology/data/CaloTowerEEGeometric.map.gz'),
    SkipHE = cms.untracked.bool(False),
    appendToDataLabel = cms.string('')
)


process.CaloTowerGeometryFromDBEP = cms.ESProducer("CaloTowerGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.CaloTowerTopologyEP = cms.ESProducer("CaloTowerTopologyEP")


process.CastorDbProducer = cms.ESProducer("CastorDbProducer",
    appendToDataLabel = cms.string('')
)


process.CastorGeometryFromDBEP = cms.ESProducer("CastorGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.Chi2EstimatorForMuRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2EstimatorForMuRefit'),
    MaxChi2 = cms.double(100000.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.Chi2EstimatorForMuonTrackLoader = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2EstimatorForMuonTrackLoader'),
    MaxChi2 = cms.double(100000.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.Chi2EstimatorForRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2EstimatorForRefit'),
    MaxChi2 = cms.double(100000.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3.0)
)


process.Chi2MeasurementEstimator = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2'),
    MaxChi2 = cms.double(30),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.Chi2MeasurementEstimatorForInOut = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2ForInOut'),
    MaxChi2 = cms.double(100.0),
    MaxDisplacement = cms.double(100),
    MaxSagitta = cms.double(-1),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.Chi2MeasurementEstimatorForOutIn = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2ForOutIn'),
    MaxChi2 = cms.double(500.0),
    MaxDisplacement = cms.double(100),
    MaxSagitta = cms.double(-1.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.Chi2MeasurementEstimatorForP5 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2MeasurementEstimatorForP5'),
    MaxChi2 = cms.double(100.0),
    MaxDisplacement = cms.double(100),
    MaxSagitta = cms.double(-1),
    MinPtForHitRecoveryInGluedDet = cms.double(100000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(4.0)
)


process.ClusterShapeHitFilterESProducer = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('ClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/pixelShape.par'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    )
)


process.DTGeometryESModule = cms.ESProducer("DTGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    fromDDD = cms.bool(False)
)


process.DummyDetLayerGeometry = cms.ESProducer("DetLayerGeometryESProducer",
    ComponentName = cms.string('DummyDetLayerGeometry')
)


process.EcalBarrelGeometryFromDBEP = cms.ESProducer("EcalBarrelGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalElectronicsMappingBuilder = cms.ESProducer("EcalElectronicsMappingBuilder")


process.EcalEndcapGeometryFromDBEP = cms.ESProducer("EcalEndcapGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalLaserCorrectionService = cms.ESProducer("EcalLaserCorrectionService")


process.EcalPreshowerGeometryFromDBEP = cms.ESProducer("EcalPreshowerGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalTrigTowerConstituentsMapBuilder = cms.ESProducer("EcalTrigTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/EcalMapping/data/EndCap_TTMap.txt')
)


process.EstimatorForSTA = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2STA'),
    MaxChi2 = cms.double(1000.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.FittingSmootherRKP5 = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(False),
    ComponentName = cms.string('FittingSmootherRKP5'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(4),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother'),
    appendToDataLabel = cms.string('')
)


process.FlexibleKFFittingSmoother = cms.ESProducer("FlexibleKFFittingSmootherESProducer",
    ComponentName = cms.string('FlexibleKFFittingSmoother'),
    appendToDataLabel = cms.string(''),
    looperFitter = cms.string('LooperFittingSmoother'),
    standardFitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK')
)


process.GlbMuKFFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('GlbMuKFFitter'),
    Estimator = cms.string('Chi2EstimatorForMuRefit'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.GlobalDetLayerGeometry = cms.ESProducer("GlobalDetLayerGeometryESProducer",
    ComponentName = cms.string('GlobalDetLayerGeometry')
)


process.GlobalTrackingGeometryESProducer = cms.ESProducer("GlobalTrackingGeometryESProducer")


process.HcalAlignmentEP = cms.ESProducer("HcalAlignmentEP")


process.HcalGeometryFromDBEP = cms.ESProducer("HcalGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.HcalTPGCoderULUT = cms.ESProducer("HcalTPGCoderULUT",
    FGLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/HBHE_FG_LUT.dat'),
    LUTGenerationMode = cms.bool(False),
    MaskBit = cms.int32(32768),
    RCalibFile = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/RecHit-TPG-calib.dat'),
    inputLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/inputLUTcoder_physics.dat'),
    read_Ascii_LUTs = cms.bool(False),
    read_FG_LUTs = cms.bool(False),
    read_XML_LUTs = cms.bool(False)
)


process.HcalTrigTowerGeometryESProducer = cms.ESProducer("HcalTrigTowerGeometryESProducer")


process.KFFitterForRefitInsideOut = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFFitterForRefitOutsideIn = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFFittingSmootheForSTA = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFitterSmootherSTA'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('KFFitterSTA'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmootherSTA'),
    appendToDataLabel = cms.string('')
)


process.KFFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmoother'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('KFFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmoother'),
    appendToDataLabel = cms.string('')
)


process.KFFittingSmootherBeamHalo = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherBH'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('KFFitterBH'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmootherBH'),
    appendToDataLabel = cms.string('')
)


process.KFFittingSmootherForInOut = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherForInOut'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('KFFitterForInOut'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmootherForInOut'),
    appendToDataLabel = cms.string('')
)


process.KFFittingSmootherWithOutliersRejectionAndRK = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother'),
    appendToDataLabel = cms.string('')
)


process.KFSmootherForMuonTrackLoader = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForMuonTrackLoader'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.KFSmootherForMuonTrackLoaderL3 = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForMuonTrackLoaderL3'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Propagator = cms.string('SmartPropagatorAnyOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.KFSmootherForRefitInsideOut = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFSmootherForRefitOutsideIn = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFSwitching1DUpdatorESProducer = cms.ESProducer("KFSwitching1DUpdatorESProducer",
    ComponentName = cms.string('KFSwitching1DUpdator'),
    doEndCap = cms.bool(False)
)


process.KFTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterial'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterBeamHalo = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterBH'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('BeamHaloPropagatorAlong'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForInOut = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForInOut'),
    Estimator = cms.string('Chi2ForInOut'),
    Propagator = cms.string('alongMomElePropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForOutIn = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForOutIn'),
    Estimator = cms.string('Chi2ForOutIn'),
    Propagator = cms.string('alongMomElePropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForSTA = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterSTA'),
    Estimator = cms.string('Chi2STA'),
    Propagator = cms.string('SteppingHelixPropagatorAny'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.KFTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterial'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.KFTrajectorySmootherBeamHalo = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherBH'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('BeamHaloPropagatorAlong'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.KFTrajectorySmootherForInOut = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForInOut'),
    Estimator = cms.string('Chi2ForInOut'),
    Propagator = cms.string('oppositeToMomElePropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.KFTrajectorySmootherForSTA = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherSTA'),
    Estimator = cms.string('Chi2STA'),
    Propagator = cms.string('SteppingHelixPropagatorOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.KFUpdatorESProducer = cms.ESProducer("KFUpdatorESProducer",
    ComponentName = cms.string('KFUpdator')
)


process.L1DTConfigFromDB = cms.ESProducer("DTConfigDBProducer",
    DTTPGMap = cms.untracked.PSet(
    **dict(
        [
            ("wh0st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh0st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se4" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("wh1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se4" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("wh1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se4" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("wh1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se3" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("whm1st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se3" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("whm1st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se3" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("whm1st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
        ] +
        [
            ("whm2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ]
        )
    ),
    DTTPGParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SectCollParameters = cms.PSet(
            Debug = cms.untracked.bool(False),
            SCCSP1 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCCSP4 = cms.int32(0),
            SCCSP5 = cms.int32(0),
            SCECF1 = cms.bool(False),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCECF4 = cms.bool(False)
        ),
        TUParameters = cms.PSet(
            BtiParameters = cms.PSet(
                AC1 = cms.int32(0),
                AC2 = cms.int32(3),
                ACH = cms.int32(1),
                ACL = cms.int32(2),
                CH = cms.int32(41),
                CL = cms.int32(22),
                DEAD = cms.int32(31),
                Debug = cms.untracked.int32(0),
                KACCTHETA = cms.int32(1),
                KMAX = cms.int32(64),
                LH = cms.int32(21),
                LL = cms.int32(2),
                LTS = cms.int32(3),
                PTMS0 = cms.int32(0),
                PTMS1 = cms.int32(0),
                PTMS10 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS12 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS15 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS20 = cms.int32(1),
                PTMS21 = cms.int32(1),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                PTMS3 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS31 = cms.int32(0),
                PTMS4 = cms.int32(1),
                PTMS5 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS8 = cms.int32(1),
                PTMS9 = cms.int32(1),
                RE43 = cms.int32(2),
                RH = cms.int32(61),
                RL = cms.int32(42),
                RON = cms.bool(True),
                SET = cms.int32(7),
                ST43 = cms.int32(42),
                WEN0 = cms.int32(1),
                WEN1 = cms.int32(1),
                WEN2 = cms.int32(1),
                WEN3 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                WEN6 = cms.int32(1),
                WEN7 = cms.int32(1),
                WEN8 = cms.int32(1),
                XON = cms.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            LutParameters = cms.PSet(
                BTIC = cms.untracked.int32(0),
                D = cms.untracked.double(0),
                Debug = cms.untracked.bool(False),
                WHEEL = cms.untracked.int32(-1),
                XCN = cms.untracked.double(0)
            ),
            TSPhiParameters = cms.PSet(
                Debug = cms.untracked.bool(False),
                TSMCCE1 = cms.bool(True),
                TSMCCE2 = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSMHSP = cms.int32(1),
                TSMHTE1 = cms.bool(True),
                TSMHTE2 = cms.bool(False),
                TSMHTEC = cms.bool(False),
                TSMMSK1 = cms.int32(312),
                TSMMSK2 = cms.int32(312),
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSMNOEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSSCCEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSGS1 = cms.int32(1),
                TSSGS2 = cms.int32(1),
                TSSHTE1 = cms.bool(True),
                TSSHTE2 = cms.bool(False),
                TSSHTEC = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSSMSK2 = cms.int32(312),
                TSSNOE1 = cms.bool(True),
                TSSNOE2 = cms.bool(False),
                TSSNOEC = cms.bool(False),
                TSTREN0 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN10 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN18 = cms.bool(True),
                TSTREN19 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN9 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            TracoParameters = cms.PSet(
                BTIC = cms.int32(32),
                DD = cms.int32(18),
                Debug = cms.untracked.int32(0),
                FHISM = cms.int32(0),
                FHTMSK = cms.int32(0),
                FHTPRF = cms.int32(1),
                FLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                FSLMSK = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                LTF = cms.int32(0),
                LTS = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                REUSEI = cms.int32(1),
                REUSEO = cms.int32(1),
                SHISM = cms.int32(0),
                SHTMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SLTMSK = cms.int32(1),
                SPRGCOMP = cms.int32(2),
                SSLMSK = cms.int32(0),
                TRGENB0 = cms.int32(1),
                TRGENB1 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB2 = cms.int32(1),
                TRGENB3 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                TRGENB9 = cms.int32(1)
            )
        )
    ),
    TracoLutsFromDB = cms.bool(True),
    UseBtiAcceptParam = cms.bool(True),
    UseT0 = cms.bool(False),
    bxOffset = cms.int32(19),
    cfgConfig = cms.bool(False),
    debug = cms.bool(False),
    debugBti = cms.int32(0),
    debugDB = cms.bool(False),
    debugLUTs = cms.bool(False),
    debugPed = cms.bool(False),
    debugSC = cms.bool(False),
    debugTSP = cms.bool(False),
    debugTST = cms.bool(False),
    debugTU = cms.bool(False),
    debugTraco = cms.int32(0),
    finePhase = cms.double(25.0)
)


process.LooperFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('LooperFittingSmoother'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('LooperFitter'),
    LogPixelProbabilityCut = cms.double(-14.0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('LooperSmoother'),
    appendToDataLabel = cms.string('')
)


process.LooperTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('LooperFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.LooperTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('LooperSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.MRHChi2MeasurementEstimator = cms.ESProducer("MRHChi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('MRHChi2'),
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0)
)


process.MRHFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('MRHFittingSmoother'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('MRHFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('MRHSmoother'),
    appendToDataLabel = cms.string('')
)


process.MRHTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('MRHFitter'),
    Estimator = cms.string('MRHChi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.MRHTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('MRHSmoother'),
    Estimator = cms.string('MRHChi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.MaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterial'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.MaterialPropagatorParabolicMF = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialParabolicMf'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.MeasurementTracker = cms.ESProducer("MeasurementTrackerESProducer",
    ComponentName = cms.string(''),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    MaskBadAPVFibers = cms.bool(True),
    PixelCPE = cms.string('PixelCPEGeneric'),
    SiStripQualityLabel = cms.string(''),
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    UsePixelModuleQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    UseStripAPVFiberQualityDB = cms.bool(True),
    UseStripModuleQualityDB = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    badStripCuts = cms.PSet(
        TEC = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TIB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TID = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TOB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        )
    )
)


process.MeasurementTrackerBottom = cms.ESProducer("MeasurementTrackerESProducer",
    ComponentName = cms.string('MeasurementTrackerBottom'),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    MaskBadAPVFibers = cms.bool(True),
    PixelCPE = cms.string('PixelCPEGeneric'),
    SiStripQualityLabel = cms.string(''),
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    UsePixelModuleQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    UseStripAPVFiberQualityDB = cms.bool(True),
    UseStripModuleQualityDB = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    badStripCuts = cms.PSet(
        TEC = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TIB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TID = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TOB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        )
    ),
    pixelClusterProducer = cms.string('siPixelClustersBottom'),
    stripClusterProducer = cms.string('siStripClustersBottom')
)


process.MeasurementTrackerTop = cms.ESProducer("MeasurementTrackerESProducer",
    ComponentName = cms.string('MeasurementTrackerTop'),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    MaskBadAPVFibers = cms.bool(True),
    PixelCPE = cms.string('PixelCPEGeneric'),
    SiStripQualityLabel = cms.string(''),
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    UsePixelModuleQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    UseStripAPVFiberQualityDB = cms.bool(True),
    UseStripModuleQualityDB = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    badStripCuts = cms.PSet(
        TEC = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TIB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TID = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TOB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        )
    ),
    pixelClusterProducer = cms.string('siPixelClustersTop'),
    stripClusterProducer = cms.string('siStripClustersTop')
)


process.MuonDetLayerGeometryESProducer = cms.ESProducer("MuonDetLayerGeometryESProducer")


process.MuonTransientTrackingRecHitBuilderESProducer = cms.ESProducer("MuonTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('MuonRecHitBuilder')
)


process.OppositeAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagatorOpposite'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.OppositeAnalyticalPropagatorParabolicMF = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagatorParabolicMfOpposite'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf')
)


process.OppositeMaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.OppositeMaterialPropagatorParabolicMF = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.ParabolicParametrizedMagneticFieldProducer = cms.ESProducer("AutoParametrizedMagneticFieldProducer",
    label = cms.untracked.string('ParabolicMf'),
    valueOverride = cms.int32(-1),
    version = cms.string('Parabolic')
)


process.PixelCPEGenericESProducer = cms.ESProducer("PixelCPEGenericESProducer",
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    ComponentName = cms.string('PixelCPEGeneric'),
    DoCosmics = cms.bool(False),
    EdgeClusterErrorX = cms.double(50.0),
    EdgeClusterErrorY = cms.double(85.0),
    IrradiationBiasCorrection = cms.bool(False),
    LoadTemplatesFromDB = cms.bool(True),
    MagneticFieldRecord = cms.ESInputTag(""),
    PixelErrorParametrization = cms.string('NOTcmsim'),
    TruncatePixelCharge = cms.bool(True),
    UseErrorsFromTemplates = cms.bool(True),
    eff_charge_cut_highX = cms.double(1.0),
    eff_charge_cut_highY = cms.double(1.0),
    eff_charge_cut_lowX = cms.double(0.0),
    eff_charge_cut_lowY = cms.double(0.0),
    inflate_all_errors_no_trk_angle = cms.bool(False),
    inflate_errors = cms.bool(False),
    size_cutX = cms.double(3.0),
    size_cutY = cms.double(3.0),
    useLAAlignmentOffsets = cms.bool(False),
    useLAWidthFromDB = cms.bool(True)
)


process.PropagatorWithMaterialForLoopers = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialForLoopers'),
    Mass = cms.double(0.1396),
    MaxDPhi = cms.double(4.0),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1),
    useOldAnalPropLogic = cms.bool(False),
    useRungeKutta = cms.bool(False)
)


process.PropagatorWithMaterialForLoopersOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialForLoopersOpposite'),
    Mass = cms.double(0.1396),
    MaxDPhi = cms.double(4.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1),
    useOldAnalPropLogic = cms.bool(False),
    useRungeKutta = cms.bool(False)
)


process.RK1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RK1DFittingSmoother'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('RK1DFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RK1DSmoother'),
    appendToDataLabel = cms.string('')
)


process.RK1DTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('RK1DFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFSwitching1DUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.RK1DTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('RK1DSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFSwitching1DUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.RKFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKFittingSmoother'),
    EstimateCut = cms.double(-1),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother'),
    appendToDataLabel = cms.string('')
)


process.RKOutliers1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKOutliers1DFittingSmoother'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('RK1DFitter'),
    LogPixelProbabilityCut = cms.double(0),
    MaxFractionOutliers = cms.double(0.3),
    MaxNumberOfOutliers = cms.int32(3),
    MinDof = cms.int32(2),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    NoOutliersBeginEnd = cms.bool(False),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RK1DSmoother'),
    appendToDataLabel = cms.string('')
)


process.RKTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('RKFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    minHits = cms.int32(3)
)


process.RKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('RKSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    appendToDataLabel = cms.string(''),
    errorRescaling = cms.double(100),
    minHits = cms.int32(3)
)


process.RPCConeBuilder = cms.ESProducer("RPCConeBuilder",
    towerBeg = cms.int32(0),
    towerEnd = cms.int32(16)
)


process.RPCGeometryESModule = cms.ESProducer("RPCGeometryESModule",
    compatibiltyWith11 = cms.untracked.bool(True),
    useDDD = cms.untracked.bool(False)
)


process.RungeKuttaTrackerPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('RungeKuttaTrackerPropagator'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.RungeKuttaTrackerPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('RungeKuttaTrackerPropagatorOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.SiStripRecHitMatcherESProducer = cms.ESProducer("SiStripRecHitMatcherESProducer",
    ComponentName = cms.string('StandardMatcher'),
    NSigmaInside = cms.double(3.0),
    PreFilter = cms.bool(False)
)


process.SmartPropagator = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagator'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterial')
)


process.SmartPropagatorAny = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAny'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterial')
)


process.SmartPropagatorAnyOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAnyOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite')
)


process.SmartPropagatorAnyRK = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAnyRK'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator')
)


process.SmartPropagatorAnyRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAnyRKOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite')
)


process.SmartPropagatorOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite')
)


process.SmartPropagatorRK = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorRK'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator')
)


process.SmartPropagatorRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorRKOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite')
)


process.SteppingHelixPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlong'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorAlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlongNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAny'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorAnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAnyNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorL2Along = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2Along'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2AlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2AlongNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2Any = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2Any'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2AnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2AnyNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2Opposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2Opposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2OppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2OppositeNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOpposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorOppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOppositeNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.StraightLinePropagator = cms.ESProducer("StraightLinePropagatorESProducer",
    ComponentName = cms.string('StraightLinePropagator'),
    PropagationDirection = cms.string('alongMomentum')
)


process.StripCPEESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('SimpleStripCPE'),
    ComponentType = cms.string('SimpleStripCPE'),
    parameters = cms.PSet(

    )
)


process.StripCPEfromTrackAngleESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('StripCPEfromTrackAngle'),
    ComponentType = cms.string('StripCPEfromTrackAngle'),
    parameters = cms.PSet(
        mLC_P0 = cms.double(-0.326),
        mLC_P1 = cms.double(0.618),
        mLC_P2 = cms.double(0.3),
        mTEC_P0 = cms.double(-1.885),
        mTEC_P1 = cms.double(0.471),
        mTIB_P0 = cms.double(-0.742),
        mTIB_P1 = cms.double(0.202),
        mTID_P0 = cms.double(-1.427),
        mTID_P1 = cms.double(0.433),
        mTOB_P0 = cms.double(-1.026),
        mTOB_P1 = cms.double(0.253),
        maxChgOneMIP = cms.double(6000.0),
        useLegacyError = cms.bool(False)
    )
)


process.TTRHBuilderAngleAndTemplate = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithAngleAndTemplate'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPETemplateReco'),
    StripCPE = cms.string('StripCPEfromTrackAngle')
)


process.TrackerRecoGeometryESProducer = cms.ESProducer("TrackerRecoGeometryESProducer")


process.TrajectoryCleanerBySharedHitsForConversions = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('TrajectoryCleanerBySharedHitsForConversions'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.5)
)


process.TransientTrackBuilderESProducer = cms.ESProducer("TransientTrackBuilderESProducer",
    ComponentName = cms.string('TransientTrackBuilder')
)


process.VolumeBasedMagneticFieldESProducer = cms.ESProducer("VolumeBasedMagneticFieldESProducerFromDB",
    debugBuilder = cms.untracked.bool(False),
    label = cms.untracked.string(''),
    valueOverride = cms.int32(-1)
)


process.ZdcGeometryFromDBEP = cms.ESProducer("ZdcGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.ak4PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak4PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak4PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute')
)


process.ak4PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute', 
        'ak4PFCHSResidual')
)


process.ak4PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2Relative')
)


process.ak4PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L3Absolute')
)


process.ak4PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2L3Residual')
)


process.alongMomElePropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('alongMomElePropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.beamHaloNavigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('BeamHaloNavigationSchool'),
    SimpleMagneticField = cms.string('')
)


process.caloConfig = cms.ESProducer("L1TCaloConfigESProducer",
    fwVersionLayer2 = cms.uint32(3),
    l1Epoch = cms.string('Stage1')
)


process.caloDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('CaloDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.chi2CutForConversionTrajectoryBuilder = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('eleLooseChi2'),
    MaxChi2 = cms.double(100000.0),
    MaxDisplacement = cms.double(100.0),
    MaxSagitta = cms.double(-1),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3)
)


process.cosmicsNavigationSchoolESProducer = cms.ESProducer("SkippingLayerCosmicNavigationSchoolESProducer",
    ComponentName = cms.string('CosmicNavigationSchool'),
    allSelf = cms.bool(True),
    noPXB = cms.bool(False),
    noPXF = cms.bool(False),
    noTEC = cms.bool(False),
    noTIB = cms.bool(False),
    noTID = cms.bool(False),
    noTOB = cms.bool(False),
    selfSearch = cms.bool(True)
)


process.ecalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('EcalDetIdAssociator'),
    etaBinSize = cms.double(0.02),
    nEta = cms.int32(300),
    nPhi = cms.int32(360)
)


process.ecalSeverityLevel = cms.ESProducer("EcalSeverityLevelESProducer",
    dbstatusMask = cms.PSet(
        kBad = cms.vstring('kNonRespondingIsolated', 
            'kDeadVFE', 
            'kDeadFE', 
            'kNoDataNoTP'),
        kGood = cms.vstring('kOk'),
        kProblematic = cms.vstring('kDAC', 
            'kNoLaser', 
            'kNoisy', 
            'kNNoisy', 
            'kNNNoisy', 
            'kNNNNoisy', 
            'kNNNNNoisy', 
            'kFixedG6', 
            'kFixedG1', 
            'kFixedG0'),
        kRecovered = cms.vstring(),
        kTime = cms.vstring(),
        kWeird = cms.vstring()
    ),
    flagMask = cms.PSet(
        kBad = cms.vstring('kFaultyHardware', 
            'kDead', 
            'kKilled'),
        kGood = cms.vstring('kGood'),
        kProblematic = cms.vstring('kPoorReco', 
            'kPoorCalib', 
            'kNoisy', 
            'kSaturated'),
        kRecovered = cms.vstring('kLeadingEdgeRecovered', 
            'kTowerRecovered'),
        kTime = cms.vstring('kOutOfTime'),
        kWeird = cms.vstring('kWeird', 
            'kDiWeird')
    ),
    timeThresh = cms.double(2.0)
)


process.fakeForIdealAlignment = cms.ESProducer("FakeAlignmentProducer",
    appendToDataLabel = cms.string('fakeForIdeal')
)


process.hcalDDDRecConstants = cms.ESProducer("HcalDDDRecConstantsESModule",
    appendToDataLabel = cms.string('')
)


process.hcalDDDSimConstants = cms.ESProducer("HcalDDDSimConstantsESModule",
    appendToDataLabel = cms.string('')
)


process.hcalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HcalDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    hcalRegion = cms.int32(2),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.hcalRecAlgos = cms.ESProducer("HcalRecAlgoESProducer",
    DropChannelStatusBits = cms.vstring('HcalCellMask', 
        'HcalCellOff', 
        'HcalCellDead'),
    RecoveredRecHitBits = cms.vstring('TimingAddedBit', 
        'TimingSubtractedBit'),
    SeverityLevels = cms.VPSet(cms.PSet(
        ChannelStatus = cms.vstring(''),
        Level = cms.int32(0),
        RecHitFlags = cms.vstring('')
    ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellCaloTowerProb'),
            Level = cms.int32(1),
            RecHitFlags = cms.vstring('')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellExcludeFromHBHENoiseSummary'),
            Level = cms.int32(5),
            RecHitFlags = cms.vstring('HSCP_R1R2', 
                'HSCP_FracLeader', 
                'HSCP_OuterEnergy', 
                'HSCP_ExpFit', 
                'ADCSaturationBit', 
                'HBHEIsolatedNoise', 
                'AddedSimHcalNoise')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(8),
            RecHitFlags = cms.vstring('HBHEHpdHitMultiplicity', 
                'HBHEPulseShape', 
                'HOBit', 
                'HFDigiTime', 
                'HFInTimeWindow', 
                'ZDCBit', 
                'CalibrationBit', 
                'TimingErrorBit', 
                'HBHEFlatNoise', 
                'HBHESpikeNoise', 
                'HBHETriangleNoise', 
                'HBHETS4TS5Noise', 
                'HBHENegativeNoise', 
                'HBHEOOTPU')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(11),
            RecHitFlags = cms.vstring('HFLongShort', 
                'HFPET', 
                'HFS8S1Ratio')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellCaloTowerMask'),
            Level = cms.int32(12),
            RecHitFlags = cms.vstring('')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellHot'),
            Level = cms.int32(15),
            RecHitFlags = cms.vstring('')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellOff', 
                'HcalCellDead'),
            Level = cms.int32(20),
            RecHitFlags = cms.vstring('')
        ))
)


process.hcalTopologyIdeal = cms.ESProducer("HcalTopologyIdealEP",
    Exclude = cms.untracked.string(''),
    appendToDataLabel = cms.string('')
)


process.hcal_db_producer = cms.ESProducer("HcalDbProducer",
    dump = cms.untracked.vstring(''),
    file = cms.untracked.string('')
)


process.hitCollectorForCosmicDCSeeds = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hitCollectorForCosmicDCSeeds'),
    MaxChi2 = cms.double(100.0),
    MaxDisplacement = cms.double(100),
    MaxSagitta = cms.double(-1.0),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(4.0)
)


process.hoDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HODetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(30),
    nPhi = cms.int32(72)
)


process.idealForDigiCSCGeometry = cms.ESProducer("CSCGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    debugV = cms.untracked.bool(False),
    useCentreTIOffsets = cms.bool(False),
    useDDD = cms.bool(False),
    useGangedStripsInME1a = cms.bool(False),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True)
)


process.idealForDigiDTGeometry = cms.ESProducer("DTGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(False)
)


process.idealForDigiTrackerGeometry = cms.ESProducer("TrackerDigiGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(False)
)


process.initialStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('initialStepChi2Est'),
    MaxChi2 = cms.double(30.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(15.0)
)


process.muonDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('MuonDetIdAssociator'),
    etaBinSize = cms.double(0.125),
    includeBadChambers = cms.bool(True),
    includeGEM = cms.bool(False),
    includeME0 = cms.bool(False),
    nEta = cms.int32(48),
    nPhi = cms.int32(48)
)


process.muonSeededMeasurementEstimatorForOutInDisplaced = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('muonSeededMeasurementEstimatorForOutInDisplaced'),
    MaxChi2 = cms.double(30.0),
    MaxDisplacement = cms.double(0.5),
    MaxSagitta = cms.double(2),
    MinPtForHitRecoveryInGluedDet = cms.double(1000000000000),
    MinimalTolerance = cms.double(0.5),
    appendToDataLabel = cms.string(''),
    nSigma = cms.double(3.0)
)


process.myTTRHBuilderWithoutAngle4MixedPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedPairs'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4MixedTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4PixelPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4PixelTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.navigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('SimpleNavigationSchool'),
    SimpleMagneticField = cms.string('')
)


process.oppositeToMomElePropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('oppositeToMomElePropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.preshowerDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('PreshowerDetIdAssociator'),
    etaBinSize = cms.double(0.1),
    nEta = cms.int32(60),
    nPhi = cms.int32(30)
)


process.siPixelQualityESProducer = cms.ESProducer("SiPixelQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiPixelQualityFromDbRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiPixelDetVOffRcd'),
            tag = cms.string('')
        ))
)


process.siPixelTemplateDBObjectESProducer = cms.ESProducer("SiPixelTemplateDBObjectESProducer")


process.siStripBackPlaneCorrectionDepESProducer = cms.ESProducer("SiStripBackPlaneCorrectionDepESProducer",
    BackPlaneCorrectionDeconvMode = cms.PSet(
        label = cms.untracked.string('deconvolution'),
        record = cms.string('SiStripBackPlaneCorrectionRcd')
    ),
    BackPlaneCorrectionPeakMode = cms.PSet(
        label = cms.untracked.string('peak'),
        record = cms.string('SiStripBackPlaneCorrectionRcd')
    ),
    LatencyRecord = cms.PSet(
        label = cms.untracked.string(''),
        record = cms.string('SiStripLatencyRcd')
    )
)


process.siStripGainESProducer = cms.ESProducer("SiStripGainESProducer",
    APVGain = cms.VPSet(cms.PSet(
        Label = cms.untracked.string(''),
        NormalizationFactor = cms.untracked.double(1.0),
        Record = cms.string('SiStripApvGainRcd')
    ), 
        cms.PSet(
            Label = cms.untracked.string(''),
            NormalizationFactor = cms.untracked.double(1.0),
            Record = cms.string('SiStripApvGain2Rcd')
        )),
    AutomaticNormalization = cms.bool(False),
    appendToDataLabel = cms.string(''),
    printDebug = cms.untracked.bool(False)
)


process.siStripLorentzAngleDepESProducer = cms.ESProducer("SiStripLorentzAngleDepESProducer",
    LatencyRecord = cms.PSet(
        label = cms.untracked.string(''),
        record = cms.string('SiStripLatencyRcd')
    ),
    LorentzAngleDeconvMode = cms.PSet(
        label = cms.untracked.string('deconvolution'),
        record = cms.string('SiStripLorentzAngleRcd')
    ),
    LorentzAnglePeakMode = cms.PSet(
        label = cms.untracked.string('peak'),
        record = cms.string('SiStripLorentzAngleRcd')
    )
)


process.siStripQualityESProducer = cms.ESProducer("SiStripQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiStripDetVOffRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiStripDetCablingRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('RunInfoRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadFiberRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadModuleRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadStripRcd'),
            tag = cms.string('')
        )),
    PrintDebugOutput = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    appendToDataLabel = cms.string('')
)


process.siStripQualityESProducerUnbiased = cms.ESProducer("SiStripQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiStripDetCablingRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        )),
    PrintDebugOutput = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    appendToDataLabel = cms.string('unbiased')
)


process.sistripconn = cms.ESProducer("SiStripConnectivity")


process.stripCPEESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('stripCPE'),
    ComponentType = cms.string('SimpleStripCPE'),
    parameters = cms.PSet(

    )
)


process.templates = cms.ESProducer("PixelCPETemplateRecoESProducer",
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    ComponentName = cms.string('PixelCPETemplateReco'),
    DoCosmics = cms.bool(False),
    DoLorentz = cms.bool(True),
    LoadTemplatesFromDB = cms.bool(True),
    UseClusterSplitter = cms.bool(False),
    speed = cms.int32(-2)
)


process.topDQMak5PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.topDQMak5PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.topDQMak5PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('topDQMak5PFCHSL2Relative', 
        'topDQMak5PFCHSL3Absolute')
)


process.topDQMak5PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('topDQMak5PFCHSL2Relative', 
        'topDQMak5PFCHSL3Absolute', 
        'topDQMak5PFCHSResidual')
)


process.topDQMak5PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2Relative')
)


process.topDQMak5PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L3Absolute')
)


process.topDQMak5PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2L3Residual')
)


process.trackerGeometryDB = cms.ESProducer("TrackerDigiGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    fromDDD = cms.bool(False)
)


process.trackerNumberingGeometryDB = cms.ESProducer("TrackerGeometricDetESModule",
    appendToDataLabel = cms.string(''),
    fromDDD = cms.bool(False)
)


process.trackerTopology = cms.ESProducer("TrackerTopologyEP",
    appendToDataLabel = cms.string('')
)


process.trajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('TrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.19)
)


process.ttrhbwor = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithoutRefit'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('Fake'),
    PixelCPE = cms.string('Fake'),
    StripCPE = cms.string('Fake')
)


process.ttrhbwr = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithTrackAngle'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('StripCPEfromTrackAngle')
)


process.CSCChannelMapperESSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('CSCChannelMapperRecord')
)


process.CSCIndexerESSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('CSCIndexerRecord')
)


process.GlobalTag = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        messageLevel = cms.untracked.int32(0),
        security = cms.untracked.string('')
    ),
    DumpStat = cms.untracked.bool(False),
    ReconnectEachRun = cms.untracked.bool(False),
    RefreshAlways = cms.untracked.bool(False),
    RefreshEachRun = cms.untracked.bool(False),
    RefreshOpenIOVs = cms.untracked.bool(False),
    connect = cms.string('frontier://PromptProd/CMS_CONDITIONS'),
    globaltag = cms.string('90X_dataRun2_Prompt_Candidate_2017_02_27_07_32_56_ONLY_FOR_TESTS'),
    pfnPostfix = cms.untracked.string(''),
    pfnPrefix = cms.untracked.string(''),
    snapshotTime = cms.string(''),
    toGet = cms.VPSet()
)


process.HepPDTESSource = cms.ESSource("HepPDTESSource",
    pdtFileName = cms.FileInPath('SimGeneral/HepPDTESSource/data/pythiaparticle.tbl')
)


process.caloConfigSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1TCaloConfigRcd')
)


process.eegeom = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalMappingRcd')
)


process.es_hardcode = cms.ESSource("HcalHardcodeCalibrations",
    GainWidthsForTrigPrims = cms.bool(False),
    HERecalibration = cms.bool(False),
    HEreCalibCutoff = cms.double(20.0),
    HFRecalParameterBlock = cms.PSet(
        HFdepthOneParameterA = cms.vdouble(0.004123, 0.00602, 0.008201, 0.010489, 0.013379, 
            0.016997, 0.021464, 0.027371, 0.034195, 0.044807, 
            0.058939, 0.125497),
        HFdepthOneParameterB = cms.vdouble(-4e-06, -2e-06, 0.0, 4e-06, 1.5e-05, 
            2.6e-05, 6.3e-05, 8.4e-05, 0.00016, 0.000107, 
            0.000425, 0.000209),
        HFdepthTwoParameterA = cms.vdouble(0.002861, 0.004168, 0.0064, 0.008388, 0.011601, 
            0.014425, 0.018633, 0.023232, 0.028274, 0.035447, 
            0.051579, 0.086593),
        HFdepthTwoParameterB = cms.vdouble(-2e-06, -0.0, -7e-06, -6e-06, -2e-06, 
            1e-06, 1.9e-05, 3.1e-05, 6.7e-05, 1.2e-05, 
            0.000157, -3e-06)
    ),
    HFRecalibration = cms.bool(False),
    SiPMCharacteristics = cms.VPSet(cms.PSet(
        crosstalk = cms.double(0.0),
        nonlin1 = cms.double(1.0),
        nonlin2 = cms.double(0.0),
        nonlin3 = cms.double(0.0),
        pixels = cms.int32(36000)
    ), 
        cms.PSet(
            crosstalk = cms.double(0.0),
            nonlin1 = cms.double(1.0),
            nonlin2 = cms.double(0.0),
            nonlin3 = cms.double(0.0),
            pixels = cms.int32(2500)
        ), 
        cms.PSet(
            crosstalk = cms.double(0.17),
            nonlin1 = cms.double(1.00985),
            nonlin2 = cms.double(7.84089e-06),
            nonlin3 = cms.double(2.86282e-10),
            pixels = cms.int32(27370)
        ), 
        cms.PSet(
            crosstalk = cms.double(0.196),
            nonlin1 = cms.double(1.00546),
            nonlin2 = cms.double(6.40239e-06),
            nonlin3 = cms.double(1.27011e-10),
            pixels = cms.int32(38018)
        ), 
        cms.PSet(
            crosstalk = cms.double(0.17),
            nonlin1 = cms.double(1.00985),
            nonlin2 = cms.double(7.84089e-06),
            nonlin3 = cms.double(2.86282e-10),
            pixels = cms.int32(27370)
        ), 
        cms.PSet(
            crosstalk = cms.double(0.196),
            nonlin1 = cms.double(1.00546),
            nonlin2 = cms.double(6.40239e-06),
            nonlin3 = cms.double(1.27011e-10),
            pixels = cms.int32(38018)
        )),
    hb = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        gain = cms.vdouble(0.19),
        gainWidth = cms.vdouble(0.0),
        mcShape = cms.int32(125),
        pedestal = cms.double(3.285),
        pedestalWidth = cms.double(0.809),
        photoelectronsToAnalog = cms.double(0.0),
        qieOffset = cms.vdouble(-0.49, 1.8, 7.2, 37.9),
        qieSlope = cms.vdouble(0.912, 0.917, 0.922, 0.923),
        qieType = cms.int32(0),
        recoShape = cms.int32(105)
    ),
    hbUpgrade = cms.PSet(
        darkCurrent = cms.vdouble(0.01, 0.015),
        gain = cms.vdouble(0.000439367311072),
        gainWidth = cms.vdouble(0),
        mcShape = cms.int32(203),
        pedestal = cms.double(17.3),
        pedestalWidth = cms.double(1.5),
        photoelectronsToAnalog = cms.double(44.0),
        qieOffset = cms.vdouble(0.0, 0.0, 0.0, 0.0),
        qieSlope = cms.vdouble(0.05376, 0.05376, 0.05376, 0.05376),
        qieType = cms.int32(2),
        recoShape = cms.int32(203)
    ),
    he = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        gain = cms.vdouble(0.23),
        gainWidth = cms.vdouble(0),
        mcShape = cms.int32(125),
        pedestal = cms.double(3.163),
        pedestalWidth = cms.double(0.9698),
        photoelectronsToAnalog = cms.double(0.0),
        qieOffset = cms.vdouble(-0.38, 2.0, 7.6, 39.6),
        qieSlope = cms.vdouble(0.912, 0.916, 0.92, 0.922),
        qieType = cms.int32(0),
        recoShape = cms.int32(105)
    ),
    heUpgrade = cms.PSet(
        darkCurrent = cms.vdouble(0.01, 0.015),
        gain = cms.vdouble(0.000439367311072),
        gainWidth = cms.vdouble(0),
        mcShape = cms.int32(203),
        pedestal = cms.double(17.3),
        pedestalWidth = cms.double(1.5),
        photoelectronsToAnalog = cms.double(44.0),
        qieOffset = cms.vdouble(0.0, 0.0, 0.0, 0.0),
        qieSlope = cms.vdouble(0.05376, 0.05376, 0.05376, 0.05376),
        qieType = cms.int32(2),
        recoShape = cms.int32(203)
    ),
    hf = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        gain = cms.vdouble(0.14, 0.135),
        gainWidth = cms.vdouble(0.0, 0.0),
        mcShape = cms.int32(301),
        pedestal = cms.double(9.354),
        pedestalWidth = cms.double(2.516),
        photoelectronsToAnalog = cms.double(0.0),
        qieOffset = cms.vdouble(-0.87, 1.4, 7.8, -29.6),
        qieSlope = cms.vdouble(0.359, 0.358, 0.36, 0.367),
        qieType = cms.int32(0),
        recoShape = cms.int32(301)
    ),
    hfUpgrade = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        gain = cms.vdouble(0.14, 0.135),
        gainWidth = cms.vdouble(0.0, 0.0),
        mcShape = cms.int32(301),
        pedestal = cms.double(13.33),
        pedestalWidth = cms.double(3.33),
        photoelectronsToAnalog = cms.double(0.0),
        qieOffset = cms.vdouble(0.0697, -0.7405, 12.38, -671.9),
        qieSlope = cms.vdouble(0.297, 0.298, 0.298, 0.313),
        qieType = cms.int32(1),
        recoShape = cms.int32(301)
    ),
    ho = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        gain = cms.vdouble(0.006, 0.0087),
        gainWidth = cms.vdouble(0.0, 0.0),
        mcShape = cms.int32(201),
        pedestal = cms.double(12.06),
        pedestalWidth = cms.double(0.6285),
        photoelectronsToAnalog = cms.double(4.0),
        qieOffset = cms.vdouble(-0.44, 1.4, 7.1, 38.5),
        qieSlope = cms.vdouble(0.907, 0.915, 0.92, 0.921),
        qieType = cms.int32(0),
        recoShape = cms.int32(201)
    ),
    iLumi = cms.double(-1.0),
    killHE = cms.bool(False),
    testHFQIE10 = cms.bool(False),
    toGet = cms.untracked.vstring('GainWidths'),
    useHBUpgrade = cms.bool(False),
    useHEUpgrade = cms.bool(False),
    useHFUpgrade = cms.bool(False),
    useHOUpgrade = cms.bool(True),
    useLayer0Weight = cms.bool(False)
)


process.essourceEcalSev = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalSeverityLevelAlgoRcd')
)


process.essourceSev = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('HcalSeverityLevelComputerRcd')
)


process.rpcconesrc = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1RPCConeBuilderRcd')
)


process.totemDAQMappingESSourceXML_TimingDiamond = cms.ESSource("TotemDAQMappingESSourceXML",
    configuration = cms.VPSet(cms.PSet(
        mappingFileNames = cms.vstring(),
        maskFileNames = cms.vstring(),
        validityRange = cms.EventRange(1, 0, 1, 283819, 0, 0)
    ), 
        cms.PSet(
            mappingFileNames = cms.vstring('CondFormats/CTPPSReadoutObjects/xml/mapping_timing_diamond.xml'),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(283820, 0, 1, 999999999, 0, 0)
        )),
    subSystem = cms.untracked.string('TimingDiamond'),
    verbosity = cms.untracked.uint32(0)
)


process.totemDAQMappingESSourceXML_TrackingStrip = cms.ESSource("TotemDAQMappingESSourceXML",
    configuration = cms.VPSet(cms.PSet(
        mappingFileNames = cms.vstring('CondFormats/CTPPSReadoutObjects/xml/mapping_tracking_strip_to_fill_5288.xml'),
        maskFileNames = cms.vstring(),
        validityRange = cms.EventRange(1, 0, 1, 280385, 0, 0)
    ), 
        cms.PSet(
            mappingFileNames = cms.vstring(),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(280386, 0, 1, 281600, 0, 0)
        ), 
        cms.PSet(
            mappingFileNames = cms.vstring('CondFormats/CTPPSReadoutObjects/xml/mapping_tracking_strip_from_fill_5330.xml'),
            maskFileNames = cms.vstring(),
            validityRange = cms.EventRange(281601, 0, 1, 999999999, 0, 0)
        )),
    subSystem = cms.untracked.string('TrackingStrip'),
    verbosity = cms.untracked.uint32(0)
)


process.tpparams12 = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalTPGPhysicsConstRcd')
)


process.prefer("es_hardcode")

process.schedule = cms.Schedule(*[ process.raw2digi_step, process.L1Reco_step, process.reconstruction_step, process.pathALCARECOHcalCalHOCosmics, process.pathALCARECOMuAlGlobalCosmics, process.pathALCARECOTkAlCosmicsCTF0T, process.pathALCARECOTkAlCosmicsCosmicTF0T, process.pathALCARECOTkAlCosmicsRegional0T, process.pathALCARECODtCalibCosmics, process.dqmoffline_step, process.dqmofflineOnPAT_step, process.endjob_step, process.write_RECO_step ])
